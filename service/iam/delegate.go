// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package iam

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	delegate "github.com/telecom-cloud/telecomcloud-sdk-go/service/iam/types/delegate"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type DelegateClient interface {
	CreateAutomateDelegateRole(context context.Context, req *delegate.CreateAutomateDelegateRoleRequest, reqOpt ...config.RequestOption) (resp *delegate.CreateAutomateDelegateRoleResponse, rawResponse *protocol.Response, err error)

	SwitchDelegate(context context.Context, req *delegate.SwitchDelegateRequest, reqOpt ...config.RequestOption) (resp *delegate.SwitchDelegateResponse, rawResponse *protocol.Response, err error)

	CheckDelegateExist(context context.Context, req *delegate.CheckDelegateExistRequest, reqOpt ...config.RequestOption) (resp *delegate.CheckDelegateExistResponse, rawResponse *protocol.Response, err error)

	QueryDelegateList(context context.Context, req *delegate.QueryDelegateListRequest, reqOpt ...config.RequestOption) (resp *delegate.QueryDelegateListResponse, rawResponse *protocol.Response, err error)

	SetEpGroup(context context.Context, req *delegate.SetEpGroupRequest, reqOpt ...config.RequestOption) (resp *delegate.SetEpGroupResponse, rawResponse *protocol.Response, err error)

	QueryTmpAkByTicket(context context.Context, req *delegate.QueryTmpTicketRequest, reqOpt ...config.RequestOption) (resp *delegate.QueryTmpTicketResponse, rawResponse *protocol.Response, err error)
}

type delegateClient struct {
	client *HttpClient
}

func NewDelegateClient(hostUrl string, ops ...Option) (DelegateClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &delegateClient{
		client: cli,
	}, nil
}

func (s *delegateClient) CreateAutomateDelegateRole(ctx context.Context, req *delegate.CreateAutomateDelegateRoleRequest, reqOpt ...config.RequestOption) (resp *delegate.CreateAutomateDelegateRoleResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/delegate/createAutomateDelegateRole")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *delegateClient) SwitchDelegate(ctx context.Context, req *delegate.SwitchDelegateRequest, reqOpt ...config.RequestOption) (resp *delegate.SwitchDelegateResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/delegate/switchDelegate")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *delegateClient) CheckDelegateExist(ctx context.Context, req *delegate.CheckDelegateExistRequest, reqOpt ...config.RequestOption) (resp *delegate.CheckDelegateExistResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"name":      req.GetName(),
		"accountId": req.GetAccountId(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/delegate/checkDelegateExist")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *delegateClient) QueryDelegateList(ctx context.Context, req *delegate.QueryDelegateListRequest, reqOpt ...config.RequestOption) (resp *delegate.QueryDelegateListResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"accountId": req.GetAccountId(),
		"name":      req.GetName(),
		"type":      req.GetType(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/delegate/queryDelegateList")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *delegateClient) SetEpGroup(ctx context.Context, req *delegate.SetEpGroupRequest, reqOpt ...config.RequestOption) (resp *delegate.SetEpGroupResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/project/setEpGroupPloyIncreaseToB")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *delegateClient) QueryTmpAkByTicket(ctx context.Context, req *delegate.QueryTmpTicketRequest, reqOpt ...config.RequestOption) (resp *delegate.QueryTmpTicketResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/credential/queryTmpAkByTicket")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultDelegateClient, _ = NewDelegateClient(baseDomain)

func ConfigDefaultDelegateClient(ops ...Option) (err error) {
	defaultDelegateClient, err = NewDelegateClient(baseDomain, ops...)
	return
}

func CreateAutomateDelegateRole(context context.Context, req *delegate.CreateAutomateDelegateRoleRequest, reqOpt ...config.RequestOption) (resp *delegate.CreateAutomateDelegateRoleResponse, rawResponse *protocol.Response, err error) {
	return defaultDelegateClient.CreateAutomateDelegateRole(context, req, reqOpt...)
}

func SwitchDelegate(context context.Context, req *delegate.SwitchDelegateRequest, reqOpt ...config.RequestOption) (resp *delegate.SwitchDelegateResponse, rawResponse *protocol.Response, err error) {
	return defaultDelegateClient.SwitchDelegate(context, req, reqOpt...)
}

func CheckDelegateExist(context context.Context, req *delegate.CheckDelegateExistRequest, reqOpt ...config.RequestOption) (resp *delegate.CheckDelegateExistResponse, rawResponse *protocol.Response, err error) {
	return defaultDelegateClient.CheckDelegateExist(context, req, reqOpt...)
}

func QueryDelegateList(context context.Context, req *delegate.QueryDelegateListRequest, reqOpt ...config.RequestOption) (resp *delegate.QueryDelegateListResponse, rawResponse *protocol.Response, err error) {
	return defaultDelegateClient.QueryDelegateList(context, req, reqOpt...)
}

func SetEpGroup(context context.Context, req *delegate.SetEpGroupRequest, reqOpt ...config.RequestOption) (resp *delegate.SetEpGroupResponse, rawResponse *protocol.Response, err error) {
	return defaultDelegateClient.SetEpGroup(context, req, reqOpt...)
}

func QueryTmpAkByTicket(context context.Context, req *delegate.QueryTmpTicketRequest, reqOpt ...config.RequestOption) (resp *delegate.QueryTmpTicketResponse, rawResponse *protocol.Response, err error) {
	return defaultDelegateClient.QueryTmpAkByTicket(context, req, reqOpt...)
}
