// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: inference.proto

package inference

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	common "github.com/telecom-cloud/telecomcloud-sdk-go/service/isuite/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateInferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId      string               `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	Name          string               `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name,omitempty"`
	Namespace     string               `protobuf:"bytes,3,opt,name=namespace,proto3" form:"namespace" json:"namespace,omitempty"`
	ClusterId     string               `protobuf:"bytes,4,opt,name=clusterId,proto3" form:"clusterId" json:"clusterId,omitempty"`
	Description   string               `protobuf:"bytes,5,opt,name=description,proto3" form:"description" json:"description,omitempty"`
	JobMode       string               `protobuf:"bytes,6,opt,name=jobMode,proto3" form:"jobMode" json:"jobMode,omitempty"`
	FrameworkId   string               `protobuf:"bytes,7,opt,name=frameworkId,proto3" form:"frameworkId" json:"frameworkId,omitempty"`
	FrameworkType string               `protobuf:"bytes,8,opt,name=frameworkType,proto3" form:"frameworkType" json:"frameworkType,omitempty"`
	Framework     string               `protobuf:"bytes,9,opt,name=framework,proto3" form:"framework" json:"framework,omitempty"`
	ModelId       string               `protobuf:"bytes,10,opt,name=modelId,proto3" form:"modelId" json:"modelId,omitempty"`
	Model         string               `protobuf:"bytes,11,opt,name=model,proto3" form:"model" json:"model,omitempty"`
	Replicas      int32                `protobuf:"varint,12,opt,name=replicas,proto3" form:"replicas" json:"replicas,omitempty"`
	Queue         string               `protobuf:"bytes,13,opt,name=queue,proto3" form:"queue" json:"queue,omitempty"`
	Priority      string               `protobuf:"bytes,14,opt,name=priority,proto3" form:"priority" json:"priority,omitempty"`
	Annotations   []*common.Annotation `protobuf:"bytes,15,rep,name=annotations,proto3" form:"annotations" json:"annotations,omitempty"`
	Labels        []*common.Label      `protobuf:"bytes,16,rep,name=labels,proto3" form:"labels" json:"labels,omitempty"`
	Metadata      []*common.Metadata   `protobuf:"bytes,17,rep,name=metadata,proto3" form:"metadata" json:"metadata,omitempty"`
	ServiceConfig *ServiceConfig       `protobuf:"bytes,18,opt,name=serviceConfig,proto3" form:"serviceConfig" json:"serviceConfig,omitempty"`
	Tolerances    []*common.Toleration `protobuf:"bytes,20,rep,name=tolerances,proto3" form:"tolerances" json:"tolerances,omitempty"`
	Settings      *common.JobSettings  `protobuf:"bytes,21,opt,name=settings,proto3" form:"settings" json:"settings,omitempty"`
}

func (x *CreateInferenceRequest) Reset() {
	*x = CreateInferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInferenceRequest) ProtoMessage() {}

func (x *CreateInferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateInferenceRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{0}
}

func (x *CreateInferenceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CreateInferenceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInferenceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateInferenceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateInferenceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateInferenceRequest) GetJobMode() string {
	if x != nil {
		return x.JobMode
	}
	return ""
}

func (x *CreateInferenceRequest) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

func (x *CreateInferenceRequest) GetFrameworkType() string {
	if x != nil {
		return x.FrameworkType
	}
	return ""
}

func (x *CreateInferenceRequest) GetFramework() string {
	if x != nil {
		return x.Framework
	}
	return ""
}

func (x *CreateInferenceRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *CreateInferenceRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateInferenceRequest) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *CreateInferenceRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *CreateInferenceRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *CreateInferenceRequest) GetAnnotations() []*common.Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateInferenceRequest) GetLabels() []*common.Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateInferenceRequest) GetMetadata() []*common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateInferenceRequest) GetServiceConfig() *ServiceConfig {
	if x != nil {
		return x.ServiceConfig
	}
	return nil
}

func (x *CreateInferenceRequest) GetTolerances() []*common.Toleration {
	if x != nil {
		return x.Tolerances
	}
	return nil
}

func (x *CreateInferenceRequest) GetSettings() *common.JobSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CreateInferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" form:"inferenceId" json:"inferenceId,omitempty" query:"inferenceId"`
}

func (x *CreateInferenceResponse) Reset() {
	*x = CreateInferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInferenceResponse) ProtoMessage() {}

func (x *CreateInferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInferenceResponse.ProtoReflect.Descriptor instead.
func (*CreateInferenceResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{1}
}

func (x *CreateInferenceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateInferenceResponse) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

type ServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Type  string  `protobuf:"bytes,2,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	ElbId string  `protobuf:"bytes,3,opt,name=elbId,proto3" form:"elbId" json:"elbId,omitempty" query:"elbId"`
	Ports []*Port `protobuf:"bytes,4,rep,name=ports,proto3" form:"ports" json:"ports,omitempty" query:"ports"`
}

func (x *ServiceConfig) Reset() {
	*x = ServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig) ProtoMessage() {}

func (x *ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ServiceConfig) GetElbId() string {
	if x != nil {
		return x.ElbId
	}
	return ""
}

func (x *ServiceConfig) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

type ServiceUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType string   `protobuf:"bytes,1,opt,name=addressType,proto3" form:"addressType" json:"addressType,omitempty" query:"addressType"`
	AddressUrl  []string `protobuf:"bytes,2,rep,name=addressUrl,proto3" form:"addressUrl" json:"addressUrl,omitempty" query:"addressUrl"`
}

func (x *ServiceUrl) Reset() {
	*x = ServiceUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceUrl) ProtoMessage() {}

func (x *ServiceUrl) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceUrl.ProtoReflect.Descriptor instead.
func (*ServiceUrl) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceUrl) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *ServiceUrl) GetAddressUrl() []string {
	if x != nil {
		return x.AddressUrl
	}
	return nil
}

type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol   string `protobuf:"bytes,1,opt,name=protocol,proto3" form:"protocol" json:"protocol,omitempty" query:"protocol"`
	TargetPort int32  `protobuf:"varint,2,opt,name=targetPort,proto3" form:"targetPort" json:"targetPort,omitempty" query:"targetPort"`
	SvcPort    int32  `protobuf:"varint,3,opt,name=svcPort,proto3" form:"svcPort" json:"svcPort,omitempty" query:"svcPort"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{4}
}

func (x *Port) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Port) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *Port) GetSvcPort() int32 {
	if x != nil {
		return x.SvcPort
	}
	return 0
}

type HpaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HpaConfig) Reset() {
	*x = HpaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HpaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HpaConfig) ProtoMessage() {}

func (x *HpaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HpaConfig.ProtoReflect.Descriptor instead.
func (*HpaConfig) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{5}
}

type DeleteInferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
}

func (x *DeleteInferenceRequest) Reset() {
	*x = DeleteInferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInferenceRequest) ProtoMessage() {}

func (x *DeleteInferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInferenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInferenceRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteInferenceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *DeleteInferenceRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

type DeleteInferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *DeleteInferenceResponse) Reset() {
	*x = DeleteInferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInferenceResponse) ProtoMessage() {}

func (x *DeleteInferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInferenceResponse.ProtoReflect.Descriptor instead.
func (*DeleteInferenceResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteInferenceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateInferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId      string         `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	Description   string         `protobuf:"bytes,2,opt,name=description,proto3" form:"description" json:"description,omitempty"`
	ServiceConfig *ServiceConfig `protobuf:"bytes,4,opt,name=serviceConfig,proto3" form:"serviceConfig" json:"serviceConfig,omitempty"`
	InferenceId   string         `protobuf:"bytes,5,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
}

func (x *UpdateInferenceRequest) Reset() {
	*x = UpdateInferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInferenceRequest) ProtoMessage() {}

func (x *UpdateInferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInferenceRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateInferenceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *UpdateInferenceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateInferenceRequest) GetServiceConfig() *ServiceConfig {
	if x != nil {
		return x.ServiceConfig
	}
	return nil
}

func (x *UpdateInferenceRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

type UpdateInferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" form:"inferenceId" json:"inferenceId,omitempty" query:"inferenceId"`
}

func (x *UpdateInferenceResponse) Reset() {
	*x = UpdateInferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInferenceResponse) ProtoMessage() {}

func (x *UpdateInferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInferenceResponse.ProtoReflect.Descriptor instead.
func (*UpdateInferenceResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateInferenceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UpdateInferenceResponse) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

type GetInferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
}

func (x *GetInferenceRequest) Reset() {
	*x = GetInferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceRequest) ProtoMessage() {}

func (x *GetInferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceRequest.ProtoReflect.Descriptor instead.
func (*GetInferenceRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{10}
}

func (x *GetInferenceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetInferenceRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

type GetInferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId     string               `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	InferenceId   string               `protobuf:"bytes,2,opt,name=inferenceId,proto3" form:"inferenceId" json:"inferenceId,omitempty" query:"inferenceId"`
	Name          string               `protobuf:"bytes,3,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Namespace     string               `protobuf:"bytes,4,opt,name=namespace,proto3" form:"namespace" json:"namespace,omitempty" query:"namespace"`
	Status        string               `protobuf:"bytes,5,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`
	Description   string               `protobuf:"bytes,6,opt,name=description,proto3" form:"description" json:"description,omitempty" query:"description"`
	JobMode       string               `protobuf:"bytes,7,opt,name=jobMode,proto3" form:"jobMode" json:"jobMode,omitempty" query:"jobMode"`
	FrameworkId   string               `protobuf:"bytes,8,opt,name=frameworkId,proto3" form:"frameworkId" json:"frameworkId,omitempty" query:"frameworkId"`
	FrameworkType string               `protobuf:"bytes,9,opt,name=frameworkType,proto3" form:"frameworkType" json:"frameworkType,omitempty" query:"frameworkType"`
	Framework     string               `protobuf:"bytes,10,opt,name=framework,proto3" form:"framework" json:"framework,omitempty" query:"framework"`
	ModelId       string               `protobuf:"bytes,11,opt,name=modelId,proto3" form:"modelId" json:"modelId,omitempty" query:"modelId"`
	Model         string               `protobuf:"bytes,12,opt,name=model,proto3" form:"model" json:"model,omitempty" query:"model"`
	Replicas      int32                `protobuf:"varint,13,opt,name=replicas,proto3" form:"replicas" json:"replicas,omitempty" query:"replicas"`
	Queue         string               `protobuf:"bytes,14,opt,name=queue,proto3" form:"queue" json:"queue,omitempty" query:"queue"`
	Priority      string               `protobuf:"bytes,15,opt,name=priority,proto3" form:"priority" json:"priority,omitempty" query:"priority"`
	Annotations   []*common.Annotation `protobuf:"bytes,16,rep,name=annotations,proto3" form:"annotations" json:"annotations,omitempty" query:"annotations"`
	Labels        []*common.Label      `protobuf:"bytes,17,rep,name=labels,proto3" form:"labels" json:"labels,omitempty" query:"labels"`
	Tolerances    []*common.Toleration `protobuf:"bytes,19,rep,name=tolerances,proto3" form:"tolerances" json:"tolerances,omitempty" query:"tolerances"`
	Metadata      []*common.Metadata   `protobuf:"bytes,20,rep,name=metadata,proto3" form:"metadata" json:"metadata,omitempty" query:"metadata"`
	ServiceConfig *ServiceConfig       `protobuf:"bytes,21,opt,name=serviceConfig,proto3" form:"serviceConfig" json:"serviceConfig,omitempty" query:"serviceConfig"`
	ServiceUrl    []*ServiceUrl        `protobuf:"bytes,22,rep,name=serviceUrl,proto3" form:"serviceUrl" json:"serviceUrl,omitempty" query:"serviceUrl"`
	Settings      *common.JobSettings  `protobuf:"bytes,23,opt,name=settings,proto3" form:"settings" json:"settings,omitempty" query:"settings"`
	Pods          []*common.JobPod     `protobuf:"bytes,24,rep,name=pods,proto3" form:"pods" json:"pods,omitempty" query:"pods"`
}

func (x *GetInferenceResponse) Reset() {
	*x = GetInferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceResponse) ProtoMessage() {}

func (x *GetInferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceResponse.ProtoReflect.Descriptor instead.
func (*GetInferenceResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{11}
}

func (x *GetInferenceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetInferenceResponse) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *GetInferenceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetInferenceResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetInferenceResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetInferenceResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetInferenceResponse) GetJobMode() string {
	if x != nil {
		return x.JobMode
	}
	return ""
}

func (x *GetInferenceResponse) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

func (x *GetInferenceResponse) GetFrameworkType() string {
	if x != nil {
		return x.FrameworkType
	}
	return ""
}

func (x *GetInferenceResponse) GetFramework() string {
	if x != nil {
		return x.Framework
	}
	return ""
}

func (x *GetInferenceResponse) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetInferenceResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GetInferenceResponse) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *GetInferenceResponse) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *GetInferenceResponse) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *GetInferenceResponse) GetAnnotations() []*common.Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *GetInferenceResponse) GetLabels() []*common.Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetInferenceResponse) GetTolerances() []*common.Toleration {
	if x != nil {
		return x.Tolerances
	}
	return nil
}

func (x *GetInferenceResponse) GetMetadata() []*common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetInferenceResponse) GetServiceConfig() *ServiceConfig {
	if x != nil {
		return x.ServiceConfig
	}
	return nil
}

func (x *GetInferenceResponse) GetServiceUrl() []*ServiceUrl {
	if x != nil {
		return x.ServiceUrl
	}
	return nil
}

func (x *GetInferenceResponse) GetSettings() *common.JobSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *GetInferenceResponse) GetPods() []*common.JobPod {
	if x != nil {
		return x.Pods
	}
	return nil
}

type ListInferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId      string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	ClusterId     string `protobuf:"bytes,4,opt,name=clusterId,proto3" json:"clusterId,omitempty" query:"clusterId"`
	PageNum       int32  `protobuf:"varint,5,opt,name=pageNum,proto3" json:"pageNum,omitempty" query:"pageNum"`
	PageSize      int32  `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty" query:"pageSize"`
	InferenceName string `protobuf:"bytes,7,opt,name=inferenceName,proto3" json:"inferenceName,omitempty" query:"inferenceName"`
	Namespace     string `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty" query:"namespace"`
	JobMode       string `protobuf:"bytes,9,opt,name=jobMode,proto3" json:"jobMode,omitempty" query:"jobMode"`
	Status        string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty" query:"status"`
	SortBy        string `protobuf:"bytes,11,opt,name=sortBy,proto3" json:"sortBy,omitempty" query:"sortBy"`
	Order         string `protobuf:"bytes,12,opt,name=order,proto3" json:"order,omitempty" query:"order"`
	Queue         string `protobuf:"bytes,13,opt,name=queue,proto3" json:"queue,omitempty" query:"queue"`
	Priority      string `protobuf:"bytes,14,opt,name=priority,proto3" json:"priority,omitempty" query:"priority"`
	Label         string `protobuf:"bytes,15,opt,name=label,proto3" json:"label,omitempty" query:"label"`
}

func (x *ListInferenceRequest) Reset() {
	*x = ListInferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInferenceRequest) ProtoMessage() {}

func (x *ListInferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInferenceRequest.ProtoReflect.Descriptor instead.
func (*ListInferenceRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{12}
}

func (x *ListInferenceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListInferenceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListInferenceRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListInferenceRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInferenceRequest) GetInferenceName() string {
	if x != nil {
		return x.InferenceName
	}
	return ""
}

func (x *ListInferenceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListInferenceRequest) GetJobMode() string {
	if x != nil {
		return x.JobMode
	}
	return ""
}

func (x *ListInferenceRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListInferenceRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListInferenceRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *ListInferenceRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *ListInferenceRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ListInferenceRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type ListInferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string       `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	TotalCount int32        `protobuf:"varint,2,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
	Inferences []*Inference `protobuf:"bytes,3,rep,name=inferences,proto3" form:"inferences" json:"inferences,omitempty" query:"inferences"`
}

func (x *ListInferenceResponse) Reset() {
	*x = ListInferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInferenceResponse) ProtoMessage() {}

func (x *ListInferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInferenceResponse.ProtoReflect.Descriptor instead.
func (*ListInferenceResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{13}
}

func (x *ListInferenceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListInferenceResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListInferenceResponse) GetInferences() []*Inference {
	if x != nil {
		return x.Inferences
	}
	return nil
}

type Inference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InferenceId string              `protobuf:"bytes,1,opt,name=inferenceId,proto3" form:"inferenceId" json:"inferenceId,omitempty" query:"inferenceId"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Namespace   string              `protobuf:"bytes,3,opt,name=namespace,proto3" form:"namespace" json:"namespace,omitempty" query:"namespace"`
	Status      string              `protobuf:"bytes,4,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`
	Queue       string              `protobuf:"bytes,5,opt,name=queue,proto3" form:"queue" json:"queue,omitempty" query:"queue"`
	Priority    string              `protobuf:"bytes,6,opt,name=priority,proto3" form:"priority" json:"priority,omitempty" query:"priority"`
	CreatedAt   string              `protobuf:"bytes,9,opt,name=createdAt,proto3" form:"createdAt" json:"createdAt,omitempty" query:"createdAt"`
	RunningAt   string              `protobuf:"bytes,10,opt,name=runningAt,proto3" form:"runningAt" json:"runningAt,omitempty" query:"runningAt"`
	StoppedAt   string              `protobuf:"bytes,11,opt,name=stoppedAt,proto3" form:"stoppedAt" json:"stoppedAt,omitempty" query:"stoppedAt"`
	Settings    *common.JobSettings `protobuf:"bytes,12,opt,name=settings,proto3" form:"settings" json:"settings,omitempty" query:"settings"`
}

func (x *Inference) Reset() {
	*x = Inference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inference) ProtoMessage() {}

func (x *Inference) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inference.ProtoReflect.Descriptor instead.
func (*Inference) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{14}
}

func (x *Inference) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *Inference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Inference) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Inference) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Inference) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *Inference) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *Inference) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Inference) GetRunningAt() string {
	if x != nil {
		return x.RunningAt
	}
	return ""
}

func (x *Inference) GetStoppedAt() string {
	if x != nil {
		return x.StoppedAt
	}
	return ""
}

func (x *Inference) GetSettings() *common.JobSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type StartInferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
}

func (x *StartInferenceRequest) Reset() {
	*x = StartInferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInferenceRequest) ProtoMessage() {}

func (x *StartInferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInferenceRequest.ProtoReflect.Descriptor instead.
func (*StartInferenceRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{15}
}

func (x *StartInferenceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *StartInferenceRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

type StartInferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string     `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	TotalCount int32      `protobuf:"varint,2,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
	Inferences *Inference `protobuf:"bytes,3,opt,name=inferences,proto3" form:"inferences" json:"inferences,omitempty" query:"inferences"`
}

func (x *StartInferenceResponse) Reset() {
	*x = StartInferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInferenceResponse) ProtoMessage() {}

func (x *StartInferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInferenceResponse.ProtoReflect.Descriptor instead.
func (*StartInferenceResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{16}
}

func (x *StartInferenceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StartInferenceResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *StartInferenceResponse) GetInferences() *Inference {
	if x != nil {
		return x.Inferences
	}
	return nil
}

type StopInferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
}

func (x *StopInferenceRequest) Reset() {
	*x = StopInferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInferenceRequest) ProtoMessage() {}

func (x *StopInferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInferenceRequest.ProtoReflect.Descriptor instead.
func (*StopInferenceRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{17}
}

func (x *StopInferenceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *StopInferenceRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

type StopInferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string     `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	TotalCount int32      `protobuf:"varint,2,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
	Inferences *Inference `protobuf:"bytes,3,opt,name=inferences,proto3" form:"inferences" json:"inferences,omitempty" query:"inferences"`
}

func (x *StopInferenceResponse) Reset() {
	*x = StopInferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInferenceResponse) ProtoMessage() {}

func (x *StopInferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInferenceResponse.ProtoReflect.Descriptor instead.
func (*StopInferenceResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{18}
}

func (x *StopInferenceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StopInferenceResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *StopInferenceResponse) GetInferences() *Inference {
	if x != nil {
		return x.Inferences
	}
	return nil
}

type UpdateInferenceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string           `protobuf:"bytes,1,opt,name=clusterId,proto3" header:"clusterId" json:"clusterId,omitempty"`
	InferenceId string           `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
	Pods        []*common.JobPod `protobuf:"bytes,3,rep,name=pods,proto3" form:"pods" json:"pods,omitempty"`
	Status      string           `protobuf:"bytes,4,opt,name=status,proto3" form:"status" json:"status,omitempty"`
	StartTime   string           `protobuf:"bytes,5,opt,name=startTime,proto3" form:"startTime" json:"startTime,omitempty"`
	ServiceUrl  []*ServiceUrl    `protobuf:"bytes,6,rep,name=serviceUrl,proto3" form:"serviceUrl" json:"serviceUrl,omitempty"`
}

func (x *UpdateInferenceStatusRequest) Reset() {
	*x = UpdateInferenceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInferenceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInferenceStatusRequest) ProtoMessage() {}

func (x *UpdateInferenceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInferenceStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateInferenceStatusRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateInferenceStatusRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateInferenceStatusRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *UpdateInferenceStatusRequest) GetPods() []*common.JobPod {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *UpdateInferenceStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateInferenceStatusRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateInferenceStatusRequest) GetServiceUrl() []*ServiceUrl {
	if x != nil {
		return x.ServiceUrl
	}
	return nil
}

type UpdateInferenceStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" form:"inferenceId" json:"inferenceId,omitempty" query:"inferenceId"`
}

func (x *UpdateInferenceStatusResponse) Reset() {
	*x = UpdateInferenceStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInferenceStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInferenceStatusResponse) ProtoMessage() {}

func (x *UpdateInferenceStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInferenceStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateInferenceStatusResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateInferenceStatusResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UpdateInferenceStatusResponse) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

type GetInferenceEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
}

func (x *GetInferenceEventRequest) Reset() {
	*x = GetInferenceEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceEventRequest) ProtoMessage() {}

func (x *GetInferenceEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceEventRequest.ProtoReflect.Descriptor instead.
func (*GetInferenceEventRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{21}
}

func (x *GetInferenceEventRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetInferenceEventRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

type GetInferenceEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string          `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Events    []*common.Event `protobuf:"bytes,2,rep,name=events,proto3" form:"events" json:"events,omitempty" query:"events"`
}

func (x *GetInferenceEventResponse) Reset() {
	*x = GetInferenceEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceEventResponse) ProtoMessage() {}

func (x *GetInferenceEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceEventResponse.ProtoReflect.Descriptor instead.
func (*GetInferenceEventResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{22}
}

func (x *GetInferenceEventResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetInferenceEventResponse) GetEvents() []*common.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type GetInferenceLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
	PodId       string `protobuf:"bytes,3,opt,name=podId,proto3" json:"podId,omitempty" path:"podId"`
	StartTime   int32  `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty" query:"startTime"`
	EndTime     int32  `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty" query:"endTime"`
	Limit       int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty" query:"limit"`
	Reverse     bool   `protobuf:"varint,7,opt,name=reverse,proto3" json:"reverse,omitempty" query:"reverse"`
}

func (x *GetInferenceLogsRequest) Reset() {
	*x = GetInferenceLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceLogsRequest) ProtoMessage() {}

func (x *GetInferenceLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceLogsRequest.ProtoReflect.Descriptor instead.
func (*GetInferenceLogsRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{23}
}

func (x *GetInferenceLogsRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetInferenceLogsRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *GetInferenceLogsRequest) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

func (x *GetInferenceLogsRequest) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetInferenceLogsRequest) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetInferenceLogsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetInferenceLogsRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type GetInferenceLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string   `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	InferenceId string   `protobuf:"bytes,2,opt,name=inferenceId,proto3" form:"inferenceId" json:"inferenceId,omitempty" query:"inferenceId"`
	Pod         string   `protobuf:"bytes,3,opt,name=pod,proto3" form:"pod" json:"pod,omitempty" query:"pod"`
	Logs        []string `protobuf:"bytes,4,rep,name=logs,proto3" form:"logs" json:"logs,omitempty" query:"logs"`
	Count       int32    `protobuf:"varint,5,opt,name=count,proto3" form:"count" json:"count,omitempty" query:"count"`
}

func (x *GetInferenceLogsResponse) Reset() {
	*x = GetInferenceLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceLogsResponse) ProtoMessage() {}

func (x *GetInferenceLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceLogsResponse.ProtoReflect.Descriptor instead.
func (*GetInferenceLogsResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{24}
}

func (x *GetInferenceLogsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetInferenceLogsResponse) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *GetInferenceLogsResponse) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

func (x *GetInferenceLogsResponse) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *GetInferenceLogsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetInferenceLogCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
	PodId       string `protobuf:"bytes,3,opt,name=podId,proto3" json:"podId,omitempty" path:"podId"`
}

func (x *GetInferenceLogCodeRequest) Reset() {
	*x = GetInferenceLogCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceLogCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceLogCodeRequest) ProtoMessage() {}

func (x *GetInferenceLogCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceLogCodeRequest.ProtoReflect.Descriptor instead.
func (*GetInferenceLogCodeRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{25}
}

func (x *GetInferenceLogCodeRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetInferenceLogCodeRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *GetInferenceLogCodeRequest) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

type GetInferenceLogCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" form:"inferenceId" json:"inferenceId,omitempty" query:"inferenceId"`
	Pod         string `protobuf:"bytes,3,opt,name=pod,proto3" form:"pod" json:"pod,omitempty" query:"pod"`
	ProjectCode string `protobuf:"bytes,4,opt,name=projectCode,proto3" form:"projectCode" json:"projectCode,omitempty" query:"projectCode"`
	UnitCode    string `protobuf:"bytes,5,opt,name=unitCode,proto3" form:"unitCode" json:"unitCode,omitempty" query:"unitCode"`
}

func (x *GetInferenceLogCodeResponse) Reset() {
	*x = GetInferenceLogCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceLogCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceLogCodeResponse) ProtoMessage() {}

func (x *GetInferenceLogCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceLogCodeResponse.ProtoReflect.Descriptor instead.
func (*GetInferenceLogCodeResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{26}
}

func (x *GetInferenceLogCodeResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetInferenceLogCodeResponse) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *GetInferenceLogCodeResponse) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

func (x *GetInferenceLogCodeResponse) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetInferenceLogCodeResponse) GetUnitCode() string {
	if x != nil {
		return x.UnitCode
	}
	return ""
}

type GetInferenceMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InferenceId string `protobuf:"bytes,1,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
	RegionId    string `protobuf:"bytes,2,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	TimeStep    int32  `protobuf:"varint,3,opt,name=timeStep,proto3" json:"timeStep,omitempty" query:"timeStep"`
	StartTime   int64  `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty" query:"startTime"`
	EndTime     int64  `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty" query:"endTime"`
	Type        string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty" query:"type"`
}

func (x *GetInferenceMetricsRequest) Reset() {
	*x = GetInferenceMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceMetricsRequest) ProtoMessage() {}

func (x *GetInferenceMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetInferenceMetricsRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{27}
}

func (x *GetInferenceMetricsRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *GetInferenceMetricsRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetInferenceMetricsRequest) GetTimeStep() int32 {
	if x != nil {
		return x.TimeStep
	}
	return 0
}

func (x *GetInferenceMetricsRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetInferenceMetricsRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetInferenceMetricsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetInferenceMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string        `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	InferenceId string        `protobuf:"bytes,2,opt,name=inferenceId,proto3" form:"inferenceId" json:"inferenceId,omitempty" query:"inferenceId"`
	Type        string        `protobuf:"bytes,3,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	Metrics     []*PodMetrics `protobuf:"bytes,4,rep,name=metrics,proto3" form:"metrics" json:"metrics,omitempty" query:"metrics"`
}

func (x *GetInferenceMetricsResponse) Reset() {
	*x = GetInferenceMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceMetricsResponse) ProtoMessage() {}

func (x *GetInferenceMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetInferenceMetricsResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{28}
}

func (x *GetInferenceMetricsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetInferenceMetricsResponse) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *GetInferenceMetricsResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetInferenceMetricsResponse) GetMetrics() []*PodMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type PodMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pod     string       `protobuf:"bytes,1,opt,name=pod,proto3" form:"pod" json:"pod,omitempty" query:"pod"`
	Metrics []*DataPoint `protobuf:"bytes,2,rep,name=metrics,proto3" form:"metrics" json:"metrics,omitempty" query:"metrics"`
}

func (x *PodMetrics) Reset() {
	*x = PodMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodMetrics) ProtoMessage() {}

func (x *PodMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodMetrics.ProtoReflect.Descriptor instead.
func (*PodMetrics) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{29}
}

func (x *PodMetrics) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

func (x *PodMetrics) GetMetrics() []*DataPoint {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int32 `protobuf:"varint,1,opt,name=time,proto3" form:"time" json:"time,omitempty" query:"time"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" form:"value" json:"value,omitempty" query:"value"`
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{30}
}

func (x *DataPoint) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DataPoint) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetInferenceDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InferenceId   string `protobuf:"bytes,1,opt,name=inferenceId,proto3" json:"inferenceId,omitempty" path:"inferenceId"`
	RegionId      string `protobuf:"bytes,2,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	InstanceId    string `protobuf:"bytes,3,opt,name=instanceId,proto3" json:"instanceId,omitempty" query:"instanceId"`
	InstanceName  string `protobuf:"bytes,4,opt,name=instanceName,proto3" json:"instanceName,omitempty" query:"instanceName"`
	Type          string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" query:"type"`
	Namespace     string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty" query:"namespace"`
	InferenceName string `protobuf:"bytes,7,opt,name=inferenceName,proto3" json:"inferenceName,omitempty" query:"inferenceName"`
}

func (x *GetInferenceDashboardRequest) Reset() {
	*x = GetInferenceDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceDashboardRequest) ProtoMessage() {}

func (x *GetInferenceDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceDashboardRequest.ProtoReflect.Descriptor instead.
func (*GetInferenceDashboardRequest) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{31}
}

func (x *GetInferenceDashboardRequest) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *GetInferenceDashboardRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetInferenceDashboardRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetInferenceDashboardRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *GetInferenceDashboardRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetInferenceDashboardRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetInferenceDashboardRequest) GetInferenceName() string {
	if x != nil {
		return x.InferenceName
	}
	return ""
}

type GetInferenceDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string              `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	InferenceId string              `protobuf:"bytes,2,opt,name=inferenceId,proto3" form:"inferenceId" json:"inferenceId,omitempty" query:"inferenceId"`
	Type        string              `protobuf:"bytes,3,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	Dashboards  []*common.Dashboard `protobuf:"bytes,4,rep,name=dashboards,proto3" form:"dashboards" json:"dashboards,omitempty" query:"dashboards"`
}

func (x *GetInferenceDashboardResponse) Reset() {
	*x = GetInferenceDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInferenceDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInferenceDashboardResponse) ProtoMessage() {}

func (x *GetInferenceDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inference_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInferenceDashboardResponse.ProtoReflect.Descriptor instead.
func (*GetInferenceDashboardResponse) Descriptor() ([]byte, []int) {
	return file_inference_proto_rawDescGZIP(), []int{32}
}

func (x *GetInferenceDashboardResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetInferenceDashboardResponse) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *GetInferenceDashboardResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetInferenceDashboardResponse) GetDashboards() []*common.Dashboard {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

var File_inference_proto protoreflect.FileDescriptor

var file_inference_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x07, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xca, 0xbb, 0x18, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xca, 0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x07,
	0x6a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0xbb, 0x18, 0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca,
	0xbb, 0x18, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x07,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0xbb, 0x18, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1f,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca,
	0xbb, 0x18, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x28, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0a, 0xca,
	0xbb, 0x18, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x0a, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x59, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6c, 0x62, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6c, 0x62, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x0a, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x5c, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x76, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x76, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x0b, 0x0a, 0x09, 0x48, 0x70, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x75, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2,
	0xbb, 0x18, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xca, 0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x0b, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xd2, 0xbb, 0x18, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x59,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xd2, 0xbb, 0x18, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xbd, 0x06,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x33, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x6f, 0x64, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x22, 0xa0, 0x04,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b,
	0xb2, 0xbb, 0x18, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37,
	0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xbb, 0x18, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xb2, 0xbb, 0x18, 0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xb2, 0xbb, 0x18,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xb2, 0xbb, 0x18, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xb2, 0xbb, 0x18, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xb2, 0xbb, 0x18, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x87, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x09, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x74, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2, 0xbb, 0x18, 0x0b, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x22, 0x73, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2, 0xbb, 0x18, 0x0b, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x22, 0xbf, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xbb, 0x18, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2, 0xbb, 0x18, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x6f, 0x64, 0x42, 0x08,
	0xca, 0xbb, 0x18, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x22,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x22, 0x5f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xd2, 0xbb, 0x18, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52,
	0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb3, 0x02,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2, 0xbb, 0x18, 0x0b, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xd2, 0xbb, 0x18, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64,
	0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xb2, 0xbb, 0x18, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xb2, 0xbb, 0x18, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0xb2,
	0xbb, 0x18, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2, 0xbb, 0x18, 0x0b,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xd2, 0xbb, 0x18, 0x05, 0x70, 0x6f, 0x64,
	0x49, 0x64, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2,
	0xbb, 0x18, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x2b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xb2,
	0xbb, 0x18, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xb2, 0xbb, 0x18, 0x04, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x9e, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x22, 0x4a, 0x0a, 0x0a, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x35,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2, 0xbb, 0x18,
	0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xbb, 0x18, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xb2, 0xbb, 0x18, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xbb, 0x18,
	0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x32, 0xf1, 0x0c, 0x0a, 0x10, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xd2, 0xc1,
	0x18, 0x19, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0xe2,
	0xc1, 0x18, 0x26, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x3a, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x7c, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0xda, 0xc1, 0x18,
	0x26, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x3a, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0xca, 0xc1, 0x18, 0x26, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x3a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xca, 0xc1, 0x18, 0x19, 0x2f, 0x69,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0xda, 0xc1, 0x18, 0x2c, 0x2f, 0x69, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x3a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x7b, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0xda, 0xc1, 0x18, 0x2b, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x3a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x2f, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0xda, 0xc1, 0x18, 0x32,
	0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x3a,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0xca, 0xc1, 0x18,
	0x2d, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x3a, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x90,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0xca, 0xc1, 0x18, 0x37, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x3a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x2f, 0x70, 0x6f, 0x64, 0x73, 0x2f, 0x3a, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x2f, 0x6c, 0x6f, 0x67,
	0x73, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0xca, 0xc1, 0x18, 0x2e, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x3a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0xca, 0xc1, 0x18, 0x30, 0x2f,
	0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x3a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a,
	0x28, 0x92, 0xce, 0x18, 0x24, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x69, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x74, 0x79, 0x75, 0x6e, 0x2e, 0x63, 0x6e, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_proto_rawDescOnce sync.Once
	file_inference_proto_rawDescData = file_inference_proto_rawDesc
)

func file_inference_proto_rawDescGZIP() []byte {
	file_inference_proto_rawDescOnce.Do(func() {
		file_inference_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_proto_rawDescData)
	})
	return file_inference_proto_rawDescData
}

var file_inference_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_inference_proto_goTypes = []interface{}{
	(*CreateInferenceRequest)(nil),        // 0: proto.CreateInferenceRequest
	(*CreateInferenceResponse)(nil),       // 1: proto.CreateInferenceResponse
	(*ServiceConfig)(nil),                 // 2: proto.ServiceConfig
	(*ServiceUrl)(nil),                    // 3: proto.ServiceUrl
	(*Port)(nil),                          // 4: proto.Port
	(*HpaConfig)(nil),                     // 5: proto.HpaConfig
	(*DeleteInferenceRequest)(nil),        // 6: proto.DeleteInferenceRequest
	(*DeleteInferenceResponse)(nil),       // 7: proto.DeleteInferenceResponse
	(*UpdateInferenceRequest)(nil),        // 8: proto.UpdateInferenceRequest
	(*UpdateInferenceResponse)(nil),       // 9: proto.UpdateInferenceResponse
	(*GetInferenceRequest)(nil),           // 10: proto.GetInferenceRequest
	(*GetInferenceResponse)(nil),          // 11: proto.GetInferenceResponse
	(*ListInferenceRequest)(nil),          // 12: proto.ListInferenceRequest
	(*ListInferenceResponse)(nil),         // 13: proto.ListInferenceResponse
	(*Inference)(nil),                     // 14: proto.Inference
	(*StartInferenceRequest)(nil),         // 15: proto.StartInferenceRequest
	(*StartInferenceResponse)(nil),        // 16: proto.StartInferenceResponse
	(*StopInferenceRequest)(nil),          // 17: proto.StopInferenceRequest
	(*StopInferenceResponse)(nil),         // 18: proto.StopInferenceResponse
	(*UpdateInferenceStatusRequest)(nil),  // 19: proto.UpdateInferenceStatusRequest
	(*UpdateInferenceStatusResponse)(nil), // 20: proto.UpdateInferenceStatusResponse
	(*GetInferenceEventRequest)(nil),      // 21: proto.GetInferenceEventRequest
	(*GetInferenceEventResponse)(nil),     // 22: proto.GetInferenceEventResponse
	(*GetInferenceLogsRequest)(nil),       // 23: proto.GetInferenceLogsRequest
	(*GetInferenceLogsResponse)(nil),      // 24: proto.GetInferenceLogsResponse
	(*GetInferenceLogCodeRequest)(nil),    // 25: proto.GetInferenceLogCodeRequest
	(*GetInferenceLogCodeResponse)(nil),   // 26: proto.GetInferenceLogCodeResponse
	(*GetInferenceMetricsRequest)(nil),    // 27: proto.GetInferenceMetricsRequest
	(*GetInferenceMetricsResponse)(nil),   // 28: proto.GetInferenceMetricsResponse
	(*PodMetrics)(nil),                    // 29: proto.PodMetrics
	(*DataPoint)(nil),                     // 30: proto.DataPoint
	(*GetInferenceDashboardRequest)(nil),  // 31: proto.GetInferenceDashboardRequest
	(*GetInferenceDashboardResponse)(nil), // 32: proto.GetInferenceDashboardResponse
	(*common.Annotation)(nil),             // 33: proto.Annotation
	(*common.Label)(nil),                  // 34: proto.Label
	(*common.Metadata)(nil),               // 35: proto.Metadata
	(*common.Toleration)(nil),             // 36: proto.Toleration
	(*common.JobSettings)(nil),            // 37: proto.JobSettings
	(*common.JobPod)(nil),                 // 38: proto.JobPod
	(*common.Event)(nil),                  // 39: proto.Event
	(*common.Dashboard)(nil),              // 40: proto.Dashboard
}
var file_inference_proto_depIdxs = []int32{
	33, // 0: proto.CreateInferenceRequest.annotations:type_name -> proto.Annotation
	34, // 1: proto.CreateInferenceRequest.labels:type_name -> proto.Label
	35, // 2: proto.CreateInferenceRequest.metadata:type_name -> proto.Metadata
	2,  // 3: proto.CreateInferenceRequest.serviceConfig:type_name -> proto.ServiceConfig
	36, // 4: proto.CreateInferenceRequest.tolerances:type_name -> proto.Toleration
	37, // 5: proto.CreateInferenceRequest.settings:type_name -> proto.JobSettings
	4,  // 6: proto.ServiceConfig.ports:type_name -> proto.Port
	2,  // 7: proto.UpdateInferenceRequest.serviceConfig:type_name -> proto.ServiceConfig
	33, // 8: proto.GetInferenceResponse.annotations:type_name -> proto.Annotation
	34, // 9: proto.GetInferenceResponse.labels:type_name -> proto.Label
	36, // 10: proto.GetInferenceResponse.tolerances:type_name -> proto.Toleration
	35, // 11: proto.GetInferenceResponse.metadata:type_name -> proto.Metadata
	2,  // 12: proto.GetInferenceResponse.serviceConfig:type_name -> proto.ServiceConfig
	3,  // 13: proto.GetInferenceResponse.serviceUrl:type_name -> proto.ServiceUrl
	37, // 14: proto.GetInferenceResponse.settings:type_name -> proto.JobSettings
	38, // 15: proto.GetInferenceResponse.pods:type_name -> proto.JobPod
	14, // 16: proto.ListInferenceResponse.inferences:type_name -> proto.Inference
	37, // 17: proto.Inference.settings:type_name -> proto.JobSettings
	14, // 18: proto.StartInferenceResponse.inferences:type_name -> proto.Inference
	14, // 19: proto.StopInferenceResponse.inferences:type_name -> proto.Inference
	38, // 20: proto.UpdateInferenceStatusRequest.pods:type_name -> proto.JobPod
	3,  // 21: proto.UpdateInferenceStatusRequest.serviceUrl:type_name -> proto.ServiceUrl
	39, // 22: proto.GetInferenceEventResponse.events:type_name -> proto.Event
	29, // 23: proto.GetInferenceMetricsResponse.metrics:type_name -> proto.PodMetrics
	30, // 24: proto.PodMetrics.metrics:type_name -> proto.DataPoint
	40, // 25: proto.GetInferenceDashboardResponse.dashboards:type_name -> proto.Dashboard
	0,  // 26: proto.InferenceService.CreateInference:input_type -> proto.CreateInferenceRequest
	6,  // 27: proto.InferenceService.DeleteInference:input_type -> proto.DeleteInferenceRequest
	8,  // 28: proto.InferenceService.UpdateInference:input_type -> proto.UpdateInferenceRequest
	10, // 29: proto.InferenceService.GetInference:input_type -> proto.GetInferenceRequest
	12, // 30: proto.InferenceService.ListInference:input_type -> proto.ListInferenceRequest
	15, // 31: proto.InferenceService.StartInference:input_type -> proto.StartInferenceRequest
	17, // 32: proto.InferenceService.StopInference:input_type -> proto.StopInferenceRequest
	19, // 33: proto.InferenceService.UpdateInferenceStatus:input_type -> proto.UpdateInferenceStatusRequest
	21, // 34: proto.InferenceService.GetInferenceEvent:input_type -> proto.GetInferenceEventRequest
	23, // 35: proto.InferenceService.GetInferenceLogs:input_type -> proto.GetInferenceLogsRequest
	27, // 36: proto.InferenceService.GetInferenceMetrics:input_type -> proto.GetInferenceMetricsRequest
	31, // 37: proto.InferenceService.GetInferenceDashboard:input_type -> proto.GetInferenceDashboardRequest
	1,  // 38: proto.InferenceService.CreateInference:output_type -> proto.CreateInferenceResponse
	7,  // 39: proto.InferenceService.DeleteInference:output_type -> proto.DeleteInferenceResponse
	9,  // 40: proto.InferenceService.UpdateInference:output_type -> proto.UpdateInferenceResponse
	11, // 41: proto.InferenceService.GetInference:output_type -> proto.GetInferenceResponse
	13, // 42: proto.InferenceService.ListInference:output_type -> proto.ListInferenceResponse
	16, // 43: proto.InferenceService.StartInference:output_type -> proto.StartInferenceResponse
	18, // 44: proto.InferenceService.StopInference:output_type -> proto.StopInferenceResponse
	20, // 45: proto.InferenceService.UpdateInferenceStatus:output_type -> proto.UpdateInferenceStatusResponse
	22, // 46: proto.InferenceService.GetInferenceEvent:output_type -> proto.GetInferenceEventResponse
	24, // 47: proto.InferenceService.GetInferenceLogs:output_type -> proto.GetInferenceLogsResponse
	28, // 48: proto.InferenceService.GetInferenceMetrics:output_type -> proto.GetInferenceMetricsResponse
	32, // 49: proto.InferenceService.GetInferenceDashboard:output_type -> proto.GetInferenceDashboardResponse
	38, // [38:50] is the sub-list for method output_type
	26, // [26:38] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_inference_proto_init() }
func file_inference_proto_init() {
	if File_inference_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inference_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HpaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInferenceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInferenceStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceLogCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceLogCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInferenceDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inference_proto_goTypes,
		DependencyIndexes: file_inference_proto_depIdxs,
		MessageInfos:      file_inference_proto_msgTypes,
	}.Build()
	File_inference_proto = out.File
	file_inference_proto_rawDesc = nil
	file_inference_proto_goTypes = nil
	file_inference_proto_depIdxs = nil
}
