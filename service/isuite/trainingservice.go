// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package isuite

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	training "github.com/telecom-cloud/telecomcloud-sdk-go/service/isuite/training"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type TrainingClient interface {
	CreateTraining(context context.Context, req *training.CreateTrainingRequest, reqOpt ...config.RequestOption) (resp *training.CreateTrainingResponse, rawResponse *protocol.Response, err error)

	DeleteTraining(context context.Context, req *training.DeleteTrainingRequest, reqOpt ...config.RequestOption) (resp *training.DeleteTrainingResponse, rawResponse *protocol.Response, err error)

	UpdateTraining(context context.Context, req *training.UpdateTrainingRequest, reqOpt ...config.RequestOption) (resp *training.UpdateTrainingResponse, rawResponse *protocol.Response, err error)

	UpdateTrainingStatus(context context.Context, req *training.UpdateTrainingStatusRequest, reqOpt ...config.RequestOption) (resp *training.UpdateTrainingStatusResponse, rawResponse *protocol.Response, err error)

	GetTraining(context context.Context, req *training.GetTrainingRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingResponse, rawResponse *protocol.Response, err error)

	ListTraining(context context.Context, req *training.ListTrainingRequest, reqOpt ...config.RequestOption) (resp *training.ListTrainingResponse, rawResponse *protocol.Response, err error)

	StartTraining(context context.Context, req *training.StartTrainingRequest, reqOpt ...config.RequestOption) (resp *training.StartTrainingResponse, rawResponse *protocol.Response, err error)

	StopTraining(context context.Context, req *training.StopTrainingRequest, reqOpt ...config.RequestOption) (resp *training.StopTrainingResponse, rawResponse *protocol.Response, err error)

	GetTrainingEvent(context context.Context, req *training.GetTrainingEventRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingEventResponse, rawResponse *protocol.Response, err error)

	GetTrainingLogs(context context.Context, req *training.GetTrainingLogsRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingLogsResponse, rawResponse *protocol.Response, err error)

	GetTrainingMetrics(context context.Context, req *training.GetTrainingMetricsRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingMetricsResponse, rawResponse *protocol.Response, err error)

	GetTrainingDashboard(context context.Context, req *training.GetTrainingDashboardRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingDashboardResponse, rawResponse *protocol.Response, err error)
}

type trainingClient struct {
	client *HttpClient
}

func NewTrainingClient(hostUrl string, ops ...Option) (TrainingClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &trainingClient{
		client: cli,
	}, nil
}

func (s *trainingClient) CreateTraining(ctx context.Context, req *training.CreateTrainingRequest, reqOpt ...config.RequestOption) (resp *training.CreateTrainingResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/trainings")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) DeleteTraining(ctx context.Context, req *training.DeleteTrainingRequest, reqOpt ...config.RequestOption) (resp *training.DeleteTrainingResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"trainingId": req.GetTrainingId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/trainings/:trainingId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) UpdateTraining(ctx context.Context, req *training.UpdateTrainingRequest, reqOpt ...config.RequestOption) (resp *training.UpdateTrainingResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"trainingId": req.GetTrainingId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/api/v1/trainings/:trainingId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) UpdateTrainingStatus(ctx context.Context, req *training.UpdateTrainingStatusRequest, reqOpt ...config.RequestOption) (resp *training.UpdateTrainingStatusResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"trainingId": req.GetTrainingId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/internal/v1/trainings/:trainingId/status")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) GetTraining(ctx context.Context, req *training.GetTrainingRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"trainingId": req.GetTrainingId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/trainings/:trainingId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) ListTraining(ctx context.Context, req *training.ListTrainingRequest, reqOpt ...config.RequestOption) (resp *training.ListTrainingResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"clusterId": req.GetClusterId(),
		"pageNum":   req.GetPageNum(),
		"pageSize":  req.GetPageSize(),
		"name":      req.GetName(),
		"namespace": req.GetNamespace(),
		"jobMode":   req.GetJobMode(),
		"status":    req.GetStatus(),
		"sortBy":    req.GetSortBy(),
		"order":     req.GetOrder(),
		"queue":     req.GetQueue(),
		"priority":  req.GetPriority(),
		"labels":    req.GetLabels(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/trainings")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) StartTraining(ctx context.Context, req *training.StartTrainingRequest, reqOpt ...config.RequestOption) (resp *training.StartTrainingResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"trainingId": req.GetTrainingId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/trainings/:trainingId/start")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) StopTraining(ctx context.Context, req *training.StopTrainingRequest, reqOpt ...config.RequestOption) (resp *training.StopTrainingResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"trainingId": req.GetTrainingId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/trainings/:trainingId/stop")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) GetTrainingEvent(ctx context.Context, req *training.GetTrainingEventRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingEventResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"trainingId": req.GetTrainingId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/trainings/:trainingId/events")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) GetTrainingLogs(ctx context.Context, req *training.GetTrainingLogsRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingLogsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"startTime": req.GetStartTime(),
		"endTime":   req.GetEndTime(),
		"limit":     req.GetLimit(),
		"reverse":   req.GetReverse(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"trainingId": req.GetTrainingId(),
			"podId":      req.GetPodId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/trainings/:trainingId/pods/:podId/logs")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) GetTrainingMetrics(ctx context.Context, req *training.GetTrainingMetricsRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingMetricsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"timeStep":  req.GetTimeStep(),
		"startTime": req.GetStartTime(),
		"endTime":   req.GetEndTime(),
		"type":      req.GetType(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"trainingId": req.GetTrainingId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/trainings/:trainingId/metrics")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *trainingClient) GetTrainingDashboard(ctx context.Context, req *training.GetTrainingDashboardRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingDashboardResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"instanceId":   req.GetInstanceId(),
		"instanceName": req.GetInstanceName(),
		"type":         req.GetType(),
		"namespace":    req.GetNamespace(),
		"trainingName": req.GetTrainingName(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"trainingId": req.GetTrainingId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/trainings/:trainingId/dashboard")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultTrainingClient, _ = NewTrainingClient(baseDomain)

func ConfigDefaultTrainingClient(ops ...Option) (err error) {
	defaultTrainingClient, err = NewTrainingClient(baseDomain, ops...)
	return
}

func CreateTraining(context context.Context, req *training.CreateTrainingRequest, reqOpt ...config.RequestOption) (resp *training.CreateTrainingResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.CreateTraining(context, req, reqOpt...)
}

func DeleteTraining(context context.Context, req *training.DeleteTrainingRequest, reqOpt ...config.RequestOption) (resp *training.DeleteTrainingResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.DeleteTraining(context, req, reqOpt...)
}

func UpdateTraining(context context.Context, req *training.UpdateTrainingRequest, reqOpt ...config.RequestOption) (resp *training.UpdateTrainingResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.UpdateTraining(context, req, reqOpt...)
}

func UpdateTrainingStatus(context context.Context, req *training.UpdateTrainingStatusRequest, reqOpt ...config.RequestOption) (resp *training.UpdateTrainingStatusResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.UpdateTrainingStatus(context, req, reqOpt...)
}

func GetTraining(context context.Context, req *training.GetTrainingRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.GetTraining(context, req, reqOpt...)
}

func ListTraining(context context.Context, req *training.ListTrainingRequest, reqOpt ...config.RequestOption) (resp *training.ListTrainingResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.ListTraining(context, req, reqOpt...)
}

func StartTraining(context context.Context, req *training.StartTrainingRequest, reqOpt ...config.RequestOption) (resp *training.StartTrainingResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.StartTraining(context, req, reqOpt...)
}

func StopTraining(context context.Context, req *training.StopTrainingRequest, reqOpt ...config.RequestOption) (resp *training.StopTrainingResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.StopTraining(context, req, reqOpt...)
}

func GetTrainingEvent(context context.Context, req *training.GetTrainingEventRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingEventResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.GetTrainingEvent(context, req, reqOpt...)
}

func GetTrainingLogs(context context.Context, req *training.GetTrainingLogsRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingLogsResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.GetTrainingLogs(context, req, reqOpt...)
}

func GetTrainingMetrics(context context.Context, req *training.GetTrainingMetricsRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingMetricsResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.GetTrainingMetrics(context, req, reqOpt...)
}

func GetTrainingDashboard(context context.Context, req *training.GetTrainingDashboardRequest, reqOpt ...config.RequestOption) (resp *training.GetTrainingDashboardResponse, rawResponse *protocol.Response, err error) {
	return defaultTrainingClient.GetTrainingDashboard(context, req, reqOpt...)
}
