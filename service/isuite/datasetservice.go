// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package isuite

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	dataset "github.com/telecom-cloud/telecomcloud-sdk-go/service/isuite/dataset"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type DatasetClient interface {
	CreateDataset(context context.Context, req *dataset.CreateDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.CreateDatasetResponse, rawResponse *protocol.Response, err error)

	DeleteDataset(context context.Context, req *dataset.DeleteDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.DeleteDatasetResponse, rawResponse *protocol.Response, err error)

	UpdateDataset(context context.Context, req *dataset.UpdateDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.UpdateDatasetResponse, rawResponse *protocol.Response, err error)

	GetDataset(context context.Context, req *dataset.GetDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.GetDatasetResponse, rawResponse *protocol.Response, err error)

	ListDataset(context context.Context, req *dataset.ListDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.ListDatasetResponse, rawResponse *protocol.Response, err error)

	UpdateDatasetStatus(context context.Context, req *dataset.UpdateDatasetStatusRequest, reqOpt ...config.RequestOption) (resp *dataset.UpdateDatasetStatusResponse, rawResponse *protocol.Response, err error)

	CreateDatasetVersionLabels(context context.Context, req *dataset.CreateDatasetVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *dataset.DeleteDatasetVersionLabelsResponse, rawResponse *protocol.Response, err error)

	DeleteDatasetVersionLabels(context context.Context, req *dataset.DeleteDatasetVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *dataset.DeleteDatasetVersionLabelsResponse, rawResponse *protocol.Response, err error)
}

type datasetClient struct {
	client *HttpClient
}

func NewDatasetClient(hostUrl string, ops ...Option) (DatasetClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &datasetClient{
		client: cli,
	}, nil
}

func (s *datasetClient) CreateDataset(ctx context.Context, req *dataset.CreateDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.CreateDatasetResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/datasets")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *datasetClient) DeleteDataset(ctx context.Context, req *dataset.DeleteDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.DeleteDatasetResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"datasetId": req.GetDatasetId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/datasets/:datasetId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *datasetClient) UpdateDataset(ctx context.Context, req *dataset.UpdateDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.UpdateDatasetResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"datasetId": req.GetDatasetId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/api/v1/datasets/:datasetId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *datasetClient) GetDataset(ctx context.Context, req *dataset.GetDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.GetDatasetResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"datasetId": req.GetDatasetId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/datasets/:datasetId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *datasetClient) ListDataset(ctx context.Context, req *dataset.ListDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.ListDatasetResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"name":       req.GetName(),
		"visibility": req.GetVisibility(),
		"pageSize":   req.GetPageSize(),
		"pageNum":    req.GetPageNum(),
		"azName":     req.GetAzName(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/datasets")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *datasetClient) UpdateDatasetStatus(ctx context.Context, req *dataset.UpdateDatasetStatusRequest, reqOpt ...config.RequestOption) (resp *dataset.UpdateDatasetStatusResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"datasetId": req.GetDatasetId(),
			"version":   req.GetVersion(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/internal/v1/datasets/:datasetId/status")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *datasetClient) CreateDatasetVersionLabels(ctx context.Context, req *dataset.CreateDatasetVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *dataset.DeleteDatasetVersionLabelsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"datasetId": req.GetDatasetId(),
			"version":   req.GetVersion(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/datasets/:datasetId/versions/:version/labels")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *datasetClient) DeleteDatasetVersionLabels(ctx context.Context, req *dataset.DeleteDatasetVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *dataset.DeleteDatasetVersionLabelsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"datasetId": req.GetDatasetId(),
			"version":   req.GetVersion(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/datasets/:datasetId/versions/:version/labels")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultDatasetClient, _ = NewDatasetClient(baseDomain)

func ConfigDefaultDatasetClient(ops ...Option) (err error) {
	defaultDatasetClient, err = NewDatasetClient(baseDomain, ops...)
	return
}

func CreateDataset(context context.Context, req *dataset.CreateDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.CreateDatasetResponse, rawResponse *protocol.Response, err error) {
	return defaultDatasetClient.CreateDataset(context, req, reqOpt...)
}

func DeleteDataset(context context.Context, req *dataset.DeleteDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.DeleteDatasetResponse, rawResponse *protocol.Response, err error) {
	return defaultDatasetClient.DeleteDataset(context, req, reqOpt...)
}

func UpdateDataset(context context.Context, req *dataset.UpdateDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.UpdateDatasetResponse, rawResponse *protocol.Response, err error) {
	return defaultDatasetClient.UpdateDataset(context, req, reqOpt...)
}

func GetDataset(context context.Context, req *dataset.GetDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.GetDatasetResponse, rawResponse *protocol.Response, err error) {
	return defaultDatasetClient.GetDataset(context, req, reqOpt...)
}

func ListDataset(context context.Context, req *dataset.ListDatasetRequest, reqOpt ...config.RequestOption) (resp *dataset.ListDatasetResponse, rawResponse *protocol.Response, err error) {
	return defaultDatasetClient.ListDataset(context, req, reqOpt...)
}

func UpdateDatasetStatus(context context.Context, req *dataset.UpdateDatasetStatusRequest, reqOpt ...config.RequestOption) (resp *dataset.UpdateDatasetStatusResponse, rawResponse *protocol.Response, err error) {
	return defaultDatasetClient.UpdateDatasetStatus(context, req, reqOpt...)
}

func CreateDatasetVersionLabels(context context.Context, req *dataset.CreateDatasetVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *dataset.DeleteDatasetVersionLabelsResponse, rawResponse *protocol.Response, err error) {
	return defaultDatasetClient.CreateDatasetVersionLabels(context, req, reqOpt...)
}

func DeleteDatasetVersionLabels(context context.Context, req *dataset.DeleteDatasetVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *dataset.DeleteDatasetVersionLabelsResponse, rawResponse *protocol.Response, err error) {
	return defaultDatasetClient.DeleteDatasetVersionLabels(context, req, reqOpt...)
}
