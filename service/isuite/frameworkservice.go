// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package isuite

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	framework "github.com/telecom-cloud/telecomcloud-sdk-go/service/isuite/framework"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type FrameworkClient interface {
	CreateFramework(context context.Context, req *framework.CreateFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.CreateFrameworkResponse, rawResponse *protocol.Response, err error)

	DeleteFramework(context context.Context, req *framework.DeleteFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.DeleteFrameworkResponse, rawResponse *protocol.Response, err error)

	UpdateFramework(context context.Context, req *framework.UpdateFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.UpdateFrameworkResponse, rawResponse *protocol.Response, err error)

	GetFramework(context context.Context, req *framework.GetFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkResponse, rawResponse *protocol.Response, err error)

	ListFramework(context context.Context, req *framework.ListFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.ListFrameworkResponse, rawResponse *protocol.Response, err error)

	GetFrameworkUserGuide(context context.Context, req *framework.GetFrameworkUserGuideRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkUserGuideResponse, rawResponse *protocol.Response, err error)

	ListFrameworkRepos(context context.Context, req *framework.ListFrameworkReposRequest, reqOpt ...config.RequestOption) (resp *framework.ListFrameworkReposResponse, rawResponse *protocol.Response, err error)

	ListFrameworkTags(context context.Context, req *framework.ListFrameworkTagsRequest, reqOpt ...config.RequestOption) (resp *framework.ListFrameworkTagsResponse, rawResponse *protocol.Response, err error)

	GetFrameworkCommand(context context.Context, req *framework.GetFrameworkCommandRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkCommandResponse, rawResponse *protocol.Response, err error)

	GetFrameworkSupports(context context.Context, req *framework.GetFrameworkSupportsRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkSupportsResponse, rawResponse *protocol.Response, err error)

	CreateManagementFramework(context context.Context, req *framework.CreateManagementFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.CreateManagementFrameworkResponse, rawResponse *protocol.Response, err error)

	ListCRSInstance(context context.Context, req *framework.ListCRSInstanceRequest, reqOpt ...config.RequestOption) (resp *framework.ListCRSInstanceResponse, rawResponse *protocol.Response, err error)

	ListCRSNamespace(context context.Context, req *framework.ListCRSNamespaceRequest, reqOpt ...config.RequestOption) (resp *framework.ListCRSNamespaceResponse, rawResponse *protocol.Response, err error)

	ListCRSRepository(context context.Context, req *framework.ListCRSRepositoryRequest, reqOpt ...config.RequestOption) (resp *framework.ListCRSRepositoryResponse, rawResponse *protocol.Response, err error)

	ResyncManagementFramework(context context.Context, req *framework.ResyncManagementFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.ResyncManagementFrameworkResponse, rawResponse *protocol.Response, err error)
}

type frameworkClient struct {
	client *HttpClient
}

func NewFrameworkClient(hostUrl string, ops ...Option) (FrameworkClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &frameworkClient{
		client: cli,
	}, nil
}

func (s *frameworkClient) CreateFramework(ctx context.Context, req *framework.CreateFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.CreateFrameworkResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/framework")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) DeleteFramework(ctx context.Context, req *framework.DeleteFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.DeleteFrameworkResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"frameworkId": req.GetFrameworkId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/frameworks")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) UpdateFramework(ctx context.Context, req *framework.UpdateFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.UpdateFrameworkResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"frameworkId": req.GetFrameworkId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/api/v1/frameworks")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) GetFramework(ctx context.Context, req *framework.GetFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"frameworkId": req.GetFrameworkId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/frameworks")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) ListFramework(ctx context.Context, req *framework.ListFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.ListFrameworkResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"tenantId":  req.GetTenantId(),
		"name":      req.GetName(),
		"type":      req.GetType(),
		"scenarios": req.GetScenarios(),
		"devices":   req.GetDevices(),
		"pageNum":   req.GetPageNum(),
		"pageSize":  req.GetPageSize(),
		"sortBy":    req.GetSortBy(),
		"order":     req.GetOrder(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/frameworks")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) GetFrameworkUserGuide(ctx context.Context, req *framework.GetFrameworkUserGuideRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkUserGuideResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"clusterId": req.GetClusterId(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/frameworks/userGuide")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) ListFrameworkRepos(ctx context.Context, req *framework.ListFrameworkReposRequest, reqOpt ...config.RequestOption) (resp *framework.ListFrameworkReposResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"clusterId": req.GetClusterId(),
		"pageNum":   req.GetPageNum(),
		"pageSize":  req.GetPageSize(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/frameworks/repos")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) ListFrameworkTags(ctx context.Context, req *framework.ListFrameworkTagsRequest, reqOpt ...config.RequestOption) (resp *framework.ListFrameworkTagsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"clusterId": req.GetClusterId(),
		"pageNum":   req.GetPageNum(),
		"pageSize":  req.GetPageSize(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"frameworkId": req.GetFrameworkId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/frameworks/tags")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) GetFrameworkCommand(ctx context.Context, req *framework.GetFrameworkCommandRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkCommandResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"frameworkType": req.GetFrameworkType(),
		"jobMode":       req.GetJobMode(),
		"device":        req.GetDevice(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/frameworks/command")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) GetFrameworkSupports(ctx context.Context, req *framework.GetFrameworkSupportsRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkSupportsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/frameworks/supports")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) CreateManagementFramework(ctx context.Context, req *framework.CreateManagementFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.CreateManagementFrameworkResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId":  req.GetRegionId(),
			"clusterId": req.GetClusterId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/frameworks/management")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) ListCRSInstance(ctx context.Context, req *framework.ListCRSInstanceRequest, reqOpt ...config.RequestOption) (resp *framework.ListCRSInstanceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"clusterId":    req.GetClusterId(),
		"pageNum":      req.GetPageNum(),
		"pageSize":     req.GetPageSize(),
		"instanceName": req.GetInstanceName(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/frameworks/instances")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) ListCRSNamespace(ctx context.Context, req *framework.ListCRSNamespaceRequest, reqOpt ...config.RequestOption) (resp *framework.ListCRSNamespaceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"clusterId":     req.GetClusterId(),
		"instanceId":    req.GetInstanceId(),
		"namespaceName": req.GetNamespaceName(),
		"pageNum":       req.GetPageNum(),
		"pageSize":      req.GetPageSize(),
		"sortBy":        req.GetSortBy(),
		"order":         req.GetOrder(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/frameworks/namespaces")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) ListCRSRepository(ctx context.Context, req *framework.ListCRSRepositoryRequest, reqOpt ...config.RequestOption) (resp *framework.ListCRSRepositoryResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"clusterId":      req.GetClusterId(),
		"instanceId":     req.GetInstanceId(),
		"namespaceName":  req.GetNamespaceName(),
		"repositoryName": req.GetRepositoryName(),
		"pageNum":        req.GetPageNum(),
		"pageSize":       req.GetPageSize(),
		"sortBy":         req.GetSortBy(),
		"order":          req.GetOrder(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/frameworks/repositories")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *frameworkClient) ResyncManagementFramework(ctx context.Context, req *framework.ResyncManagementFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.ResyncManagementFrameworkResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/frameworks/management/resync")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultFrameworkClient, _ = NewFrameworkClient(baseDomain)

func ConfigDefaultFrameworkClient(ops ...Option) (err error) {
	defaultFrameworkClient, err = NewFrameworkClient(baseDomain, ops...)
	return
}

func CreateFramework(context context.Context, req *framework.CreateFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.CreateFrameworkResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.CreateFramework(context, req, reqOpt...)
}

func DeleteFramework(context context.Context, req *framework.DeleteFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.DeleteFrameworkResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.DeleteFramework(context, req, reqOpt...)
}

func UpdateFramework(context context.Context, req *framework.UpdateFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.UpdateFrameworkResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.UpdateFramework(context, req, reqOpt...)
}

func GetFramework(context context.Context, req *framework.GetFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.GetFramework(context, req, reqOpt...)
}

func ListFramework(context context.Context, req *framework.ListFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.ListFrameworkResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.ListFramework(context, req, reqOpt...)
}

func GetFrameworkUserGuide(context context.Context, req *framework.GetFrameworkUserGuideRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkUserGuideResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.GetFrameworkUserGuide(context, req, reqOpt...)
}

func ListFrameworkRepos(context context.Context, req *framework.ListFrameworkReposRequest, reqOpt ...config.RequestOption) (resp *framework.ListFrameworkReposResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.ListFrameworkRepos(context, req, reqOpt...)
}

func ListFrameworkTags(context context.Context, req *framework.ListFrameworkTagsRequest, reqOpt ...config.RequestOption) (resp *framework.ListFrameworkTagsResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.ListFrameworkTags(context, req, reqOpt...)
}

func GetFrameworkCommand(context context.Context, req *framework.GetFrameworkCommandRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkCommandResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.GetFrameworkCommand(context, req, reqOpt...)
}

func GetFrameworkSupports(context context.Context, req *framework.GetFrameworkSupportsRequest, reqOpt ...config.RequestOption) (resp *framework.GetFrameworkSupportsResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.GetFrameworkSupports(context, req, reqOpt...)
}

func CreateManagementFramework(context context.Context, req *framework.CreateManagementFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.CreateManagementFrameworkResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.CreateManagementFramework(context, req, reqOpt...)
}

func ListCRSInstance(context context.Context, req *framework.ListCRSInstanceRequest, reqOpt ...config.RequestOption) (resp *framework.ListCRSInstanceResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.ListCRSInstance(context, req, reqOpt...)
}

func ListCRSNamespace(context context.Context, req *framework.ListCRSNamespaceRequest, reqOpt ...config.RequestOption) (resp *framework.ListCRSNamespaceResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.ListCRSNamespace(context, req, reqOpt...)
}

func ListCRSRepository(context context.Context, req *framework.ListCRSRepositoryRequest, reqOpt ...config.RequestOption) (resp *framework.ListCRSRepositoryResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.ListCRSRepository(context, req, reqOpt...)
}

func ResyncManagementFramework(context context.Context, req *framework.ResyncManagementFrameworkRequest, reqOpt ...config.RequestOption) (resp *framework.ResyncManagementFrameworkResponse, rawResponse *protocol.Response, err error) {
	return defaultFrameworkClient.ResyncManagementFramework(context, req, reqOpt...)
}
