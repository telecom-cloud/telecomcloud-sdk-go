// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package isuite

import (
	"crypto/tls"

	cli "github.com/telecom-cloud/client-go/pkg/client"
)

var baseDomain = "https://isuite-global.ctapi.ctyun.cn"

type ClientSet interface {
	Model() ModelClient
	Dataset() DatasetClient
	Framework() FrameworkClient
	Training() TrainingClient
	Inference() InferenceClient
	Queue() QueueClient
}

type clientSet struct {
	modelCli     ModelClient
	datasetCli   DatasetClient
	frameworkCli FrameworkClient
	trainingCli  TrainingClient
	inferenceCli InferenceClient
	queueCli     QueueClient
}

func NewClientSet(baseDomain string, options ...Option) (ClientSet, error) {
	defaultOpt := []Option{
		WithClientOption(cli.WithTLSConfig(&tls.Config{
			InsecureSkipVerify: true,
		})),
	}
	options = append(defaultOpt, options...)
	modelCli, err := NewModelClient(baseDomain, options...)
	if err != nil {
		return nil, err
	}
	datasetCli, err := NewDatasetClient(baseDomain, options...)
	if err != nil {
		return nil, err
	}
	frameworkCli, err := NewFrameworkClient(baseDomain, options...)
	if err != nil {
		return nil, err
	}
	trainingCli, err := NewTrainingClient(baseDomain, options...)
	if err != nil {
		return nil, err
	}
	inferenceCli, err := NewInferenceClient(baseDomain, options...)
	if err != nil {
		return nil, err
	}
	queueCli, err := NewQueueClient(baseDomain, options...)
	if err != nil {
		return nil, err
	}

	return &clientSet{
		modelCli:     modelCli,
		datasetCli:   datasetCli,
		frameworkCli: frameworkCli,
		trainingCli:  trainingCli,
		inferenceCli: inferenceCli,
		queueCli:     queueCli,
	}, nil
}

func (cs *clientSet) Model() ModelClient {
	return cs.modelCli
}

func (cs *clientSet) Dataset() DatasetClient {
	return cs.datasetCli
}

func (cs *clientSet) Framework() FrameworkClient {
	return cs.frameworkCli
}

func (cs *clientSet) Training() TrainingClient {
	return cs.trainingCli
}

func (cs *clientSet) Inference() InferenceClient {
	return cs.inferenceCli
}

func (cs *clientSet) Queue() QueueClient {
	return cs.queueCli
}
