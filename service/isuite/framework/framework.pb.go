// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: framework.proto

package framework

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FrameworkCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Master *FrameworkCommandItem `protobuf:"bytes,1,opt,name=master,proto3" form:"master" json:"master,omitempty" query:"master"`
	Worker *FrameworkCommandItem `protobuf:"bytes,2,opt,name=worker,proto3" form:"worker" json:"worker,omitempty" query:"worker"`
}

func (x *FrameworkCommand) Reset() {
	*x = FrameworkCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkCommand) ProtoMessage() {}

func (x *FrameworkCommand) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkCommand.ProtoReflect.Descriptor instead.
func (*FrameworkCommand) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{0}
}

func (x *FrameworkCommand) GetMaster() *FrameworkCommandItem {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *FrameworkCommand) GetWorker() *FrameworkCommandItem {
	if x != nil {
		return x.Worker
	}
	return nil
}

type RoleStartCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Single      *FrameworkCommand `protobuf:"bytes,1,opt,name=single,proto3" form:"single" json:"single,omitempty" query:"single"`
	Distributed *FrameworkCommand `protobuf:"bytes,2,opt,name=distributed,proto3" form:"distributed" json:"distributed,omitempty" query:"distributed"`
}

func (x *RoleStartCommand) Reset() {
	*x = RoleStartCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleStartCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleStartCommand) ProtoMessage() {}

func (x *RoleStartCommand) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleStartCommand.ProtoReflect.Descriptor instead.
func (*RoleStartCommand) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{1}
}

func (x *RoleStartCommand) GetSingle() *FrameworkCommand {
	if x != nil {
		return x.Single
	}
	return nil
}

func (x *RoleStartCommand) GetDistributed() *FrameworkCommand {
	if x != nil {
		return x.Distributed
	}
	return nil
}

type CreateFrameworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId         string            `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	InstanceId       string            `protobuf:"bytes,2,opt,name=instanceId,proto3" form:"instanceId" json:"instanceId,omitempty" vd:"len($) > 0"`
	RepositoryId     string            `protobuf:"bytes,3,opt,name=repositoryId,proto3" form:"repositoryId" json:"repositoryId,omitempty" vd:"len($) > 0"`
	Name             string            `protobuf:"bytes,4,opt,name=name,proto3" form:"name" json:"name,omitempty" vd:"len($) > 0"`
	Description      string            `protobuf:"bytes,5,opt,name=description,proto3" form:"description" json:"description,omitempty"`
	Type             string            `protobuf:"bytes,6,opt,name=type,proto3" form:"type" json:"type,omitempty" vd:"len($) > 0"`
	Labels           []string          `protobuf:"bytes,7,rep,name=labels,proto3" form:"labels" json:"labels,omitempty"`
	Devices          []string          `protobuf:"bytes,8,rep,name=devices,proto3" form:"devices" json:"devices,omitempty" vd:"len($) > 0"`
	Scenarios        []string          `protobuf:"bytes,9,rep,name=scenarios,proto3" form:"scenarios" json:"scenarios,omitempty"`
	ImageUrl         string            `protobuf:"bytes,10,opt,name=imageUrl,proto3" form:"imageUrl" json:"imageUrl,omitempty" vd:"len($) > 0"`
	ImageUrlInternal string            `protobuf:"bytes,11,opt,name=imageUrlInternal,proto3" form:"imageUrlInternal" json:"imageUrlInternal,omitempty" vd:"len($) > 0"`
	Namespace        string            `protobuf:"bytes,12,opt,name=namespace,proto3" form:"namespace" json:"namespace,omitempty" vd:"len($) > 0"`
	RepositoryName   string            `protobuf:"bytes,13,opt,name=repositoryName,proto3" form:"repositoryName" json:"repositoryName,omitempty" vd:"len($) > 0"`
	Detail           string            `protobuf:"bytes,14,opt,name=detail,proto3" form:"detail" json:"detail,omitempty"`
	Creator          string            `protobuf:"bytes,15,opt,name=creator,proto3" form:"creator" json:"creator,omitempty"`
	StartCommand     *RoleStartCommand `protobuf:"bytes,16,opt,name=startCommand,proto3" form:"startCommand" json:"startCommand,omitempty"`
}

func (x *CreateFrameworkRequest) Reset() {
	*x = CreateFrameworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFrameworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFrameworkRequest) ProtoMessage() {}

func (x *CreateFrameworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFrameworkRequest.ProtoReflect.Descriptor instead.
func (*CreateFrameworkRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{2}
}

func (x *CreateFrameworkRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CreateFrameworkRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateFrameworkRequest) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *CreateFrameworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFrameworkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateFrameworkRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateFrameworkRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateFrameworkRequest) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CreateFrameworkRequest) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *CreateFrameworkRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *CreateFrameworkRequest) GetImageUrlInternal() string {
	if x != nil {
		return x.ImageUrlInternal
	}
	return ""
}

func (x *CreateFrameworkRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateFrameworkRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *CreateFrameworkRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *CreateFrameworkRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateFrameworkRequest) GetStartCommand() *RoleStartCommand {
	if x != nil {
		return x.StartCommand
	}
	return nil
}

type CreateFrameworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	FrameworkId string `protobuf:"bytes,2,opt,name=frameworkId,proto3" form:"frameworkId" json:"frameworkId,omitempty" query:"frameworkId"`
}

func (x *CreateFrameworkResponse) Reset() {
	*x = CreateFrameworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFrameworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFrameworkResponse) ProtoMessage() {}

func (x *CreateFrameworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFrameworkResponse.ProtoReflect.Descriptor instead.
func (*CreateFrameworkResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFrameworkResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateFrameworkResponse) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

type CreateManagementFrameworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId          string            `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	ClusterId         string            `protobuf:"bytes,2,opt,name=clusterId,proto3" header:"clusterId" json:"clusterId,omitempty"`
	SrcInstanceId     string            `protobuf:"bytes,3,opt,name=srcInstanceId,proto3" form:"srcInstanceId" json:"srcInstanceId,omitempty" vd:"len($) > 0"`
	SrcInstanceName   string            `protobuf:"bytes,4,opt,name=srcInstanceName,proto3" form:"srcInstanceName" json:"srcInstanceName,omitempty" vd:"len($) > 0"`
	SrcNamespaceId    string            `protobuf:"bytes,5,opt,name=srcNamespaceId,proto3" form:"srcNamespaceId" json:"srcNamespaceId,omitempty" vd:"len($) > 0"`
	SrcNamespaceName  string            `protobuf:"bytes,6,opt,name=srcNamespaceName,proto3" form:"srcNamespaceName" json:"srcNamespaceName,omitempty" vd:"len($) > 0"`
	SrcRepositoryId   string            `protobuf:"bytes,7,opt,name=srcRepositoryId,proto3" form:"srcRepositoryId" json:"srcRepositoryId,omitempty" vd:"len($) > 0"`
	SrcRepositoryName string            `protobuf:"bytes,8,opt,name=srcRepositoryName,proto3" form:"srcRepositoryName" json:"srcRepositoryName,omitempty" vd:"len($) > 0"`
	IsOverride        bool              `protobuf:"varint,9,opt,name=isOverride,proto3" form:"isOverride" json:"isOverride,omitempty"`
	Name              string            `protobuf:"bytes,10,opt,name=name,proto3" form:"name" json:"name,omitempty" vd:"len($) > 0"`
	Description       string            `protobuf:"bytes,11,opt,name=description,proto3" form:"description" json:"description,omitempty"`
	Type              string            `protobuf:"bytes,12,opt,name=type,proto3" form:"type" json:"type,omitempty" vd:"len($) > 0"`
	Labels            []string          `protobuf:"bytes,13,rep,name=labels,proto3" form:"labels" json:"labels,omitempty"`
	Devices           []string          `protobuf:"bytes,14,rep,name=devices,proto3" form:"devices" json:"devices,omitempty" vd:"len($) > 0"`
	Scenarios         []string          `protobuf:"bytes,15,rep,name=scenarios,proto3" form:"scenarios" json:"scenarios,omitempty"`
	RepositoryName    string            `protobuf:"bytes,16,opt,name=repositoryName,proto3" form:"repositoryName" json:"repositoryName,omitempty"`
	Detail            string            `protobuf:"bytes,17,opt,name=detail,proto3" form:"detail" json:"detail,omitempty"`
	Creator           string            `protobuf:"bytes,18,opt,name=creator,proto3" form:"creator" json:"creator,omitempty"`
	StartCommand      *RoleStartCommand `protobuf:"bytes,19,opt,name=startCommand,proto3" form:"startCommand" json:"startCommand,omitempty"`
}

func (x *CreateManagementFrameworkRequest) Reset() {
	*x = CreateManagementFrameworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManagementFrameworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManagementFrameworkRequest) ProtoMessage() {}

func (x *CreateManagementFrameworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManagementFrameworkRequest.ProtoReflect.Descriptor instead.
func (*CreateManagementFrameworkRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{4}
}

func (x *CreateManagementFrameworkRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetSrcInstanceId() string {
	if x != nil {
		return x.SrcInstanceId
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetSrcInstanceName() string {
	if x != nil {
		return x.SrcInstanceName
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetSrcNamespaceId() string {
	if x != nil {
		return x.SrcNamespaceId
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetSrcNamespaceName() string {
	if x != nil {
		return x.SrcNamespaceName
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetSrcRepositoryId() string {
	if x != nil {
		return x.SrcRepositoryId
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetSrcRepositoryName() string {
	if x != nil {
		return x.SrcRepositoryName
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetIsOverride() bool {
	if x != nil {
		return x.IsOverride
	}
	return false
}

func (x *CreateManagementFrameworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateManagementFrameworkRequest) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CreateManagementFrameworkRequest) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *CreateManagementFrameworkRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateManagementFrameworkRequest) GetStartCommand() *RoleStartCommand {
	if x != nil {
		return x.StartCommand
	}
	return nil
}

type CreateManagementFrameworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	FrameworkId string `protobuf:"bytes,2,opt,name=frameworkId,proto3" form:"frameworkId" json:"frameworkId,omitempty" query:"frameworkId"`
}

func (x *CreateManagementFrameworkResponse) Reset() {
	*x = CreateManagementFrameworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManagementFrameworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManagementFrameworkResponse) ProtoMessage() {}

func (x *CreateManagementFrameworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManagementFrameworkResponse.ProtoReflect.Descriptor instead.
func (*CreateManagementFrameworkResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{5}
}

func (x *CreateManagementFrameworkResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateManagementFrameworkResponse) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

type CreatePublicFrameworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId         string            `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	TenantId         string            `protobuf:"bytes,2,opt,name=tenantId,proto3" header:"tenantId" json:"tenantId,omitempty"`
	UserId           string            `protobuf:"bytes,3,opt,name=userId,proto3" header:"userId" json:"userId,omitempty"`
	InstanceId       string            `protobuf:"bytes,4,opt,name=instanceId,proto3" form:"instanceId" json:"instanceId,omitempty" vd:"len($) > 0"`
	RepositoryId     string            `protobuf:"bytes,5,opt,name=repositoryId,proto3" form:"repositoryId" json:"repositoryId,omitempty" vd:"len($) > 0"`
	Name             string            `protobuf:"bytes,6,opt,name=name,proto3" form:"name" json:"name,omitempty" vd:"len($) > 0"`
	Description      string            `protobuf:"bytes,7,opt,name=description,proto3" form:"description" json:"description,omitempty"`
	Type             string            `protobuf:"bytes,8,opt,name=type,proto3" form:"type" json:"type,omitempty" vd:"len($) > 0"`
	Labels           []string          `protobuf:"bytes,9,rep,name=labels,proto3" form:"labels" json:"labels,omitempty"`
	Devices          []string          `protobuf:"bytes,10,rep,name=devices,proto3" form:"devices" json:"devices,omitempty" vd:"len($) > 0"`
	Scenarios        []string          `protobuf:"bytes,11,rep,name=scenarios,proto3" form:"scenarios" json:"scenarios,omitempty"`
	ImageUrl         string            `protobuf:"bytes,12,opt,name=imageUrl,proto3" form:"imageUrl" json:"imageUrl,omitempty" vd:"len($) > 0"`
	ImageUrlInternal string            `protobuf:"bytes,13,opt,name=imageUrlInternal,proto3" form:"imageUrlInternal" json:"imageUrlInternal,omitempty" vd:"len($) > 0"`
	Namespace        string            `protobuf:"bytes,14,opt,name=namespace,proto3" form:"namespace" json:"namespace,omitempty" vd:"len($) > 0"`
	RepositoryName   string            `protobuf:"bytes,15,opt,name=repositoryName,proto3" form:"repositoryName" json:"repositoryName,omitempty" vd:"len($) > 0"`
	Detail           string            `protobuf:"bytes,16,opt,name=detail,proto3" form:"detail" json:"detail,omitempty"`
	Creator          string            `protobuf:"bytes,17,opt,name=creator,proto3" form:"creator" json:"creator,omitempty"`
	StartCommand     *RoleStartCommand `protobuf:"bytes,18,opt,name=startCommand,proto3" form:"startCommand" json:"startCommand,omitempty"`
}

func (x *CreatePublicFrameworkRequest) Reset() {
	*x = CreatePublicFrameworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublicFrameworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublicFrameworkRequest) ProtoMessage() {}

func (x *CreatePublicFrameworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublicFrameworkRequest.ProtoReflect.Descriptor instead.
func (*CreatePublicFrameworkRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePublicFrameworkRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreatePublicFrameworkRequest) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CreatePublicFrameworkRequest) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *CreatePublicFrameworkRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetImageUrlInternal() string {
	if x != nil {
		return x.ImageUrlInternal
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreatePublicFrameworkRequest) GetStartCommand() *RoleStartCommand {
	if x != nil {
		return x.StartCommand
	}
	return nil
}

type CreatePublicFrameworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	FrameworkId string `protobuf:"bytes,2,opt,name=frameworkId,proto3" form:"frameworkId" json:"frameworkId,omitempty" query:"frameworkId"`
}

func (x *CreatePublicFrameworkResponse) Reset() {
	*x = CreatePublicFrameworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublicFrameworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublicFrameworkResponse) ProtoMessage() {}

func (x *CreatePublicFrameworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublicFrameworkResponse.ProtoReflect.Descriptor instead.
func (*CreatePublicFrameworkResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{7}
}

func (x *CreatePublicFrameworkResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreatePublicFrameworkResponse) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

type DeleteFrameworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	FrameworkId string `protobuf:"bytes,2,opt,name=frameworkId,proto3" json:"frameworkId,omitempty" path:"frameworkId" vd:"len($) > 0"`
}

func (x *DeleteFrameworkRequest) Reset() {
	*x = DeleteFrameworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFrameworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFrameworkRequest) ProtoMessage() {}

func (x *DeleteFrameworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFrameworkRequest.ProtoReflect.Descriptor instead.
func (*DeleteFrameworkRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFrameworkRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *DeleteFrameworkRequest) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

type DeleteFrameworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	FrameworkId string `protobuf:"bytes,2,opt,name=frameworkId,proto3" form:"frameworkId" json:"frameworkId,omitempty" query:"frameworkId"`
}

func (x *DeleteFrameworkResponse) Reset() {
	*x = DeleteFrameworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFrameworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFrameworkResponse) ProtoMessage() {}

func (x *DeleteFrameworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFrameworkResponse.ProtoReflect.Descriptor instead.
func (*DeleteFrameworkResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteFrameworkResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DeleteFrameworkResponse) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

type UpdateFrameworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string   `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	FrameworkId string   `protobuf:"bytes,2,opt,name=frameworkId,proto3" json:"frameworkId,omitempty" path:"frameworkId" vd:"len($) > 0"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" form:"name" json:"name,omitempty" vd:"len($) > 0"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" form:"description" json:"description,omitempty"`
	Labels      []string `protobuf:"bytes,5,rep,name=labels,proto3" form:"labels" json:"labels,omitempty"`
	Devices     []string `protobuf:"bytes,6,rep,name=devices,proto3" form:"devices" json:"devices,omitempty" vd:"len($) > 0"`
	Scenarios   []string `protobuf:"bytes,7,rep,name=scenarios,proto3" form:"scenarios" json:"scenarios,omitempty"`
	Detail      string   `protobuf:"bytes,8,opt,name=detail,proto3" form:"detail" json:"detail,omitempty"`
}

func (x *UpdateFrameworkRequest) Reset() {
	*x = UpdateFrameworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFrameworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFrameworkRequest) ProtoMessage() {}

func (x *UpdateFrameworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFrameworkRequest.ProtoReflect.Descriptor instead.
func (*UpdateFrameworkRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateFrameworkRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *UpdateFrameworkRequest) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

func (x *UpdateFrameworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFrameworkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateFrameworkRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateFrameworkRequest) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *UpdateFrameworkRequest) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *UpdateFrameworkRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type UpdateFrameworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	FrameworkId string `protobuf:"bytes,2,opt,name=frameworkId,proto3" form:"frameworkId" json:"frameworkId,omitempty" query:"frameworkId"`
}

func (x *UpdateFrameworkResponse) Reset() {
	*x = UpdateFrameworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFrameworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFrameworkResponse) ProtoMessage() {}

func (x *UpdateFrameworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFrameworkResponse.ProtoReflect.Descriptor instead.
func (*UpdateFrameworkResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateFrameworkResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UpdateFrameworkResponse) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

type GetFrameworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	FrameworkId string `protobuf:"bytes,2,opt,name=frameworkId,proto3" json:"frameworkId,omitempty" path:"frameworkId" vd:"len($) > 0"`
}

func (x *GetFrameworkRequest) Reset() {
	*x = GetFrameworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameworkRequest) ProtoMessage() {}

func (x *GetFrameworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameworkRequest.ProtoReflect.Descriptor instead.
func (*GetFrameworkRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{12}
}

func (x *GetFrameworkRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetFrameworkRequest) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

type GetFrameworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string         `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Record    *FrameworkItem `protobuf:"bytes,2,opt,name=record,proto3" form:"record" json:"record,omitempty" query:"record"`
}

func (x *GetFrameworkResponse) Reset() {
	*x = GetFrameworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameworkResponse) ProtoMessage() {}

func (x *GetFrameworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameworkResponse.ProtoReflect.Descriptor instead.
func (*GetFrameworkResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{13}
}

func (x *GetFrameworkResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetFrameworkResponse) GetRecord() *FrameworkItem {
	if x != nil {
		return x.Record
	}
	return nil
}

type ListFrameworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId  string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	TenantId  string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty" query:"tenantId"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" query:"name"`
	Type      string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" query:"type"`
	Scenarios string `protobuf:"bytes,5,opt,name=scenarios,proto3" json:"scenarios,omitempty" query:"scenarios"`
	Devices   string `protobuf:"bytes,6,opt,name=devices,proto3" json:"devices,omitempty" query:"devices"`
	PageNum   int32  `protobuf:"varint,7,opt,name=pageNum,proto3" json:"pageNum,omitempty" query:"pageNum" vd:"$ > 0"`
	PageSize  int32  `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty" query:"pageSize" vd:"$ > 0 && $ <= 10000"`
	SortBy    string `protobuf:"bytes,9,opt,name=sortBy,proto3" json:"sortBy,omitempty" query:"sortBy"`
	Order     string `protobuf:"bytes,10,opt,name=order,proto3" json:"order,omitempty" query:"order"`
}

func (x *ListFrameworkRequest) Reset() {
	*x = ListFrameworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFrameworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFrameworkRequest) ProtoMessage() {}

func (x *ListFrameworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFrameworkRequest.ProtoReflect.Descriptor instead.
func (*ListFrameworkRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{14}
}

func (x *ListFrameworkRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListFrameworkRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ListFrameworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListFrameworkRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListFrameworkRequest) GetScenarios() string {
	if x != nil {
		return x.Scenarios
	}
	return ""
}

func (x *ListFrameworkRequest) GetDevices() string {
	if x != nil {
		return x.Devices
	}
	return ""
}

func (x *ListFrameworkRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListFrameworkRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFrameworkRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListFrameworkRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type ListFrameworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string           `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Records    []*FrameworkItem `protobuf:"bytes,2,rep,name=records,proto3" form:"records" json:"records,omitempty" query:"records"`
	TotalCount int32            `protobuf:"varint,3,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
}

func (x *ListFrameworkResponse) Reset() {
	*x = ListFrameworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFrameworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFrameworkResponse) ProtoMessage() {}

func (x *ListFrameworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFrameworkResponse.ProtoReflect.Descriptor instead.
func (*ListFrameworkResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{15}
}

func (x *ListFrameworkResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListFrameworkResponse) GetRecords() []*FrameworkItem {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListFrameworkResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type FrameworkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameworkId      string            `protobuf:"bytes,1,opt,name=frameworkId,proto3" form:"frameworkId" json:"frameworkId,omitempty" query:"frameworkId"`
	TenantId         string            `protobuf:"bytes,2,opt,name=tenantId,proto3" form:"tenantId" json:"tenantId,omitempty" query:"tenantId"`
	InstanceId       string            `protobuf:"bytes,3,opt,name=instanceId,proto3" form:"instanceId" json:"instanceId,omitempty" query:"instanceId"`
	RepositoryId     string            `protobuf:"bytes,4,opt,name=repositoryId,proto3" form:"repositoryId" json:"repositoryId,omitempty" query:"repositoryId"`
	Name             string            `protobuf:"bytes,5,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Description      string            `protobuf:"bytes,6,opt,name=description,proto3" form:"description" json:"description,omitempty" query:"description"`
	Type             string            `protobuf:"bytes,7,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	Labels           []string          `protobuf:"bytes,8,rep,name=labels,proto3" form:"labels" json:"labels,omitempty" query:"labels"`
	Devices          []string          `protobuf:"bytes,9,rep,name=devices,proto3" form:"devices" json:"devices,omitempty" query:"devices"`
	Scenarios        []string          `protobuf:"bytes,10,rep,name=scenarios,proto3" form:"scenarios" json:"scenarios,omitempty" query:"scenarios"`
	ImageUrl         string            `protobuf:"bytes,11,opt,name=imageUrl,proto3" form:"imageUrl" json:"imageUrl,omitempty" query:"imageUrl"`
	ImageUrlInternal string            `protobuf:"bytes,12,opt,name=imageUrlInternal,proto3" form:"imageUrlInternal" json:"imageUrlInternal,omitempty" query:"imageUrlInternal"`
	Namespace        string            `protobuf:"bytes,13,opt,name=namespace,proto3" form:"namespace" json:"namespace,omitempty" query:"namespace"`
	RepositoryName   string            `protobuf:"bytes,14,opt,name=repositoryName,proto3" form:"repositoryName" json:"repositoryName,omitempty" query:"repositoryName"`
	Detail           string            `protobuf:"bytes,15,opt,name=detail,proto3" form:"detail" json:"detail,omitempty" query:"detail"`
	CreatedAt        string            `protobuf:"bytes,16,opt,name=createdAt,proto3" form:"createdAt" json:"createdAt,omitempty" query:"createdAt"`
	UpdatedAt        string            `protobuf:"bytes,17,opt,name=updatedAt,proto3" form:"updatedAt" json:"updatedAt,omitempty" query:"updatedAt"`
	Creator          string            `protobuf:"bytes,18,opt,name=creator,proto3" form:"creator" json:"creator,omitempty" query:"creator"`
	StartCommand     *RoleStartCommand `protobuf:"bytes,19,opt,name=startCommand,proto3" form:"startCommand" json:"startCommand,omitempty" query:"startCommand"`
	Managed          bool              `protobuf:"varint,20,opt,name=managed,proto3" form:"managed" json:"managed,omitempty" query:"managed"`
}

func (x *FrameworkItem) Reset() {
	*x = FrameworkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkItem) ProtoMessage() {}

func (x *FrameworkItem) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkItem.ProtoReflect.Descriptor instead.
func (*FrameworkItem) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{16}
}

func (x *FrameworkItem) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

func (x *FrameworkItem) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *FrameworkItem) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *FrameworkItem) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *FrameworkItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FrameworkItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FrameworkItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FrameworkItem) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FrameworkItem) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *FrameworkItem) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *FrameworkItem) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *FrameworkItem) GetImageUrlInternal() string {
	if x != nil {
		return x.ImageUrlInternal
	}
	return ""
}

func (x *FrameworkItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FrameworkItem) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *FrameworkItem) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *FrameworkItem) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *FrameworkItem) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *FrameworkItem) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *FrameworkItem) GetStartCommand() *RoleStartCommand {
	if x != nil {
		return x.StartCommand
	}
	return nil
}

func (x *FrameworkItem) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

type GetFrameworkUserGuideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId  string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty" query:"clusterId" vd:"len($) > 0"`
}

func (x *GetFrameworkUserGuideRequest) Reset() {
	*x = GetFrameworkUserGuideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameworkUserGuideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameworkUserGuideRequest) ProtoMessage() {}

func (x *GetFrameworkUserGuideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameworkUserGuideRequest.ProtoReflect.Descriptor instead.
func (*GetFrameworkUserGuideRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{17}
}

func (x *GetFrameworkUserGuideRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetFrameworkUserGuideRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type GetFrameworkUserGuideResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Guide     string `protobuf:"bytes,2,opt,name=guide,proto3" form:"guide" json:"guide,omitempty" query:"guide"`
}

func (x *GetFrameworkUserGuideResponse) Reset() {
	*x = GetFrameworkUserGuideResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameworkUserGuideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameworkUserGuideResponse) ProtoMessage() {}

func (x *GetFrameworkUserGuideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameworkUserGuideResponse.ProtoReflect.Descriptor instead.
func (*GetFrameworkUserGuideResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{18}
}

func (x *GetFrameworkUserGuideResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetFrameworkUserGuideResponse) GetGuide() string {
	if x != nil {
		return x.Guide
	}
	return ""
}

type ListFrameworkReposRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId  string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty" query:"clusterId" vd:"len($) > 0"`
	PageNum   int32  `protobuf:"varint,3,opt,name=pageNum,proto3" json:"pageNum,omitempty" query:"pageNum" vd:"$ > 0"`
	PageSize  int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty" query:"pageSize" vd:"$ > 0 && $ <= 10000"`
}

func (x *ListFrameworkReposRequest) Reset() {
	*x = ListFrameworkReposRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFrameworkReposRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFrameworkReposRequest) ProtoMessage() {}

func (x *ListFrameworkReposRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFrameworkReposRequest.ProtoReflect.Descriptor instead.
func (*ListFrameworkReposRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{19}
}

func (x *ListFrameworkReposRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListFrameworkReposRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListFrameworkReposRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListFrameworkReposRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListFrameworkReposResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string               `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Records    []*FrameworkRepoItem `protobuf:"bytes,2,rep,name=records,proto3" form:"records" json:"records,omitempty" query:"records"`
	TotalCount int32                `protobuf:"varint,3,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
}

func (x *ListFrameworkReposResponse) Reset() {
	*x = ListFrameworkReposResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFrameworkReposResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFrameworkReposResponse) ProtoMessage() {}

func (x *ListFrameworkReposResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFrameworkReposResponse.ProtoReflect.Descriptor instead.
func (*ListFrameworkReposResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{20}
}

func (x *ListFrameworkReposResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListFrameworkReposResponse) GetRecords() []*FrameworkRepoItem {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListFrameworkReposResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type FrameworkRepoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId       string `protobuf:"bytes,1,opt,name=instanceId,proto3" form:"instanceId" json:"instanceId,omitempty" query:"instanceId"`
	RepositoryId     string `protobuf:"bytes,2,opt,name=repositoryId,proto3" form:"repositoryId" json:"repositoryId,omitempty" query:"repositoryId"`
	ImageUrl         string `protobuf:"bytes,3,opt,name=imageUrl,proto3" form:"imageUrl" json:"imageUrl,omitempty" query:"imageUrl"`
	ImageUrlInternal string `protobuf:"bytes,4,opt,name=imageUrlInternal,proto3" form:"imageUrlInternal" json:"imageUrlInternal,omitempty" query:"imageUrlInternal"`
	Namespace        string `protobuf:"bytes,5,opt,name=namespace,proto3" form:"namespace" json:"namespace,omitempty" query:"namespace"`
	RepositoryName   string `protobuf:"bytes,6,opt,name=repositoryName,proto3" form:"repositoryName" json:"repositoryName,omitempty" query:"repositoryName"`
	UpdatedAt        string `protobuf:"bytes,7,opt,name=updatedAt,proto3" form:"updatedAt" json:"updatedAt,omitempty" query:"updatedAt"`
}

func (x *FrameworkRepoItem) Reset() {
	*x = FrameworkRepoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkRepoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkRepoItem) ProtoMessage() {}

func (x *FrameworkRepoItem) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkRepoItem.ProtoReflect.Descriptor instead.
func (*FrameworkRepoItem) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{21}
}

func (x *FrameworkRepoItem) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *FrameworkRepoItem) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *FrameworkRepoItem) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *FrameworkRepoItem) GetImageUrlInternal() string {
	if x != nil {
		return x.ImageUrlInternal
	}
	return ""
}

func (x *FrameworkRepoItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FrameworkRepoItem) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *FrameworkRepoItem) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ListFrameworkTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	FrameworkId string `protobuf:"bytes,2,opt,name=frameworkId,proto3" json:"frameworkId,omitempty" path:"frameworkId" vd:"len($) > 0"`
	ClusterId   string `protobuf:"bytes,3,opt,name=clusterId,proto3" json:"clusterId,omitempty" query:"clusterId" vd:"len($) > 0"`
	PageNum     int32  `protobuf:"varint,4,opt,name=pageNum,proto3" json:"pageNum,omitempty" query:"pageNum" vd:"$ > 0"`
	PageSize    int32  `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty" query:"pageSize" vd:"$ > 0 && $ <= 10000"`
}

func (x *ListFrameworkTagsRequest) Reset() {
	*x = ListFrameworkTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFrameworkTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFrameworkTagsRequest) ProtoMessage() {}

func (x *ListFrameworkTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFrameworkTagsRequest.ProtoReflect.Descriptor instead.
func (*ListFrameworkTagsRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{22}
}

func (x *ListFrameworkTagsRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListFrameworkTagsRequest) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

func (x *ListFrameworkTagsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListFrameworkTagsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListFrameworkTagsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListFrameworkTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string              `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Records    []*FrameworkTagItem `protobuf:"bytes,2,rep,name=records,proto3" form:"records" json:"records,omitempty" query:"records"`
	TotalCount int32               `protobuf:"varint,3,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
}

func (x *ListFrameworkTagsResponse) Reset() {
	*x = ListFrameworkTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFrameworkTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFrameworkTagsResponse) ProtoMessage() {}

func (x *ListFrameworkTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFrameworkTagsResponse.ProtoReflect.Descriptor instead.
func (*ListFrameworkTagsResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{23}
}

func (x *ListFrameworkTagsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListFrameworkTagsResponse) GetRecords() []*FrameworkTagItem {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListFrameworkTagsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type FrameworkTagItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	OsArch    string `protobuf:"bytes,2,opt,name=osArch,proto3" form:"osArch" json:"osArch,omitempty" query:"osArch"`
	Size      string `protobuf:"bytes,3,opt,name=size,proto3" form:"size" json:"size,omitempty" query:"size"`
	UpdatedAt string `protobuf:"bytes,4,opt,name=updatedAt,proto3" form:"updatedAt" json:"updatedAt,omitempty" query:"updatedAt"`
}

func (x *FrameworkTagItem) Reset() {
	*x = FrameworkTagItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkTagItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkTagItem) ProtoMessage() {}

func (x *FrameworkTagItem) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkTagItem.ProtoReflect.Descriptor instead.
func (*FrameworkTagItem) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{24}
}

func (x *FrameworkTagItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FrameworkTagItem) GetOsArch() string {
	if x != nil {
		return x.OsArch
	}
	return ""
}

func (x *FrameworkTagItem) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *FrameworkTagItem) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetFrameworkCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId      string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	FrameworkType string `protobuf:"bytes,2,opt,name=frameworkType,proto3" json:"frameworkType,omitempty" query:"frameworkType" vd:"len($) > 0"`
	JobMode       string `protobuf:"bytes,3,opt,name=jobMode,proto3" json:"jobMode,omitempty" query:"jobMode" vd:"len($) > 0"`
	Device        string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty" query:"device"`
}

func (x *GetFrameworkCommandRequest) Reset() {
	*x = GetFrameworkCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameworkCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameworkCommandRequest) ProtoMessage() {}

func (x *GetFrameworkCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameworkCommandRequest.ProtoReflect.Descriptor instead.
func (*GetFrameworkCommandRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{25}
}

func (x *GetFrameworkCommandRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetFrameworkCommandRequest) GetFrameworkType() string {
	if x != nil {
		return x.FrameworkType
	}
	return ""
}

func (x *GetFrameworkCommandRequest) GetJobMode() string {
	if x != nil {
		return x.JobMode
	}
	return ""
}

func (x *GetFrameworkCommandRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

type GetFrameworkCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Master    *FrameworkCommandItem `protobuf:"bytes,2,opt,name=master,proto3" form:"master" json:"master,omitempty" query:"master"`
	Worker    *FrameworkCommandItem `protobuf:"bytes,3,opt,name=worker,proto3" form:"worker" json:"worker,omitempty" query:"worker"`
}

func (x *GetFrameworkCommandResponse) Reset() {
	*x = GetFrameworkCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameworkCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameworkCommandResponse) ProtoMessage() {}

func (x *GetFrameworkCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameworkCommandResponse.ProtoReflect.Descriptor instead.
func (*GetFrameworkCommandResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{26}
}

func (x *GetFrameworkCommandResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetFrameworkCommandResponse) GetMaster() *FrameworkCommandItem {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *GetFrameworkCommandResponse) GetWorker() *FrameworkCommandItem {
	if x != nil {
		return x.Worker
	}
	return nil
}

type FrameworkCommandItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []string `protobuf:"bytes,1,rep,name=commands,proto3" form:"commands" json:"commands,omitempty" query:"commands"`
	Args     []string `protobuf:"bytes,2,rep,name=args,proto3" form:"args" json:"args,omitempty" query:"args"`
}

func (x *FrameworkCommandItem) Reset() {
	*x = FrameworkCommandItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkCommandItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkCommandItem) ProtoMessage() {}

func (x *FrameworkCommandItem) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkCommandItem.ProtoReflect.Descriptor instead.
func (*FrameworkCommandItem) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{27}
}

func (x *FrameworkCommandItem) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *FrameworkCommandItem) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type GetFrameworkSupportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *GetFrameworkSupportsRequest) Reset() {
	*x = GetFrameworkSupportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameworkSupportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameworkSupportsRequest) ProtoMessage() {}

func (x *GetFrameworkSupportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameworkSupportsRequest.ProtoReflect.Descriptor instead.
func (*GetFrameworkSupportsRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{28}
}

func (x *GetFrameworkSupportsRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type GetFrameworkSupportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string   `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Scenarios  []string `protobuf:"bytes,2,rep,name=scenarios,proto3" form:"scenarios" json:"scenarios,omitempty" query:"scenarios"`
	Devices    []string `protobuf:"bytes,3,rep,name=devices,proto3" form:"devices" json:"devices,omitempty" query:"devices"`
	Frameworks []string `protobuf:"bytes,4,rep,name=frameworks,proto3" form:"frameworks" json:"frameworks,omitempty" query:"frameworks"`
}

func (x *GetFrameworkSupportsResponse) Reset() {
	*x = GetFrameworkSupportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameworkSupportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameworkSupportsResponse) ProtoMessage() {}

func (x *GetFrameworkSupportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameworkSupportsResponse.ProtoReflect.Descriptor instead.
func (*GetFrameworkSupportsResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{29}
}

func (x *GetFrameworkSupportsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetFrameworkSupportsResponse) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *GetFrameworkSupportsResponse) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *GetFrameworkSupportsResponse) GetFrameworks() []string {
	if x != nil {
		return x.Frameworks
	}
	return nil
}

type ListCRSInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId     string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	ClusterId    string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty" query:"clusterId"`
	PageNum      int32  `protobuf:"varint,3,opt,name=pageNum,proto3" json:"pageNum,omitempty" query:"pageNum" vd:"$ > 0"`
	PageSize     int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty" query:"pageSize" vd:"$ > 0 && $ <= 10000"`
	InstanceName string `protobuf:"bytes,5,opt,name=instanceName,proto3" json:"instanceName,omitempty" query:"instanceName"`
}

func (x *ListCRSInstanceRequest) Reset() {
	*x = ListCRSInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCRSInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCRSInstanceRequest) ProtoMessage() {}

func (x *ListCRSInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCRSInstanceRequest.ProtoReflect.Descriptor instead.
func (*ListCRSInstanceRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{30}
}

func (x *ListCRSInstanceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListCRSInstanceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListCRSInstanceRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListCRSInstanceRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCRSInstanceRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type ListCRSInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string             `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Records    []*CRSInstanceItem `protobuf:"bytes,2,rep,name=records,proto3" form:"records" json:"records,omitempty" query:"records"`
	TotalCount int32              `protobuf:"varint,3,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
}

func (x *ListCRSInstanceResponse) Reset() {
	*x = ListCRSInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCRSInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCRSInstanceResponse) ProtoMessage() {}

func (x *ListCRSInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCRSInstanceResponse.ProtoReflect.Descriptor instead.
func (*ListCRSInstanceResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{31}
}

func (x *ListCRSInstanceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListCRSInstanceResponse) GetRecords() []*CRSInstanceItem {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListCRSInstanceResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CRSInstanceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId      string `protobuf:"bytes,1,opt,name=instanceId,proto3" form:"instanceId" json:"instanceId,omitempty" query:"instanceId"`
	InstanceName    string `protobuf:"bytes,2,opt,name=instanceName,proto3" form:"instanceName" json:"instanceName,omitempty" query:"instanceName"`
	InstanceType    string `protobuf:"bytes,3,opt,name=instanceType,proto3" form:"instanceType" json:"instanceType,omitempty" query:"instanceType"`
	UserName        string `protobuf:"bytes,4,opt,name=userName,proto3" form:"userName" json:"userName,omitempty" query:"userName"`
	Region          string `protobuf:"bytes,5,opt,name=region,proto3" form:"region" json:"region,omitempty" query:"region"`
	RegionName      string `protobuf:"bytes,6,opt,name=regionName,proto3" form:"regionName" json:"regionName,omitempty" query:"regionName"`
	PublicAddress   string `protobuf:"bytes,7,opt,name=publicAddress,proto3" form:"publicAddress" json:"publicAddress,omitempty" query:"publicAddress"`
	InternalAddress string `protobuf:"bytes,8,opt,name=internalAddress,proto3" form:"internalAddress" json:"internalAddress,omitempty" query:"internalAddress"`
	State           string `protobuf:"bytes,9,opt,name=state,proto3" form:"state" json:"state,omitempty" query:"state"`
	ExpirationTime  string `protobuf:"bytes,10,opt,name=expirationTime,proto3" form:"expirationTime" json:"expirationTime,omitempty" query:"expirationTime"`
	CreatedTime     string `protobuf:"bytes,11,opt,name=createdTime,proto3" form:"createdTime" json:"createdTime,omitempty" query:"createdTime"`
}

func (x *CRSInstanceItem) Reset() {
	*x = CRSInstanceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSInstanceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSInstanceItem) ProtoMessage() {}

func (x *CRSInstanceItem) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSInstanceItem.ProtoReflect.Descriptor instead.
func (*CRSInstanceItem) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{32}
}

func (x *CRSInstanceItem) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CRSInstanceItem) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *CRSInstanceItem) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *CRSInstanceItem) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CRSInstanceItem) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CRSInstanceItem) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *CRSInstanceItem) GetPublicAddress() string {
	if x != nil {
		return x.PublicAddress
	}
	return ""
}

func (x *CRSInstanceItem) GetInternalAddress() string {
	if x != nil {
		return x.InternalAddress
	}
	return ""
}

func (x *CRSInstanceItem) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CRSInstanceItem) GetExpirationTime() string {
	if x != nil {
		return x.ExpirationTime
	}
	return ""
}

func (x *CRSInstanceItem) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

type ListCRSNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId      string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	ClusterId     string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty" query:"clusterId"`
	InstanceId    string `protobuf:"bytes,3,opt,name=instanceId,proto3" json:"instanceId,omitempty" query:"instanceId"`
	NamespaceName string `protobuf:"bytes,4,opt,name=namespaceName,proto3" json:"namespaceName,omitempty" query:"namespaceName"`
	PageNum       int32  `protobuf:"varint,5,opt,name=pageNum,proto3" json:"pageNum,omitempty" query:"pageNum"`
	PageSize      int32  `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty" query:"pageSize"`
	SortBy        string `protobuf:"bytes,7,opt,name=sortBy,proto3" json:"sortBy,omitempty" query:"sortBy"`
	Order         string `protobuf:"bytes,8,opt,name=order,proto3" json:"order,omitempty" query:"order"`
}

func (x *ListCRSNamespaceRequest) Reset() {
	*x = ListCRSNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCRSNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCRSNamespaceRequest) ProtoMessage() {}

func (x *ListCRSNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCRSNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ListCRSNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{33}
}

func (x *ListCRSNamespaceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListCRSNamespaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListCRSNamespaceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ListCRSNamespaceRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *ListCRSNamespaceRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListCRSNamespaceRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCRSNamespaceRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListCRSNamespaceRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type ListCRSNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string              `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Records    []*CRSNamespaceItem `protobuf:"bytes,2,rep,name=records,proto3" form:"records" json:"records,omitempty" query:"records"`
	TotalCount int32               `protobuf:"varint,3,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
}

func (x *ListCRSNamespaceResponse) Reset() {
	*x = ListCRSNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCRSNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCRSNamespaceResponse) ProtoMessage() {}

func (x *ListCRSNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCRSNamespaceResponse.ProtoReflect.Descriptor instead.
func (*ListCRSNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{34}
}

func (x *ListCRSNamespaceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListCRSNamespaceResponse) GetRecords() []*CRSNamespaceItem {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListCRSNamespaceResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CRSNamespaceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId       string `protobuf:"bytes,1,opt,name=namespaceId,proto3" form:"namespaceId" json:"namespaceId,omitempty" query:"namespaceId"`
	NamespaceName     string `protobuf:"bytes,2,opt,name=namespaceName,proto3" form:"namespaceName" json:"namespaceName,omitempty" query:"namespaceName"`
	CreateRepoAuto    bool   `protobuf:"varint,3,opt,name=createRepoAuto,proto3" form:"createRepoAuto" json:"createRepoAuto,omitempty" query:"createRepoAuto"`
	DefaultRepoPublic bool   `protobuf:"varint,4,opt,name=defaultRepoPublic,proto3" form:"defaultRepoPublic" json:"defaultRepoPublic,omitempty" query:"defaultRepoPublic"`
	RepositoryCount   int32  `protobuf:"varint,5,opt,name=repositoryCount,proto3" form:"repositoryCount" json:"repositoryCount,omitempty" query:"repositoryCount"`
	Accelerate        bool   `protobuf:"varint,6,opt,name=accelerate,proto3" form:"accelerate" json:"accelerate,omitempty" query:"accelerate"`
	CreatedTime       string `protobuf:"bytes,7,opt,name=createdTime,proto3" form:"createdTime" json:"createdTime,omitempty" query:"createdTime"`
	ModifiedTime      string `protobuf:"bytes,8,opt,name=modifiedTime,proto3" form:"modifiedTime" json:"modifiedTime,omitempty" query:"modifiedTime"`
}

func (x *CRSNamespaceItem) Reset() {
	*x = CRSNamespaceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSNamespaceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSNamespaceItem) ProtoMessage() {}

func (x *CRSNamespaceItem) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSNamespaceItem.ProtoReflect.Descriptor instead.
func (*CRSNamespaceItem) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{35}
}

func (x *CRSNamespaceItem) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *CRSNamespaceItem) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *CRSNamespaceItem) GetCreateRepoAuto() bool {
	if x != nil {
		return x.CreateRepoAuto
	}
	return false
}

func (x *CRSNamespaceItem) GetDefaultRepoPublic() bool {
	if x != nil {
		return x.DefaultRepoPublic
	}
	return false
}

func (x *CRSNamespaceItem) GetRepositoryCount() int32 {
	if x != nil {
		return x.RepositoryCount
	}
	return 0
}

func (x *CRSNamespaceItem) GetAccelerate() bool {
	if x != nil {
		return x.Accelerate
	}
	return false
}

func (x *CRSNamespaceItem) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *CRSNamespaceItem) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

type ListCRSRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId       string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	ClusterId      string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty" query:"clusterId"`
	InstanceId     string `protobuf:"bytes,3,opt,name=instanceId,proto3" json:"instanceId,omitempty" query:"instanceId"`
	NamespaceName  string `protobuf:"bytes,4,opt,name=namespaceName,proto3" json:"namespaceName,omitempty" query:"namespaceName"`
	RepositoryName string `protobuf:"bytes,5,opt,name=repositoryName,proto3" json:"repositoryName,omitempty" query:"repositoryName"`
	PageNum        int32  `protobuf:"varint,6,opt,name=pageNum,proto3" json:"pageNum,omitempty" query:"pageNum"`
	PageSize       int32  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty" query:"pageSize"`
	SortBy         string `protobuf:"bytes,8,opt,name=sortBy,proto3" json:"sortBy,omitempty" query:"sortBy"`
	Order          string `protobuf:"bytes,9,opt,name=order,proto3" json:"order,omitempty" query:"order"`
}

func (x *ListCRSRepositoryRequest) Reset() {
	*x = ListCRSRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCRSRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCRSRepositoryRequest) ProtoMessage() {}

func (x *ListCRSRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCRSRepositoryRequest.ProtoReflect.Descriptor instead.
func (*ListCRSRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{36}
}

func (x *ListCRSRepositoryRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListCRSRepositoryRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListCRSRepositoryRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ListCRSRepositoryRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *ListCRSRepositoryRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *ListCRSRepositoryRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListCRSRepositoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCRSRepositoryRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListCRSRepositoryRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type ListCRSRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string               `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Records    []*CRSRepositoryItem `protobuf:"bytes,2,rep,name=records,proto3" form:"records" json:"records,omitempty" query:"records"`
	TotalCount int32                `protobuf:"varint,3,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
}

func (x *ListCRSRepositoryResponse) Reset() {
	*x = ListCRSRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCRSRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCRSRepositoryResponse) ProtoMessage() {}

func (x *ListCRSRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCRSRepositoryResponse.ProtoReflect.Descriptor instead.
func (*ListCRSRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{37}
}

func (x *ListCRSRepositoryResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListCRSRepositoryResponse) GetRecords() []*CRSRepositoryItem {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListCRSRepositoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CRSRepositoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId     string `protobuf:"bytes,1,opt,name=repositoryId,proto3" form:"repositoryId" json:"repositoryId,omitempty" query:"repositoryId"`
	NamespaceName    string `protobuf:"bytes,2,opt,name=namespaceName,proto3" form:"namespaceName" json:"namespaceName,omitempty" query:"namespaceName"`
	RepositoryName   string `protobuf:"bytes,3,opt,name=repositoryName,proto3" form:"repositoryName" json:"repositoryName,omitempty" query:"repositoryName"`
	IsPublic         bool   `protobuf:"varint,4,opt,name=isPublic,proto3" form:"isPublic" json:"isPublic,omitempty" query:"isPublic"`
	Accelerate       bool   `protobuf:"varint,5,opt,name=accelerate,proto3" form:"accelerate" json:"accelerate,omitempty" query:"accelerate"`
	RegionId         string `protobuf:"bytes,6,opt,name=regionId,proto3" form:"regionId" json:"regionId,omitempty" query:"regionId"`
	Description      string `protobuf:"bytes,7,opt,name=description,proto3" form:"description" json:"description,omitempty" query:"description"`
	CreatedTime      string `protobuf:"bytes,8,opt,name=createdTime,proto3" form:"createdTime" json:"createdTime,omitempty" query:"createdTime"`
	ModifiedTime     string `protobuf:"bytes,9,opt,name=modifiedTime,proto3" form:"modifiedTime" json:"modifiedTime,omitempty" query:"modifiedTime"`
	InstanceId       string `protobuf:"bytes,10,opt,name=instanceId,proto3" form:"instanceId" json:"instanceId,omitempty" query:"instanceId"`
	ImageUrl         string `protobuf:"bytes,11,opt,name=imageUrl,proto3" form:"imageUrl" json:"imageUrl,omitempty" query:"imageUrl"`
	ImageUrlInternal string `protobuf:"bytes,12,opt,name=imageUrlInternal,proto3" form:"imageUrlInternal" json:"imageUrlInternal,omitempty" query:"imageUrlInternal"`
}

func (x *CRSRepositoryItem) Reset() {
	*x = CRSRepositoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSRepositoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSRepositoryItem) ProtoMessage() {}

func (x *CRSRepositoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSRepositoryItem.ProtoReflect.Descriptor instead.
func (*CRSRepositoryItem) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{38}
}

func (x *CRSRepositoryItem) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *CRSRepositoryItem) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *CRSRepositoryItem) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *CRSRepositoryItem) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *CRSRepositoryItem) GetAccelerate() bool {
	if x != nil {
		return x.Accelerate
	}
	return false
}

func (x *CRSRepositoryItem) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CRSRepositoryItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CRSRepositoryItem) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *CRSRepositoryItem) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

func (x *CRSRepositoryItem) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CRSRepositoryItem) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *CRSRepositoryItem) GetImageUrlInternal() string {
	if x != nil {
		return x.ImageUrlInternal
	}
	return ""
}

type ResyncManagementFrameworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    string `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	ClusterId   string `protobuf:"bytes,2,opt,name=clusterId,proto3" form:"clusterId" json:"clusterId,omitempty"`
	FrameworkId string `protobuf:"bytes,3,opt,name=frameworkId,proto3" form:"frameworkId" json:"frameworkId,omitempty" vd:"len($) > 0"`
	IsOverride  bool   `protobuf:"varint,4,opt,name=isOverride,proto3" form:"isOverride" json:"isOverride,omitempty"`
}

func (x *ResyncManagementFrameworkRequest) Reset() {
	*x = ResyncManagementFrameworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResyncManagementFrameworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncManagementFrameworkRequest) ProtoMessage() {}

func (x *ResyncManagementFrameworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncManagementFrameworkRequest.ProtoReflect.Descriptor instead.
func (*ResyncManagementFrameworkRequest) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{39}
}

func (x *ResyncManagementFrameworkRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ResyncManagementFrameworkRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ResyncManagementFrameworkRequest) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

func (x *ResyncManagementFrameworkRequest) GetIsOverride() bool {
	if x != nil {
		return x.IsOverride
	}
	return false
}

type ResyncManagementFrameworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	FrameworkId string `protobuf:"bytes,2,opt,name=frameworkId,proto3" form:"frameworkId" json:"frameworkId,omitempty" query:"frameworkId"`
}

func (x *ResyncManagementFrameworkResponse) Reset() {
	*x = ResyncManagementFrameworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framework_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResyncManagementFrameworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncManagementFrameworkResponse) ProtoMessage() {}

func (x *ResyncManagementFrameworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framework_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncManagementFrameworkResponse.ProtoReflect.Descriptor instead.
func (*ResyncManagementFrameworkResponse) Descriptor() ([]byte, []int) {
	return file_framework_proto_rawDescGZIP(), []int{40}
}

func (x *ResyncManagementFrameworkResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ResyncManagementFrameworkResponse) GetFrameworkId() string {
	if x != nil {
		return x.FrameworkId
	}
	return ""
}

var File_framework_proto protoreflect.FileDescriptor

var file_framework_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x7c, 0x0a, 0x10, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x22, 0x7e, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x06,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x64, 0x22, 0xfc, 0x06, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xca, 0xbb, 0x18, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65,
	0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xca, 0xbb, 0x18, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0xda, 0xbb, 0x18, 0x0a,
	0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x79, 0x70, 0x65, 0xda,
	0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xca, 0xbb, 0x18, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20,
	0x3e, 0x20, 0x30, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x09,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0d, 0xca, 0xbb, 0x18, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x09,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xbb, 0x18,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e,
	0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x4e, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xca, 0xbb, 0x18,
	0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52,
	0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xca, 0xbb, 0x18, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20,
	0x30, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xca, 0xbb, 0x18, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28,
	0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0x59, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0xde, 0x08, 0x0a, 0x20,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba,
	0xbb, 0x18, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xca, 0xbb, 0x18, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52,
	0x0d, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x0f, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xca, 0xbb, 0x18, 0x0f, 0x73, 0x72, 0x63,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0xda, 0xbb, 0x18, 0x0a,
	0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x73,
	0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0xca, 0xbb, 0x18, 0x0e, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24,
	0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0xca, 0xbb, 0x18, 0x10, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20,
	0x3e, 0x20, 0x30, 0x52, 0x10, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xca, 0xbb, 0x18, 0x0f, 0x73, 0x72, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20,
	0x30, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x11, 0x73, 0x72, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xca,
	0xbb, 0x18, 0x11, 0x73, 0x72, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e,
	0x20, 0x30, 0x52, 0x11, 0x73, 0x72, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x69,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xda, 0xbb, 0x18,
	0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x79, 0x70, 0x65, 0xda, 0xbb, 0x18, 0x0a,
	0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xca, 0xbb, 0x18, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb,
	0x18, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x09, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xca, 0xbb, 0x18, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x10, 0xca, 0xbb,
	0x18, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x63, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x22, 0xd0, 0x07, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xba, 0xbb, 0x18, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0xbb, 0x18, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xca, 0xbb, 0x18, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0xda, 0xbb,
	0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0xca, 0xbb, 0x18, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e,
	0x20, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca,
	0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x04, 0x74,
	0x79, 0x70, 0x65, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20,
	0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xca, 0xbb,
	0x18, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e,
	0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x73, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x36, 0x0a,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xca, 0xbb, 0x18, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0xda, 0xbb, 0x18,
	0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x4e, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0xca, 0xbb, 0x18, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20,
	0x3e, 0x20, 0x30, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xca, 0xbb, 0x18, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24,
	0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xca, 0xbb, 0x18, 0x0e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0xda, 0xbb, 0x18, 0x0a,
	0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xca, 0xbb, 0x18, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x22, 0x5f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xd2, 0xbb, 0x18, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0b,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x8c, 0x03, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xd2, 0xbb, 0x18, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52,
	0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e,
	0x20, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca,
	0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x33, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x19, 0xca, 0xbb, 0x18, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0xda, 0xbb, 0x18,
	0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x73, 0x12, 0x22, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x59, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xd2, 0xbb, 0x18, 0x0b, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28,
	0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xbb,
	0x18, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xb2, 0xbb, 0x18, 0x04, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x73, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x25, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xb2, 0xbb, 0x18, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0xda, 0xbb, 0x18, 0x05, 0x24, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x23, 0xb2, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0xda, 0xbb, 0x18, 0x13, 0x24, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x26, 0x26,
	0x20, 0x24, 0x20, 0x3c, 0x3d, 0x20, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xb2, 0xbb, 0x18, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xfe, 0x04, 0x0a, 0x0d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xb2, 0xbb, 0x18, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x75, 0x69, 0x64, 0x65, 0x22, 0xf1,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xb2, 0xbb, 0x18, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28,
	0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0xda,
	0xbb, 0x18, 0x05, 0x24, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x23, 0xb2, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0xda, 0xbb, 0x18, 0x13, 0x24, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x24, 0x20,
	0x3c, 0x3d, 0x20, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xd2, 0xbb, 0x18, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29,
	0x20, 0x3e, 0x20, 0x30, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xb2, 0xbb, 0x18, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20,
	0x30, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xb2,
	0xbb, 0x18, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0xda, 0xbb, 0x18, 0x05, 0x24, 0x20,
	0x3e, 0x20, 0x30, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x23,
	0xb2, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0xda, 0xbb, 0x18, 0x13,
	0x24, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x24, 0x20, 0x3c, 0x3d, 0x20, 0x31, 0x30,
	0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x10,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x41, 0x72, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x41, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe6,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xb2, 0xbb, 0x18, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52,
	0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xb2, 0xbb, 0x18, 0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0xda, 0xbb, 0x18, 0x0a,
	0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xb2, 0xbb, 0x18, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x22,
	0x46, 0x0a, 0x14, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x47, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x94, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x52, 0x53, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xb2, 0xbb, 0x18, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0xda, 0xbb, 0x18, 0x05, 0x24, 0x20, 0x3e, 0x20, 0x30,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x23, 0xb2, 0xbb, 0x18,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0xda, 0xbb, 0x18, 0x13, 0x24, 0x20, 0x3e,
	0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x24, 0x20, 0x3c, 0x3d, 0x20, 0x31, 0x30, 0x30, 0x30, 0x30,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xb2, 0xbb, 0x18, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x53, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x52, 0x53, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x02, 0x0a,
	0x0f, 0x43, 0x52, 0x53, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x02, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xbb, 0x18, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xbb, 0x18, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xb2, 0xbb, 0x18, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x28, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xb2, 0xbb, 0x18, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1f, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xb2, 0xbb,
	0x18, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x8b,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x52, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc0, 0x02, 0x0a,
	0x10, 0x43, 0x52, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x75, 0x74,
	0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xac, 0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x53, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xbb, 0x18, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xbb, 0x18, 0x0d,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xbb, 0x18, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xb2, 0xbb, 0x18, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x28, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xb2, 0xbb, 0x18, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1f, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xb2, 0xbb,
	0x18, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x8d,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x53, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x52, 0x53, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xad,
	0x03, 0x0a, 0x11, 0x43, 0x52, 0x53, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0xea,
	0x01, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xca, 0xbb, 0x18, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0xda, 0xbb, 0x18, 0x0a, 0x6c, 0x65, 0x6e, 0x28, 0x24, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0b,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x69,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52,
	0x0a, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x21, 0x52,
	0x65, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x32, 0xb7, 0x0f, 0x0a, 0x10, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xd2, 0xc1, 0x18, 0x18, 0x2f, 0x69, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x6f, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xe2, 0xc1, 0x18, 0x19, 0x2f, 0x69, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x6f, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xda, 0xc1, 0x18, 0x19, 0x2f, 0x69,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x66, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0xca, 0xc1, 0x18, 0x19, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x69, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xca, 0xc1, 0x18,
	0x19, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0xca, 0xc1, 0x18, 0x23, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x7e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0xca, 0xc1, 0x18, 0x1f, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x7a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0xca, 0xc1, 0x18, 0x1e, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0xca, 0xc1, 0x18, 0x21, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0xca, 0xc1,
	0x18, 0x22, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xd2, 0xc1, 0x18, 0x24, 0x2f, 0x69, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x79, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x53, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x52, 0x53, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52,
	0x53, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0xca, 0xc1, 0x18, 0x23, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x52, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x53, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x53, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x28, 0xca, 0xc1, 0x18, 0x24, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x52, 0x53, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x53, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x53,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2a, 0xca, 0xc1, 0x18, 0x26, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x9f,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2f, 0xd2, 0xc1, 0x18, 0x2b, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x1a, 0x28, 0x92, 0xce, 0x18, 0x24, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x69, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x74, 0x79, 0x75, 0x6e, 0x2e, 0x63, 0x6e, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d,
	0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_framework_proto_rawDescOnce sync.Once
	file_framework_proto_rawDescData = file_framework_proto_rawDesc
)

func file_framework_proto_rawDescGZIP() []byte {
	file_framework_proto_rawDescOnce.Do(func() {
		file_framework_proto_rawDescData = protoimpl.X.CompressGZIP(file_framework_proto_rawDescData)
	})
	return file_framework_proto_rawDescData
}

var file_framework_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_framework_proto_goTypes = []interface{}{
	(*FrameworkCommand)(nil),                  // 0: proto.FrameworkCommand
	(*RoleStartCommand)(nil),                  // 1: proto.RoleStartCommand
	(*CreateFrameworkRequest)(nil),            // 2: proto.CreateFrameworkRequest
	(*CreateFrameworkResponse)(nil),           // 3: proto.CreateFrameworkResponse
	(*CreateManagementFrameworkRequest)(nil),  // 4: proto.CreateManagementFrameworkRequest
	(*CreateManagementFrameworkResponse)(nil), // 5: proto.CreateManagementFrameworkResponse
	(*CreatePublicFrameworkRequest)(nil),      // 6: proto.CreatePublicFrameworkRequest
	(*CreatePublicFrameworkResponse)(nil),     // 7: proto.CreatePublicFrameworkResponse
	(*DeleteFrameworkRequest)(nil),            // 8: proto.DeleteFrameworkRequest
	(*DeleteFrameworkResponse)(nil),           // 9: proto.DeleteFrameworkResponse
	(*UpdateFrameworkRequest)(nil),            // 10: proto.UpdateFrameworkRequest
	(*UpdateFrameworkResponse)(nil),           // 11: proto.UpdateFrameworkResponse
	(*GetFrameworkRequest)(nil),               // 12: proto.GetFrameworkRequest
	(*GetFrameworkResponse)(nil),              // 13: proto.GetFrameworkResponse
	(*ListFrameworkRequest)(nil),              // 14: proto.ListFrameworkRequest
	(*ListFrameworkResponse)(nil),             // 15: proto.ListFrameworkResponse
	(*FrameworkItem)(nil),                     // 16: proto.FrameworkItem
	(*GetFrameworkUserGuideRequest)(nil),      // 17: proto.GetFrameworkUserGuideRequest
	(*GetFrameworkUserGuideResponse)(nil),     // 18: proto.GetFrameworkUserGuideResponse
	(*ListFrameworkReposRequest)(nil),         // 19: proto.ListFrameworkReposRequest
	(*ListFrameworkReposResponse)(nil),        // 20: proto.ListFrameworkReposResponse
	(*FrameworkRepoItem)(nil),                 // 21: proto.FrameworkRepoItem
	(*ListFrameworkTagsRequest)(nil),          // 22: proto.ListFrameworkTagsRequest
	(*ListFrameworkTagsResponse)(nil),         // 23: proto.ListFrameworkTagsResponse
	(*FrameworkTagItem)(nil),                  // 24: proto.FrameworkTagItem
	(*GetFrameworkCommandRequest)(nil),        // 25: proto.GetFrameworkCommandRequest
	(*GetFrameworkCommandResponse)(nil),       // 26: proto.GetFrameworkCommandResponse
	(*FrameworkCommandItem)(nil),              // 27: proto.FrameworkCommandItem
	(*GetFrameworkSupportsRequest)(nil),       // 28: proto.GetFrameworkSupportsRequest
	(*GetFrameworkSupportsResponse)(nil),      // 29: proto.GetFrameworkSupportsResponse
	(*ListCRSInstanceRequest)(nil),            // 30: proto.ListCRSInstanceRequest
	(*ListCRSInstanceResponse)(nil),           // 31: proto.ListCRSInstanceResponse
	(*CRSInstanceItem)(nil),                   // 32: proto.CRSInstanceItem
	(*ListCRSNamespaceRequest)(nil),           // 33: proto.ListCRSNamespaceRequest
	(*ListCRSNamespaceResponse)(nil),          // 34: proto.ListCRSNamespaceResponse
	(*CRSNamespaceItem)(nil),                  // 35: proto.CRSNamespaceItem
	(*ListCRSRepositoryRequest)(nil),          // 36: proto.ListCRSRepositoryRequest
	(*ListCRSRepositoryResponse)(nil),         // 37: proto.ListCRSRepositoryResponse
	(*CRSRepositoryItem)(nil),                 // 38: proto.CRSRepositoryItem
	(*ResyncManagementFrameworkRequest)(nil),  // 39: proto.ResyncManagementFrameworkRequest
	(*ResyncManagementFrameworkResponse)(nil), // 40: proto.ResyncManagementFrameworkResponse
}
var file_framework_proto_depIdxs = []int32{
	27, // 0: proto.FrameworkCommand.master:type_name -> proto.FrameworkCommandItem
	27, // 1: proto.FrameworkCommand.worker:type_name -> proto.FrameworkCommandItem
	0,  // 2: proto.RoleStartCommand.single:type_name -> proto.FrameworkCommand
	0,  // 3: proto.RoleStartCommand.distributed:type_name -> proto.FrameworkCommand
	1,  // 4: proto.CreateFrameworkRequest.startCommand:type_name -> proto.RoleStartCommand
	1,  // 5: proto.CreateManagementFrameworkRequest.startCommand:type_name -> proto.RoleStartCommand
	1,  // 6: proto.CreatePublicFrameworkRequest.startCommand:type_name -> proto.RoleStartCommand
	16, // 7: proto.GetFrameworkResponse.record:type_name -> proto.FrameworkItem
	16, // 8: proto.ListFrameworkResponse.records:type_name -> proto.FrameworkItem
	1,  // 9: proto.FrameworkItem.startCommand:type_name -> proto.RoleStartCommand
	21, // 10: proto.ListFrameworkReposResponse.records:type_name -> proto.FrameworkRepoItem
	24, // 11: proto.ListFrameworkTagsResponse.records:type_name -> proto.FrameworkTagItem
	27, // 12: proto.GetFrameworkCommandResponse.master:type_name -> proto.FrameworkCommandItem
	27, // 13: proto.GetFrameworkCommandResponse.worker:type_name -> proto.FrameworkCommandItem
	32, // 14: proto.ListCRSInstanceResponse.records:type_name -> proto.CRSInstanceItem
	35, // 15: proto.ListCRSNamespaceResponse.records:type_name -> proto.CRSNamespaceItem
	38, // 16: proto.ListCRSRepositoryResponse.records:type_name -> proto.CRSRepositoryItem
	2,  // 17: proto.FrameworkService.CreateFramework:input_type -> proto.CreateFrameworkRequest
	8,  // 18: proto.FrameworkService.DeleteFramework:input_type -> proto.DeleteFrameworkRequest
	10, // 19: proto.FrameworkService.UpdateFramework:input_type -> proto.UpdateFrameworkRequest
	12, // 20: proto.FrameworkService.GetFramework:input_type -> proto.GetFrameworkRequest
	14, // 21: proto.FrameworkService.ListFramework:input_type -> proto.ListFrameworkRequest
	17, // 22: proto.FrameworkService.GetFrameworkUserGuide:input_type -> proto.GetFrameworkUserGuideRequest
	19, // 23: proto.FrameworkService.ListFrameworkRepos:input_type -> proto.ListFrameworkReposRequest
	22, // 24: proto.FrameworkService.ListFrameworkTags:input_type -> proto.ListFrameworkTagsRequest
	25, // 25: proto.FrameworkService.GetFrameworkCommand:input_type -> proto.GetFrameworkCommandRequest
	28, // 26: proto.FrameworkService.GetFrameworkSupports:input_type -> proto.GetFrameworkSupportsRequest
	4,  // 27: proto.FrameworkService.CreateManagementFramework:input_type -> proto.CreateManagementFrameworkRequest
	30, // 28: proto.FrameworkService.ListCRSInstance:input_type -> proto.ListCRSInstanceRequest
	33, // 29: proto.FrameworkService.ListCRSNamespace:input_type -> proto.ListCRSNamespaceRequest
	36, // 30: proto.FrameworkService.ListCRSRepository:input_type -> proto.ListCRSRepositoryRequest
	39, // 31: proto.FrameworkService.ResyncManagementFramework:input_type -> proto.ResyncManagementFrameworkRequest
	3,  // 32: proto.FrameworkService.CreateFramework:output_type -> proto.CreateFrameworkResponse
	9,  // 33: proto.FrameworkService.DeleteFramework:output_type -> proto.DeleteFrameworkResponse
	11, // 34: proto.FrameworkService.UpdateFramework:output_type -> proto.UpdateFrameworkResponse
	13, // 35: proto.FrameworkService.GetFramework:output_type -> proto.GetFrameworkResponse
	15, // 36: proto.FrameworkService.ListFramework:output_type -> proto.ListFrameworkResponse
	18, // 37: proto.FrameworkService.GetFrameworkUserGuide:output_type -> proto.GetFrameworkUserGuideResponse
	20, // 38: proto.FrameworkService.ListFrameworkRepos:output_type -> proto.ListFrameworkReposResponse
	23, // 39: proto.FrameworkService.ListFrameworkTags:output_type -> proto.ListFrameworkTagsResponse
	26, // 40: proto.FrameworkService.GetFrameworkCommand:output_type -> proto.GetFrameworkCommandResponse
	29, // 41: proto.FrameworkService.GetFrameworkSupports:output_type -> proto.GetFrameworkSupportsResponse
	5,  // 42: proto.FrameworkService.CreateManagementFramework:output_type -> proto.CreateManagementFrameworkResponse
	31, // 43: proto.FrameworkService.ListCRSInstance:output_type -> proto.ListCRSInstanceResponse
	34, // 44: proto.FrameworkService.ListCRSNamespace:output_type -> proto.ListCRSNamespaceResponse
	37, // 45: proto.FrameworkService.ListCRSRepository:output_type -> proto.ListCRSRepositoryResponse
	40, // 46: proto.FrameworkService.ResyncManagementFramework:output_type -> proto.ResyncManagementFrameworkResponse
	32, // [32:47] is the sub-list for method output_type
	17, // [17:32] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_framework_proto_init() }
func file_framework_proto_init() {
	if File_framework_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_framework_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameworkCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleStartCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFrameworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFrameworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManagementFrameworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManagementFrameworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublicFrameworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublicFrameworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFrameworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFrameworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFrameworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFrameworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFrameworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFrameworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameworkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameworkUserGuideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameworkUserGuideResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFrameworkReposRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFrameworkReposResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameworkRepoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFrameworkTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFrameworkTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameworkTagItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameworkCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameworkCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameworkCommandItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameworkSupportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameworkSupportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCRSInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCRSInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSInstanceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCRSNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCRSNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSNamespaceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCRSRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCRSRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSRepositoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResyncManagementFrameworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framework_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResyncManagementFrameworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_framework_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_framework_proto_goTypes,
		DependencyIndexes: file_framework_proto_depIdxs,
		MessageInfos:      file_framework_proto_msgTypes,
	}.Build()
	File_framework_proto = out.File
	file_framework_proto_rawDesc = nil
	file_framework_proto_goTypes = nil
	file_framework_proto_depIdxs = nil
}
