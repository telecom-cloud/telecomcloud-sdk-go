// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package isuite

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	queue "github.com/telecom-cloud/telecomcloud-sdk-go/service/isuite/queue"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type QueueClient interface {
	CreateQueue(context context.Context, req *queue.CreateQueueRequest, reqOpt ...config.RequestOption) (resp *queue.CreateQueueResponse, rawResponse *protocol.Response, err error)

	DeleteQueue(context context.Context, req *queue.DeleteQueueRequest, reqOpt ...config.RequestOption) (resp *queue.DeleteQueueResponse, rawResponse *protocol.Response, err error)

	UpdateQueue(context context.Context, req *queue.UpdateQueueRequest, reqOpt ...config.RequestOption) (resp *queue.UpdateQueueResponse, rawResponse *protocol.Response, err error)

	GetQueue(context context.Context, req *queue.GetQueueRequest, reqOpt ...config.RequestOption) (resp *queue.GetQueueResponse, rawResponse *protocol.Response, err error)

	ListQueue(context context.Context, req *queue.ListQueueRequest, reqOpt ...config.RequestOption) (resp *queue.ListQueueResponse, rawResponse *protocol.Response, err error)

	UpdateQueueStatus(context context.Context, req *queue.UpdateQueueStatusRequest, reqOpt ...config.RequestOption) (resp *queue.UpdateQueueStatusResponse, rawResponse *protocol.Response, err error)
}

type queueClient struct {
	client *HttpClient
}

func NewQueueClient(hostUrl string, ops ...Option) (QueueClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &queueClient{
		client: cli,
	}, nil
}

func (s *queueClient) CreateQueue(ctx context.Context, req *queue.CreateQueueRequest, reqOpt ...config.RequestOption) (resp *queue.CreateQueueResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/queues")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *queueClient) DeleteQueue(ctx context.Context, req *queue.DeleteQueueRequest, reqOpt ...config.RequestOption) (resp *queue.DeleteQueueResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"queueId": req.GetQueueId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/queues")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *queueClient) UpdateQueue(ctx context.Context, req *queue.UpdateQueueRequest, reqOpt ...config.RequestOption) (resp *queue.UpdateQueueResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"queueId": req.GetQueueId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/api/v1/queues")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *queueClient) GetQueue(ctx context.Context, req *queue.GetQueueRequest, reqOpt ...config.RequestOption) (resp *queue.GetQueueResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"queueId": req.GetQueueId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/queues")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *queueClient) ListQueue(ctx context.Context, req *queue.ListQueueRequest, reqOpt ...config.RequestOption) (resp *queue.ListQueueResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"clusterId": req.GetClusterId(),
		"name":      req.GetName(),
		"status":    req.GetStatus(),
		"sortBy":    req.GetSortBy(),
		"order":     req.GetOrder(),
		"pageNum":   req.GetPageNum(),
		"pageSize":  req.GetPageSize(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/queues")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *queueClient) UpdateQueueStatus(ctx context.Context, req *queue.UpdateQueueStatusRequest, reqOpt ...config.RequestOption) (resp *queue.UpdateQueueStatusResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"queueId": req.GetQueueId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/internal/v1/queues/:queueId/status")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultQueueClient, _ = NewQueueClient(baseDomain)

func ConfigDefaultQueueClient(ops ...Option) (err error) {
	defaultQueueClient, err = NewQueueClient(baseDomain, ops...)
	return
}

func CreateQueue(context context.Context, req *queue.CreateQueueRequest, reqOpt ...config.RequestOption) (resp *queue.CreateQueueResponse, rawResponse *protocol.Response, err error) {
	return defaultQueueClient.CreateQueue(context, req, reqOpt...)
}

func DeleteQueue(context context.Context, req *queue.DeleteQueueRequest, reqOpt ...config.RequestOption) (resp *queue.DeleteQueueResponse, rawResponse *protocol.Response, err error) {
	return defaultQueueClient.DeleteQueue(context, req, reqOpt...)
}

func UpdateQueue(context context.Context, req *queue.UpdateQueueRequest, reqOpt ...config.RequestOption) (resp *queue.UpdateQueueResponse, rawResponse *protocol.Response, err error) {
	return defaultQueueClient.UpdateQueue(context, req, reqOpt...)
}

func GetQueue(context context.Context, req *queue.GetQueueRequest, reqOpt ...config.RequestOption) (resp *queue.GetQueueResponse, rawResponse *protocol.Response, err error) {
	return defaultQueueClient.GetQueue(context, req, reqOpt...)
}

func ListQueue(context context.Context, req *queue.ListQueueRequest, reqOpt ...config.RequestOption) (resp *queue.ListQueueResponse, rawResponse *protocol.Response, err error) {
	return defaultQueueClient.ListQueue(context, req, reqOpt...)
}

func UpdateQueueStatus(context context.Context, req *queue.UpdateQueueStatusRequest, reqOpt ...config.RequestOption) (resp *queue.UpdateQueueStatusResponse, rawResponse *protocol.Response, err error) {
	return defaultQueueClient.UpdateQueueStatus(context, req, reqOpt...)
}
