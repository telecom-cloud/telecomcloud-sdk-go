// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package isuite

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	inference "github.com/telecom-cloud/telecomcloud-sdk-go/service/isuite/inference"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type InferenceClient interface {
	CreateInference(context context.Context, req *inference.CreateInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.CreateInferenceResponse, rawResponse *protocol.Response, err error)

	DeleteInference(context context.Context, req *inference.DeleteInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.DeleteInferenceResponse, rawResponse *protocol.Response, err error)

	UpdateInference(context context.Context, req *inference.UpdateInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.UpdateInferenceResponse, rawResponse *protocol.Response, err error)

	GetInference(context context.Context, req *inference.GetInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceResponse, rawResponse *protocol.Response, err error)

	ListInference(context context.Context, req *inference.ListInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.ListInferenceResponse, rawResponse *protocol.Response, err error)

	StartInference(context context.Context, req *inference.StartInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.StartInferenceResponse, rawResponse *protocol.Response, err error)

	StopInference(context context.Context, req *inference.StopInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.StopInferenceResponse, rawResponse *protocol.Response, err error)

	UpdateInferenceStatus(context context.Context, req *inference.UpdateInferenceStatusRequest, reqOpt ...config.RequestOption) (resp *inference.UpdateInferenceStatusResponse, rawResponse *protocol.Response, err error)

	GetInferenceEvent(context context.Context, req *inference.GetInferenceEventRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceEventResponse, rawResponse *protocol.Response, err error)

	GetInferenceLogs(context context.Context, req *inference.GetInferenceLogsRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceLogsResponse, rawResponse *protocol.Response, err error)

	GetInferenceMetrics(context context.Context, req *inference.GetInferenceMetricsRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceMetricsResponse, rawResponse *protocol.Response, err error)

	GetInferenceDashboard(context context.Context, req *inference.GetInferenceDashboardRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceDashboardResponse, rawResponse *protocol.Response, err error)
}

type inferenceClient struct {
	client *HttpClient
}

func NewInferenceClient(hostUrl string, ops ...Option) (InferenceClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &inferenceClient{
		client: cli,
	}, nil
}

func (s *inferenceClient) CreateInference(ctx context.Context, req *inference.CreateInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.CreateInferenceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/inferences")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) DeleteInference(ctx context.Context, req *inference.DeleteInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.DeleteInferenceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"inferenceId": req.GetInferenceId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/inferences/{inferenceId}")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) UpdateInference(ctx context.Context, req *inference.UpdateInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.UpdateInferenceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"inferenceId": req.GetInferenceId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/api/v1/inferences/{inferenceId}")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) GetInference(ctx context.Context, req *inference.GetInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"inferenceId": req.GetInferenceId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/inferences/{inferenceId}")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) ListInference(ctx context.Context, req *inference.ListInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.ListInferenceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"clusterId":     req.GetClusterId(),
		"pageNum":       req.GetPageNum(),
		"pageSize":      req.GetPageSize(),
		"inferenceName": req.GetInferenceName(),
		"namespace":     req.GetNamespace(),
		"jobMode":       req.GetJobMode(),
		"status":        req.GetStatus(),
		"sortBy":        req.GetSortBy(),
		"order":         req.GetOrder(),
		"queue":         req.GetQueue(),
		"priority":      req.GetPriority(),
		"label":         req.GetLabel(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/inferences")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) StartInference(ctx context.Context, req *inference.StartInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.StartInferenceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"inferenceId": req.GetInferenceId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/api/v1/inferences/{inferenceId}/start")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) StopInference(ctx context.Context, req *inference.StopInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.StopInferenceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"inferenceId": req.GetInferenceId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/api/v1/inferences/{inferenceId}/stop")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) UpdateInferenceStatus(ctx context.Context, req *inference.UpdateInferenceStatusRequest, reqOpt ...config.RequestOption) (resp *inference.UpdateInferenceStatusResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"inferenceId": req.GetInferenceId(),
		}).
		AddHeaders(map[string]string{
			"clusterId": req.GetClusterId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/internal/v1/inferences/{inferenceId}/status")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) GetInferenceEvent(ctx context.Context, req *inference.GetInferenceEventRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceEventResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"inferenceId": req.GetInferenceId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/inferences/{inferenceId}/events")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) GetInferenceLogs(ctx context.Context, req *inference.GetInferenceLogsRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceLogsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"startTime": req.GetStartTime(),
		"endTime":   req.GetEndTime(),
		"limit":     req.GetLimit(),
		"reverse":   req.GetReverse(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"inferenceId": req.GetInferenceId(),
			"podId":       req.GetPodId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/inferences/{inferenceId}/pods/:podId/logs")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) GetInferenceMetrics(ctx context.Context, req *inference.GetInferenceMetricsRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceMetricsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"timeStep":  req.GetTimeStep(),
		"startTime": req.GetStartTime(),
		"endTime":   req.GetEndTime(),
		"type":      req.GetType(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"inferenceId": req.GetInferenceId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/inferences/{inferenceId}/metrics")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *inferenceClient) GetInferenceDashboard(ctx context.Context, req *inference.GetInferenceDashboardRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceDashboardResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"instanceId":    req.GetInstanceId(),
		"instanceName":  req.GetInstanceName(),
		"type":          req.GetType(),
		"namespace":     req.GetNamespace(),
		"inferenceName": req.GetInferenceName(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"inferenceId": req.GetInferenceId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/inferences/{inferenceId}/dashboard")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultInferenceClient, _ = NewInferenceClient(baseDomain)

func ConfigDefaultInferenceClient(ops ...Option) (err error) {
	defaultInferenceClient, err = NewInferenceClient(baseDomain, ops...)
	return
}

func CreateInference(context context.Context, req *inference.CreateInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.CreateInferenceResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.CreateInference(context, req, reqOpt...)
}

func DeleteInference(context context.Context, req *inference.DeleteInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.DeleteInferenceResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.DeleteInference(context, req, reqOpt...)
}

func UpdateInference(context context.Context, req *inference.UpdateInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.UpdateInferenceResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.UpdateInference(context, req, reqOpt...)
}

func GetInference(context context.Context, req *inference.GetInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.GetInference(context, req, reqOpt...)
}

func ListInference(context context.Context, req *inference.ListInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.ListInferenceResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.ListInference(context, req, reqOpt...)
}

func StartInference(context context.Context, req *inference.StartInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.StartInferenceResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.StartInference(context, req, reqOpt...)
}

func StopInference(context context.Context, req *inference.StopInferenceRequest, reqOpt ...config.RequestOption) (resp *inference.StopInferenceResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.StopInference(context, req, reqOpt...)
}

func UpdateInferenceStatus(context context.Context, req *inference.UpdateInferenceStatusRequest, reqOpt ...config.RequestOption) (resp *inference.UpdateInferenceStatusResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.UpdateInferenceStatus(context, req, reqOpt...)
}

func GetInferenceEvent(context context.Context, req *inference.GetInferenceEventRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceEventResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.GetInferenceEvent(context, req, reqOpt...)
}

func GetInferenceLogs(context context.Context, req *inference.GetInferenceLogsRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceLogsResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.GetInferenceLogs(context, req, reqOpt...)
}

func GetInferenceMetrics(context context.Context, req *inference.GetInferenceMetricsRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceMetricsResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.GetInferenceMetrics(context, req, reqOpt...)
}

func GetInferenceDashboard(context context.Context, req *inference.GetInferenceDashboardRequest, reqOpt ...config.RequestOption) (resp *inference.GetInferenceDashboardResponse, rawResponse *protocol.Response, err error) {
	return defaultInferenceClient.GetInferenceDashboard(context, req, reqOpt...)
}
