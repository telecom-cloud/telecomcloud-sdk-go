// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package isuite

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	model "github.com/telecom-cloud/telecomcloud-sdk-go/service/isuite/model"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type ModelClient interface {
	CreateModel(context context.Context, req *model.CreateModelRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelResponse, rawResponse *protocol.Response, err error)

	DeleteModel(context context.Context, req *model.DeleteModelRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelResponse, rawResponse *protocol.Response, err error)

	UpdateModel(context context.Context, req *model.UpdateModelRequest, reqOpt ...config.RequestOption) (resp *model.UpdateModelResponse, rawResponse *protocol.Response, err error)

	GetModel(context context.Context, req *model.GetModelRequest, reqOpt ...config.RequestOption) (resp *model.GetModelResponse, rawResponse *protocol.Response, err error)

	ListModel(context context.Context, req *model.ListModelRequest, reqOpt ...config.RequestOption) (resp *model.ListModelResponse, rawResponse *protocol.Response, err error)

	CreateModelPreheat(context context.Context, req *model.CreateModelPreheatRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelPreheatResponse, rawResponse *protocol.Response, err error)

	CreateModelVersion(context context.Context, req *model.CreateModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelVersionResponse, rawResponse *protocol.Response, err error)

	DeleteModelVersion(context context.Context, req *model.DeleteModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelVersionResponse, rawResponse *protocol.Response, err error)

	UpdateModelVersion(context context.Context, req *model.UpdateModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.UpdateModelVersionResponse, rawResponse *protocol.Response, err error)

	GetModelVersion(context context.Context, req *model.GetModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.GetModelVersionResponse, rawResponse *protocol.Response, err error)

	ListModelVersion(context context.Context, req *model.ListModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.ListModelVersionResponse, rawResponse *protocol.Response, err error)

	CreateModelLabels(context context.Context, req *model.CreateModelLabelsRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelLabelsResponse, rawResponse *protocol.Response, err error)

	DeleteModelLabels(context context.Context, req *model.DeleteModelLabelsRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelLabelsResponse, rawResponse *protocol.Response, err error)

	CreateModelVersionLabels(context context.Context, req *model.CreateModelVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelVersionLabelsResponse, rawResponse *protocol.Response, err error)

	DeleteModelVersionLabels(context context.Context, req *model.DeleteModelVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelVersionLabelsResponse, rawResponse *protocol.Response, err error)

	UpdateModelStatus(context context.Context, req *model.UpdateModelStatusRequest, reqOpt ...config.RequestOption) (resp *model.UpdateModelStatusResponse, rawResponse *protocol.Response, err error)

	GenerateObjectUploadLink(context context.Context, req *model.GenerateObjectUploadLinkRequest, reqOpt ...config.RequestOption) (resp *model.GenerateObjectUploadLinkResponse, rawResponse *protocol.Response, err error)
}

type modelClient struct {
	client *HttpClient
}

func NewModelClient(hostUrl string, ops ...Option) (ModelClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &modelClient{
		client: cli,
	}, nil
}

func (s *modelClient) CreateModel(ctx context.Context, req *model.CreateModelRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/models")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) DeleteModel(ctx context.Context, req *model.DeleteModelRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/models/:modelId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) UpdateModel(ctx context.Context, req *model.UpdateModelRequest, reqOpt ...config.RequestOption) (resp *model.UpdateModelResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/api/v1/models/:modelId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) GetModel(ctx context.Context, req *model.GetModelRequest, reqOpt ...config.RequestOption) (resp *model.GetModelResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/models/:modelId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) ListModel(ctx context.Context, req *model.ListModelRequest, reqOpt ...config.RequestOption) (resp *model.ListModelResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"modelType": req.GetModelType(),
		"modelName": req.GetModelName(),
		"labels":    req.GetLabels(),
		"pageNum":   req.GetPageNum(),
		"pageSize":  req.GetPageSize(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/models")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) CreateModelPreheat(ctx context.Context, req *model.CreateModelPreheatRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelPreheatResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/models/:modelId/preheat")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) CreateModelVersion(ctx context.Context, req *model.CreateModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelVersionResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/models/:modelId/versions")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) DeleteModelVersion(ctx context.Context, req *model.DeleteModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelVersionResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
			"version": req.GetVersion(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/models/:modelId/versions/:version")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) UpdateModelVersion(ctx context.Context, req *model.UpdateModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.UpdateModelVersionResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
			"version": req.GetVersion(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/api/v1/models/:modelId/versions/:version")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) GetModelVersion(ctx context.Context, req *model.GetModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.GetModelVersionResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
			"version": req.GetVersion(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/models/:modelId/versions/:version")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) ListModelVersion(ctx context.Context, req *model.ListModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.ListModelVersionResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"pageNum":  req.GetPageNum(),
		"pageSize": req.GetPageSize(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/models/:modelId/versions")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) CreateModelLabels(ctx context.Context, req *model.CreateModelLabelsRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelLabelsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/models/:modelId/labels")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) DeleteModelLabels(ctx context.Context, req *model.DeleteModelLabelsRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelLabelsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/models/:modelId/labels")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) CreateModelVersionLabels(ctx context.Context, req *model.CreateModelVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelVersionLabelsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
			"version": req.GetVersion(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/isuite/api/v1/models/:modelId/versions/:version/labels")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) DeleteModelVersionLabels(ctx context.Context, req *model.DeleteModelVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelVersionLabelsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
			"version": req.GetVersion(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/isuite/api/v1/models/:modelId/versions/:version/labels")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) UpdateModelStatus(ctx context.Context, req *model.UpdateModelStatusRequest, reqOpt ...config.RequestOption) (resp *model.UpdateModelStatusResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
			"version": req.GetVersion(),
		}).
		AddHeaders(map[string]string{
			"clusterId": req.GetClusterId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/isuite/internal/v1/models/:modelId/versions/:version/status")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *modelClient) GenerateObjectUploadLink(ctx context.Context, req *model.GenerateObjectUploadLinkRequest, reqOpt ...config.RequestOption) (resp *model.GenerateObjectUploadLinkResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"clusterId": req.GetClusterId(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"modelId": req.GetModelId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/isuite/api/v1/models/:modelId/objectUploadLink")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultModelClient, _ = NewModelClient(baseDomain)

func ConfigDefaultModelClient(ops ...Option) (err error) {
	defaultModelClient, err = NewModelClient(baseDomain, ops...)
	return
}

func CreateModel(context context.Context, req *model.CreateModelRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.CreateModel(context, req, reqOpt...)
}

func DeleteModel(context context.Context, req *model.DeleteModelRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.DeleteModel(context, req, reqOpt...)
}

func UpdateModel(context context.Context, req *model.UpdateModelRequest, reqOpt ...config.RequestOption) (resp *model.UpdateModelResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.UpdateModel(context, req, reqOpt...)
}

func GetModel(context context.Context, req *model.GetModelRequest, reqOpt ...config.RequestOption) (resp *model.GetModelResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.GetModel(context, req, reqOpt...)
}

func ListModel(context context.Context, req *model.ListModelRequest, reqOpt ...config.RequestOption) (resp *model.ListModelResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.ListModel(context, req, reqOpt...)
}

func CreateModelPreheat(context context.Context, req *model.CreateModelPreheatRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelPreheatResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.CreateModelPreheat(context, req, reqOpt...)
}

func CreateModelVersion(context context.Context, req *model.CreateModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelVersionResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.CreateModelVersion(context, req, reqOpt...)
}

func DeleteModelVersion(context context.Context, req *model.DeleteModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelVersionResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.DeleteModelVersion(context, req, reqOpt...)
}

func UpdateModelVersion(context context.Context, req *model.UpdateModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.UpdateModelVersionResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.UpdateModelVersion(context, req, reqOpt...)
}

func GetModelVersion(context context.Context, req *model.GetModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.GetModelVersionResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.GetModelVersion(context, req, reqOpt...)
}

func ListModelVersion(context context.Context, req *model.ListModelVersionRequest, reqOpt ...config.RequestOption) (resp *model.ListModelVersionResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.ListModelVersion(context, req, reqOpt...)
}

func CreateModelLabels(context context.Context, req *model.CreateModelLabelsRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelLabelsResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.CreateModelLabels(context, req, reqOpt...)
}

func DeleteModelLabels(context context.Context, req *model.DeleteModelLabelsRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelLabelsResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.DeleteModelLabels(context, req, reqOpt...)
}

func CreateModelVersionLabels(context context.Context, req *model.CreateModelVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *model.CreateModelVersionLabelsResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.CreateModelVersionLabels(context, req, reqOpt...)
}

func DeleteModelVersionLabels(context context.Context, req *model.DeleteModelVersionLabelsRequest, reqOpt ...config.RequestOption) (resp *model.DeleteModelVersionLabelsResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.DeleteModelVersionLabels(context, req, reqOpt...)
}

func UpdateModelStatus(context context.Context, req *model.UpdateModelStatusRequest, reqOpt ...config.RequestOption) (resp *model.UpdateModelStatusResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.UpdateModelStatus(context, req, reqOpt...)
}

func GenerateObjectUploadLink(context context.Context, req *model.GenerateObjectUploadLinkRequest, reqOpt ...config.RequestOption) (resp *model.GenerateObjectUploadLinkResponse, rawResponse *protocol.Response, err error) {
	return defaultModelClient.GenerateObjectUploadLink(context, req, reqOpt...)
}
