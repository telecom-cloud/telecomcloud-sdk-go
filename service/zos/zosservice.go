// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package zos

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	zos "github.com/telecom-cloud/telecomcloud-sdk-go/service/zos/types/zos"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type ZosClient interface {
	GetOssServiceStatus(context context.Context, req *zos.GetOssServiceStatusRequest, reqOpt ...config.RequestOption) (resp *zos.GetOssServiceStatusResponse, rawResponse *protocol.Response, err error)

	NewOssService(context context.Context, req *zos.NewOssServiceRequest, reqOpt ...config.RequestOption) (resp *zos.NewOssServiceResponse, rawResponse *protocol.Response, err error)

	CreateBucket(context context.Context, req *zos.CreateBucketRequest, reqOpt ...config.RequestOption) (resp *zos.CreateBucketResponse, rawResponse *protocol.Response, err error)

	GenerateObjectUploadLink(context context.Context, req *zos.GenerateObjectUploadLinkRequest, reqOpt ...config.RequestOption) (resp *zos.GenerateObjectUploadLinkResponse, rawResponse *protocol.Response, err error)

	GetKeys(context context.Context, req *zos.GetKeysRequest, reqOpt ...config.RequestOption) (resp *zos.GetKeysResponse, rawResponse *protocol.Response, err error)

	ListBuckets(context context.Context, req *zos.ListBucketsRequest, reqOpt ...config.RequestOption) (resp *zos.ListBucketsResponse, rawResponse *protocol.Response, err error)

	GetBucket(context context.Context, req *zos.GetBucketRequest, reqOpt ...config.RequestOption) (resp *zos.GetBucketResponse, rawResponse *protocol.Response, err error)

	GetBucketAcl(context context.Context, req *zos.GetBucketAclRequest, reqOpt ...config.RequestOption) (resp *zos.GetBucketAclResponse, rawResponse *protocol.Response, err error)

	PutBucketAcl(context context.Context, req *zos.PutBucketAclRequest, reqOpt ...config.RequestOption) (resp *zos.PutBucketAclResponse, rawResponse *protocol.Response, err error)

	PutBucketCors(context context.Context, req *zos.PutBucketCorsRequest, reqOpt ...config.RequestOption) (resp *zos.PutBucketCorsResponse, rawResponse *protocol.Response, err error)
}

type zosClient struct {
	client *HttpClient
}

func NewZosClient(hostUrl string, ops ...Option) (ZosClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &zosClient{
		client: cli,
	}, nil
}

func (s *zosClient) GetOssServiceStatus(ctx context.Context, req *zos.GetOssServiceStatusRequest, reqOpt ...config.RequestOption) (resp *zos.GetOssServiceStatusResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"regionID": req.GetRegionId(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v4/oss/get-oss-service-status")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *zosClient) NewOssService(ctx context.Context, req *zos.NewOssServiceRequest, reqOpt ...config.RequestOption) (resp *zos.NewOssServiceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v4/oss/new")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *zosClient) CreateBucket(ctx context.Context, req *zos.CreateBucketRequest, reqOpt ...config.RequestOption) (resp *zos.CreateBucketResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v4/oss/create-bucket")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *zosClient) GenerateObjectUploadLink(ctx context.Context, req *zos.GenerateObjectUploadLinkRequest, reqOpt ...config.RequestOption) (resp *zos.GenerateObjectUploadLinkResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v4/oss/generate-object-upload-link")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *zosClient) GetKeys(ctx context.Context, req *zos.GetKeysRequest, reqOpt ...config.RequestOption) (resp *zos.GetKeysResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"regionID": req.GetRegionID(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v4/oss/get-keys")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *zosClient) ListBuckets(ctx context.Context, req *zos.ListBucketsRequest, reqOpt ...config.RequestOption) (resp *zos.ListBucketsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"regionID":  req.GetRegionID(),
		"projectID": req.GetProjectID(),
		"pageSize":  req.GetPageSize(),
		"pageNo":    req.GetPageNo(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v4/oss/list-buckets")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *zosClient) GetBucket(ctx context.Context, req *zos.GetBucketRequest, reqOpt ...config.RequestOption) (resp *zos.GetBucketResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"bucket":   req.GetBucket(),
		"regionID": req.GetRegionID(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v4/oss/get-bucket-info")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *zosClient) GetBucketAcl(ctx context.Context, req *zos.GetBucketAclRequest, reqOpt ...config.RequestOption) (resp *zos.GetBucketAclResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"bucket":   req.GetBucket(),
		"regionID": req.GetRegionID(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v4/oss/get-bucket-acl")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *zosClient) PutBucketAcl(ctx context.Context, req *zos.PutBucketAclRequest, reqOpt ...config.RequestOption) (resp *zos.PutBucketAclResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v4/oss/put-bucket-acl")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *zosClient) PutBucketCors(ctx context.Context, req *zos.PutBucketCorsRequest, reqOpt ...config.RequestOption) (resp *zos.PutBucketCorsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v4/oss/put-bucket-cors")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultZosClient, _ = NewZosClient(baseDomain)

func ConfigDefaultZosClient(ops ...Option) (err error) {
	defaultZosClient, err = NewZosClient(baseDomain, ops...)
	return
}

func GetOssServiceStatus(context context.Context, req *zos.GetOssServiceStatusRequest, reqOpt ...config.RequestOption) (resp *zos.GetOssServiceStatusResponse, rawResponse *protocol.Response, err error) {
	return defaultZosClient.GetOssServiceStatus(context, req, reqOpt...)
}

func NewOssService(context context.Context, req *zos.NewOssServiceRequest, reqOpt ...config.RequestOption) (resp *zos.NewOssServiceResponse, rawResponse *protocol.Response, err error) {
	return defaultZosClient.NewOssService(context, req, reqOpt...)
}

func CreateBucket(context context.Context, req *zos.CreateBucketRequest, reqOpt ...config.RequestOption) (resp *zos.CreateBucketResponse, rawResponse *protocol.Response, err error) {
	return defaultZosClient.CreateBucket(context, req, reqOpt...)
}

func GenerateObjectUploadLink(context context.Context, req *zos.GenerateObjectUploadLinkRequest, reqOpt ...config.RequestOption) (resp *zos.GenerateObjectUploadLinkResponse, rawResponse *protocol.Response, err error) {
	return defaultZosClient.GenerateObjectUploadLink(context, req, reqOpt...)
}

func GetKeys(context context.Context, req *zos.GetKeysRequest, reqOpt ...config.RequestOption) (resp *zos.GetKeysResponse, rawResponse *protocol.Response, err error) {
	return defaultZosClient.GetKeys(context, req, reqOpt...)
}

func ListBuckets(context context.Context, req *zos.ListBucketsRequest, reqOpt ...config.RequestOption) (resp *zos.ListBucketsResponse, rawResponse *protocol.Response, err error) {
	return defaultZosClient.ListBuckets(context, req, reqOpt...)
}

func GetBucket(context context.Context, req *zos.GetBucketRequest, reqOpt ...config.RequestOption) (resp *zos.GetBucketResponse, rawResponse *protocol.Response, err error) {
	return defaultZosClient.GetBucket(context, req, reqOpt...)
}

func GetBucketAcl(context context.Context, req *zos.GetBucketAclRequest, reqOpt ...config.RequestOption) (resp *zos.GetBucketAclResponse, rawResponse *protocol.Response, err error) {
	return defaultZosClient.GetBucketAcl(context, req, reqOpt...)
}

func PutBucketAcl(context context.Context, req *zos.PutBucketAclRequest, reqOpt ...config.RequestOption) (resp *zos.PutBucketAclResponse, rawResponse *protocol.Response, err error) {
	return defaultZosClient.PutBucketAcl(context, req, reqOpt...)
}

func PutBucketCors(context context.Context, req *zos.PutBucketCorsRequest, reqOpt ...config.RequestOption) (resp *zos.PutBucketCorsResponse, rawResponse *protocol.Response, err error) {
	return defaultZosClient.PutBucketCors(context, req, reqOpt...)
}
