// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package it

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	order "github.com/telecom-cloud/telecomcloud-sdk-go/service/it/types/order"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type OrderClient interface {
	PlaceOnDemandNewPurchaseOrder(context context.Context, req *order.PlaceOnDemandNewPurchaseOrderRequest, reqOpt ...config.RequestOption) (resp *order.PlaceOnDemandNewPurchaseOrderResponse, rawResponse *protocol.Response, err error)

	PlaceRefundOrder(context context.Context, req *order.PlaceRefundOrderRequest, reqOpt ...config.RequestOption) (resp *order.PlaceRefundOrderResponse, rawResponse *protocol.Response, err error)

	QueryResourceInfoByMasterOrderId(context context.Context, req *order.QueryResourceInfoByMasterOrderIdRequest, reqOpt ...config.RequestOption) (resp *order.QueryResourceInfoByMasterOrderIdResponse, rawResponse *protocol.Response, err error)

	QueryOrderDetail(context context.Context, req *order.QueryOrderDetailRequest, reqOpt ...config.RequestOption) (resp *order.QueryOrderDetailResponse, rawResponse *protocol.Response, err error)
}

type orderClient struct {
	client *HttpClient
}

func NewOrderClient(hostUrl string, ops ...Option) (OrderClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &orderClient{
		client: cli,
	}, nil
}

func (s *orderClient) PlaceOnDemandNewPurchaseOrder(ctx context.Context, req *order.PlaceOnDemandNewPurchaseOrderRequest, reqOpt ...config.RequestOption) (resp *order.PlaceOnDemandNewPurchaseOrderResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"Content-Type": "application/x-www-form-urlencoded",
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v3/order/placeOnDemandNewPurchaseOrder")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *orderClient) PlaceRefundOrder(ctx context.Context, req *order.PlaceRefundOrderRequest, reqOpt ...config.RequestOption) (resp *order.PlaceRefundOrderResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"Content-Type": "application/x-www-form-urlencoded",
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v3/order/placeRefundOrder")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *orderClient) QueryResourceInfoByMasterOrderId(ctx context.Context, req *order.QueryResourceInfoByMasterOrderIdRequest, reqOpt ...config.RequestOption) (resp *order.QueryResourceInfoByMasterOrderIdResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	resp = &order.QueryResourceInfoByMasterOrderIdResponse{
		ResourceInfo: make([]*order.ResourceInfo, 0),
	}
	openapiResp.ReturnObj = &resp.ResourceInfo

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"masterOrderId": req.GetMasterOrderId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v3/order/queryResourceInfoByMasterOrderId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *orderClient) QueryOrderDetail(ctx context.Context, req *order.QueryOrderDetailRequest, reqOpt ...config.RequestOption) (resp *order.QueryOrderDetailResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"masterOrderId": req.GetMasterOrderId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v3/order/queryOrderDetail")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultOrderClient, _ = NewOrderClient(baseDomain)

func ConfigDefaultOrderClient(ops ...Option) (err error) {
	defaultOrderClient, err = NewOrderClient(baseDomain, ops...)
	return
}

func PlaceOnDemandNewPurchaseOrder(context context.Context, req *order.PlaceOnDemandNewPurchaseOrderRequest, reqOpt ...config.RequestOption) (resp *order.PlaceOnDemandNewPurchaseOrderResponse, rawResponse *protocol.Response, err error) {
	return defaultOrderClient.PlaceOnDemandNewPurchaseOrder(context, req, reqOpt...)
}

func PlaceRefundOrder(context context.Context, req *order.PlaceRefundOrderRequest, reqOpt ...config.RequestOption) (resp *order.PlaceRefundOrderResponse, rawResponse *protocol.Response, err error) {
	return defaultOrderClient.PlaceRefundOrder(context, req, reqOpt...)
}

func QueryResourceInfoByMasterOrderId(context context.Context, req *order.QueryResourceInfoByMasterOrderIdRequest, reqOpt ...config.RequestOption) (resp *order.QueryResourceInfoByMasterOrderIdResponse, rawResponse *protocol.Response, err error) {
	return defaultOrderClient.QueryResourceInfoByMasterOrderId(context, req, reqOpt...)
}

func QueryOrderDetail(context context.Context, req *order.QueryOrderDetailRequest, reqOpt ...config.RequestOption) (resp *order.QueryOrderDetailResponse, rawResponse *protocol.Response, err error) {
	return defaultOrderClient.QueryOrderDetail(context, req, reqOpt...)
}
