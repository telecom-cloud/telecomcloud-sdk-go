// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: elb.proto

package elb

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateElbACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientToken string   `protobuf:"bytes,1,opt,name=clientToken,proto3" form:"clientToken" json:"clientToken,omitempty"`
	RegionID    string   `protobuf:"bytes,2,opt,name=regionID,proto3" form:"regionID" json:"regionID,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" form:"name" json:"name,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" form:"description" json:"description,omitempty"`
	SourceIps   []string `protobuf:"bytes,5,rep,name=sourceIps,proto3" form:"sourceIps" json:"sourceIps,omitempty"`
}

func (x *CreateElbACLRequest) Reset() {
	*x = CreateElbACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateElbACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateElbACLRequest) ProtoMessage() {}

func (x *CreateElbACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_elb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateElbACLRequest.ProtoReflect.Descriptor instead.
func (*CreateElbACLRequest) Descriptor() ([]byte, []int) {
	return file_elb_proto_rawDescGZIP(), []int{0}
}

func (x *CreateElbACLRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

func (x *CreateElbACLRequest) GetRegionID() string {
	if x != nil {
		return x.RegionID
	}
	return ""
}

func (x *CreateElbACLRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateElbACLRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateElbACLRequest) GetSourceIps() []string {
	if x != nil {
		return x.SourceIps
	}
	return nil
}

type CreateElbACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" form:"ID" json:"ID,omitempty" query:"ID"`
}

func (x *CreateElbACLResponse) Reset() {
	*x = CreateElbACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateElbACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateElbACLResponse) ProtoMessage() {}

func (x *CreateElbACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_elb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateElbACLResponse.ProtoReflect.Descriptor instead.
func (*CreateElbACLResponse) Descriptor() ([]byte, []int) {
	return file_elb_proto_rawDescGZIP(), []int{1}
}

func (x *CreateElbACLResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetElbACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionID        string `protobuf:"bytes,1,opt,name=regionID,proto3" json:"regionID,omitempty" query:"regionID"`
	Id              string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" query:"id"`
	AccessControlID string `protobuf:"bytes,3,opt,name=accessControlID,proto3" json:"accessControlID,omitempty" query:"accessControlID"`
}

func (x *GetElbACLRequest) Reset() {
	*x = GetElbACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetElbACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetElbACLRequest) ProtoMessage() {}

func (x *GetElbACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_elb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetElbACLRequest.ProtoReflect.Descriptor instead.
func (*GetElbACLRequest) Descriptor() ([]byte, []int) {
	return file_elb_proto_rawDescGZIP(), []int{2}
}

func (x *GetElbACLRequest) GetRegionID() string {
	if x != nil {
		return x.RegionID
	}
	return ""
}

func (x *GetElbACLRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetElbACLRequest) GetAccessControlID() string {
	if x != nil {
		return x.AccessControlID
	}
	return ""
}

type GetElbACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AzName      string   `protobuf:"bytes,1,opt,name=azName,proto3" form:"azName" json:"azName,omitempty" query:"azName"`
	ProjectID   string   `protobuf:"bytes,2,opt,name=projectID,proto3" form:"projectID" json:"projectID,omitempty" query:"projectID"`
	ID          string   `protobuf:"bytes,3,opt,name=ID,proto3" form:"ID" json:"ID,omitempty" query:"ID"`
	Name        string   `protobuf:"bytes,4,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Description string   `protobuf:"bytes,5,opt,name=description,proto3" form:"description" json:"description,omitempty" query:"description"`
	SourceIps   []string `protobuf:"bytes,6,rep,name=sourceIps,proto3" form:"sourceIps" json:"sourceIps,omitempty" query:"sourceIps"`
	CreateTime  string   `protobuf:"bytes,7,opt,name=createTime,proto3" form:"createTime" json:"createTime,omitempty" query:"createTime"`
}

func (x *GetElbACLResponse) Reset() {
	*x = GetElbACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetElbACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetElbACLResponse) ProtoMessage() {}

func (x *GetElbACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_elb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetElbACLResponse.ProtoReflect.Descriptor instead.
func (*GetElbACLResponse) Descriptor() ([]byte, []int) {
	return file_elb_proto_rawDescGZIP(), []int{3}
}

func (x *GetElbACLResponse) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *GetElbACLResponse) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetElbACLResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetElbACLResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetElbACLResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetElbACLResponse) GetSourceIps() []string {
	if x != nil {
		return x.SourceIps
	}
	return nil
}

func (x *GetElbACLResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

var File_elb_proto protoreflect.FileDescriptor

var file_elb_proto_rawDesc = []byte{
	0x0a, 0x09, 0x65, 0x6c, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x62, 0x41, 0x43, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x70, 0x73, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x73,
	0x22, 0x26, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x62, 0x41, 0x43, 0x4c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x45, 0x6c, 0x62, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xb2, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xbb, 0x18, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x44, 0x52, 0x0f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x44, 0x22, 0xcd,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x62, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x82,
	0x02, 0x0a, 0x0a, 0x45, 0x6c, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x62, 0x41, 0x63, 0x6c, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x62, 0x41,
	0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x62, 0x41, 0x43, 0x4c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0xd2, 0xc1, 0x18, 0x1d, 0x2f, 0x76, 0x34, 0x2f,
	0x65, 0x6c, 0x62, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x5f, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x45, 0x6c, 0x62, 0x41, 0x63, 0x6c, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6c, 0x62, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x62, 0x41, 0x43,
	0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0xca, 0xc1, 0x18, 0x1b, 0x2f,
	0x76, 0x34, 0x2f, 0x65, 0x6c, 0x62, 0x2f, 0x73, 0x68, 0x6f, 0x77, 0x2d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x27, 0x92, 0xce, 0x18, 0x23,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x74, 0x65, 0x6c, 0x62, 0x2d, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x74, 0x79, 0x75, 0x6e,
	0x2e, 0x63, 0x6e, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x64, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x6c, 0x62, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x65, 0x6c, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_elb_proto_rawDescOnce sync.Once
	file_elb_proto_rawDescData = file_elb_proto_rawDesc
)

func file_elb_proto_rawDescGZIP() []byte {
	file_elb_proto_rawDescOnce.Do(func() {
		file_elb_proto_rawDescData = protoimpl.X.CompressGZIP(file_elb_proto_rawDescData)
	})
	return file_elb_proto_rawDescData
}

var file_elb_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_elb_proto_goTypes = []interface{}{
	(*CreateElbACLRequest)(nil),  // 0: proto.CreateElbACLRequest
	(*CreateElbACLResponse)(nil), // 1: proto.CreateElbACLResponse
	(*GetElbACLRequest)(nil),     // 2: proto.GetElbACLRequest
	(*GetElbACLResponse)(nil),    // 3: proto.GetElbACLResponse
}
var file_elb_proto_depIdxs = []int32{
	0, // 0: proto.ElbService.CreateElbAcl:input_type -> proto.CreateElbACLRequest
	2, // 1: proto.ElbService.GetElbAcl:input_type -> proto.GetElbACLRequest
	1, // 2: proto.ElbService.CreateElbAcl:output_type -> proto.CreateElbACLResponse
	3, // 3: proto.ElbService.GetElbAcl:output_type -> proto.GetElbACLResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_elb_proto_init() }
func file_elb_proto_init() {
	if File_elb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_elb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateElbACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateElbACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetElbACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetElbACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_elb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_elb_proto_goTypes,
		DependencyIndexes: file_elb_proto_depIdxs,
		MessageInfos:      file_elb_proto_msgTypes,
	}.Build()
	File_elb_proto = out.File
	file_elb_proto_rawDesc = nil
	file_elb_proto_goTypes = nil
	file_elb_proto_depIdxs = nil
}
