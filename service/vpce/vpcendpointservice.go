// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package vpce

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	vpce "github.com/telecom-cloud/telecomcloud-sdk-go/service/vpce/types/vpce"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type VpcEndpointClient interface {
	CreateEndpoint(context context.Context, req *vpce.CreateEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.CreateEndpointResponse, rawResponse *protocol.Response, err error)

	DeleteEndpoint(context context.Context, req *vpce.DeleteEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.DeleteEndpointResponse, rawResponse *protocol.Response, err error)

	GetEndpoint(context context.Context, req *vpce.GetEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.GetEndpointResponse, rawResponse *protocol.Response, err error)

	ListEndpoint(context context.Context, req *vpce.ListEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.ListEndpointResponse, rawResponse *protocol.Response, err error)

	CreateEndpointWhitelist(context context.Context, req *vpce.CreateEndpointWhitelistRequest, reqOpt ...config.RequestOption) (resp *vpce.CreateEndpointWhitelistResponse, rawResponse *protocol.Response, err error)

	DeleteEndpointWhitelist(context context.Context, req *vpce.DeleteEndpointWhitelistRequest, reqOpt ...config.RequestOption) (resp *vpce.DeleteEndpointWhitelistResponse, rawResponse *protocol.Response, err error)

	ListEndpointWhitelist(context context.Context, req *vpce.ListEndpointWhitelistRequest, reqOpt ...config.RequestOption) (resp *vpce.ListEndpointWhitelistResponse, rawResponse *protocol.Response, err error)
}

type vpcEndpointClient struct {
	client *HttpClient
}

func NewVpcEndpointClient(hostUrl string, ops ...Option) (VpcEndpointClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &vpcEndpointClient{
		client: cli,
	}, nil
}

func (s *vpcEndpointClient) CreateEndpoint(ctx context.Context, req *vpce.CreateEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.CreateEndpointResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v4/paas/vpce/create-endpoint")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *vpcEndpointClient) DeleteEndpoint(ctx context.Context, req *vpce.DeleteEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.DeleteEndpointResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v4/paas/vpce/delete-endpoint")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *vpcEndpointClient) GetEndpoint(ctx context.Context, req *vpce.GetEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.GetEndpointResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"endpointID": req.GetEndpointID(),
		"regionID":   req.GetRegionID(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionID":   req.GetRegionID(),
			"customInfo": JsonMarshal(req.GetCustomInfo()),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v4/vpce/show-endpoint")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *vpcEndpointClient) ListEndpoint(ctx context.Context, req *vpce.ListEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.ListEndpointResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"regionID":     req.GetRegionID(),
		"endpointName": req.GetEndpointName(),
		"queryContent": req.GetQueryContent(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionID":   req.GetRegionID(),
			"customInfo": JsonMarshal(req.GetCustomInfo()),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v4/vpce/new-list-endpoint")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *vpcEndpointClient) CreateEndpointWhitelist(ctx context.Context, req *vpce.CreateEndpointWhitelistRequest, reqOpt ...config.RequestOption) (resp *vpce.CreateEndpointWhitelistResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v4/vpce/create-endpoint-service-whitelist")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *vpcEndpointClient) DeleteEndpointWhitelist(ctx context.Context, req *vpce.DeleteEndpointWhitelistRequest, reqOpt ...config.RequestOption) (resp *vpce.DeleteEndpointWhitelistResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v4/vpce/delete-endpoint-service-whitelist")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *vpcEndpointClient) ListEndpointWhitelist(ctx context.Context, req *vpce.ListEndpointWhitelistRequest, reqOpt ...config.RequestOption) (resp *vpce.ListEndpointWhitelistResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"regionID":          req.GetRegionID(),
		"endpointServiceID": req.GetEndpointServiceID(),
		"pageNo":            req.GetPageNo(),
		"pageSize":          req.GetPageSize(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v4/vpce/list-endpoint-service-whitelist")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultVpcEndpointClient, _ = NewVpcEndpointClient(baseDomain)

func ConfigDefaultVpcEndpointClient(ops ...Option) (err error) {
	defaultVpcEndpointClient, err = NewVpcEndpointClient(baseDomain, ops...)
	return
}

func CreateEndpoint(context context.Context, req *vpce.CreateEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.CreateEndpointResponse, rawResponse *protocol.Response, err error) {
	return defaultVpcEndpointClient.CreateEndpoint(context, req, reqOpt...)
}

func DeleteEndpoint(context context.Context, req *vpce.DeleteEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.DeleteEndpointResponse, rawResponse *protocol.Response, err error) {
	return defaultVpcEndpointClient.DeleteEndpoint(context, req, reqOpt...)
}

func GetEndpoint(context context.Context, req *vpce.GetEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.GetEndpointResponse, rawResponse *protocol.Response, err error) {
	return defaultVpcEndpointClient.GetEndpoint(context, req, reqOpt...)
}

func ListEndpoint(context context.Context, req *vpce.ListEndpointRequest, reqOpt ...config.RequestOption) (resp *vpce.ListEndpointResponse, rawResponse *protocol.Response, err error) {
	return defaultVpcEndpointClient.ListEndpoint(context, req, reqOpt...)
}

func CreateEndpointWhitelist(context context.Context, req *vpce.CreateEndpointWhitelistRequest, reqOpt ...config.RequestOption) (resp *vpce.CreateEndpointWhitelistResponse, rawResponse *protocol.Response, err error) {
	return defaultVpcEndpointClient.CreateEndpointWhitelist(context, req, reqOpt...)
}

func DeleteEndpointWhitelist(context context.Context, req *vpce.DeleteEndpointWhitelistRequest, reqOpt ...config.RequestOption) (resp *vpce.DeleteEndpointWhitelistResponse, rawResponse *protocol.Response, err error) {
	return defaultVpcEndpointClient.DeleteEndpointWhitelist(context, req, reqOpt...)
}

func ListEndpointWhitelist(context context.Context, req *vpce.ListEndpointWhitelistRequest, reqOpt ...config.RequestOption) (resp *vpce.ListEndpointWhitelistResponse, rawResponse *protocol.Response, err error) {
	return defaultVpcEndpointClient.ListEndpointWhitelist(context, req, reqOpt...)
}
