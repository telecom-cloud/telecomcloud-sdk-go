// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: ecs.proto

package ecs

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DiskType int32

const (
	DiskType_SATA     DiskType = 0
	DiskType_SAS      DiskType = 1
	DiskType_SSD      DiskType = 2
	DiskType_FAST_SSD DiskType = 3
)

// Enum value maps for DiskType.
var (
	DiskType_name = map[int32]string{
		0: "SATA",
		1: "SAS",
		2: "SSD",
		3: "FAST_SSD",
	}
	DiskType_value = map[string]int32{
		"SATA":     0,
		"SAS":      1,
		"SSD":      2,
		"FAST_SSD": 3,
	}
)

func (x DiskType) Enum() *DiskType {
	p := new(DiskType)
	*p = x
	return p
}

func (x DiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_ecs_proto_enumTypes[0].Descriptor()
}

func (DiskType) Type() protoreflect.EnumType {
	return &file_ecs_proto_enumTypes[0]
}

func (x DiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskType.Descriptor instead.
func (DiskType) EnumDescriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{0}
}

type InstanceStatus int32

const (
	// 备份中
	InstanceStatus_backuping InstanceStatus = 0
	// 创建中
	InstanceStatus_creating InstanceStatus = 1
	// 已到期
	InstanceStatus_expired InstanceStatus = 2
	// 已冻结
	InstanceStatus_freezing InstanceStatus = 3
	// 重装
	InstanceStatus_rebuild InstanceStatus = 4
	// 重启中
	InstanceStatus_restarting InstanceStatus = 5
	// 运行中
	InstanceStatus_running InstanceStatus = 6
	// 开机中
	InstanceStatus_starting InstanceStatus = 7
	// 已关机
	InstanceStatus_stopped InstanceStatus = 8
	// 关机中
	InstanceStatus_stopping InstanceStatus = 9
	// 错误
	InstanceStatus_error InstanceStatus = 10
	// 快照创建中
	InstanceStatus_snapshotting InstanceStatus = 11
	// 包周期已退订
	InstanceStatus_unsubscribed InstanceStatus = 12
	// 包周期退订中
	InstanceStatus_unsubscribing InstanceStatus = 13
)

// Enum value maps for InstanceStatus.
var (
	InstanceStatus_name = map[int32]string{
		0:  "backuping",
		1:  "creating",
		2:  "expired",
		3:  "freezing",
		4:  "rebuild",
		5:  "restarting",
		6:  "running",
		7:  "starting",
		8:  "stopped",
		9:  "stopping",
		10: "error",
		11: "snapshotting",
		12: "unsubscribed",
		13: "unsubscribing",
	}
	InstanceStatus_value = map[string]int32{
		"backuping":     0,
		"creating":      1,
		"expired":       2,
		"freezing":      3,
		"rebuild":       4,
		"restarting":    5,
		"running":       6,
		"starting":      7,
		"stopped":       8,
		"stopping":      9,
		"error":         10,
		"snapshotting":  11,
		"unsubscribed":  12,
		"unsubscribing": 13,
	}
)

func (x InstanceStatus) Enum() *InstanceStatus {
	p := new(InstanceStatus)
	*p = x
	return p
}

func (x InstanceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ecs_proto_enumTypes[1].Descriptor()
}

func (InstanceStatus) Type() protoreflect.EnumType {
	return &file_ecs_proto_enumTypes[1]
}

func (x InstanceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceStatus.Descriptor instead.
func (InstanceStatus) EnumDescriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{1}
}

type CreateInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientToken         string         `protobuf:"bytes,1,opt,name=clientToken,proto3" form:"clientToken" json:"clientToken,omitempty"`
	RegionID            string         `protobuf:"bytes,2,opt,name=regionID,proto3" form:"regionID" json:"regionID,omitempty"`
	AzName              string         `protobuf:"bytes,3,opt,name=azName,proto3" form:"azName" json:"azName,omitempty"`
	InstanceName        string         `protobuf:"bytes,4,opt,name=instanceName,proto3" form:"instanceName" json:"instanceName,omitempty"`
	DisplayName         string         `protobuf:"bytes,5,opt,name=displayName,proto3" form:"displayName" json:"displayName,omitempty"`
	FlavorID            string         `protobuf:"bytes,6,opt,name=flavorID,proto3" form:"flavorID" json:"flavorID,omitempty"`
	ImageType           int32          `protobuf:"varint,7,opt,name=imageType,proto3" form:"imageType" json:"imageType,omitempty"`
	ImageID             string         `protobuf:"bytes,8,opt,name=imageID,proto3" form:"imageID" json:"imageID,omitempty"`
	BootDiskType        DiskType       `protobuf:"varint,9,opt,name=bootDiskType,proto3,enum=proto.DiskType" form:"bootDistType" json:"bootDistType,omitempty"`
	BootDiskSize        int32          `protobuf:"varint,10,opt,name=bootDiskSize,proto3" form:"bootDistSize" json:"bootDistSize,omitempty"`
	BootDiskIsEncrypt   bool           `protobuf:"varint,11,opt,name=bootDiskIsEncrypt,proto3" form:"bootDiskIsEncrypt" json:"bootDiskIsEncrypt,omitempty"`
	BootDiskCmkID       string         `protobuf:"bytes,12,opt,name=bootDiskCmkID,proto3" form:"bootDiskCmkID" json:"bootDiskCmkID,omitempty"`
	VpcID               string         `protobuf:"bytes,13,opt,name=vpcID,proto3" form:"vpcID" json:"vpcID,omitempty"`
	OnDemand            bool           `protobuf:"varint,14,opt,name=onDemand,proto3" form:"onDemand" json:"onDemand,omitempty"`
	NetworkCardList     []*NetworkCard `protobuf:"bytes,15,rep,name=networkCardList,proto3" form:"networkCardList" json:"networkCardList,omitempty"`
	ExtIP               string         `protobuf:"bytes,16,opt,name=extIP,proto3" form:"extIP" json:"extIP,omitempty"`
	ProjectID           string         `protobuf:"bytes,17,opt,name=projectID,proto3" form:"projectID" json:"projectID,omitempty"`
	SecGroupList        []string       `protobuf:"bytes,18,rep,name=secGroupList,proto3" form:"secGroupList" json:"secGroupList,omitempty"`
	DataDiskList        []*DataDisk    `protobuf:"bytes,19,rep,name=dataDiskList,proto3" form:"dataDiskList" json:"dataDiskList,omitempty"`
	IpVersion           string         `protobuf:"bytes,20,opt,name=ipVersion,proto3" form:"ipVersion" json:"ipVersion,omitempty"`
	BandWidth           int32          `protobuf:"varint,21,opt,name=bandWidth,proto3" form:"bandWidth" json:"bandWidth,omitempty"`
	Ipv6AddressID       string         `protobuf:"bytes,22,opt,name=ipv6AddressID,proto3" form:"ipv6AddressID" json:"ipv6AddressID,omitempty"`
	EipID               string         `protobuf:"bytes,23,opt,name=eipID,proto3" form:"eipID" json:"eipID,omitempty"`
	AffinityGroupID     string         `protobuf:"bytes,24,opt,name=affinityGroupID,proto3" form:"affinityGroupID" json:"affinityGroupID,omitempty"`
	KeyPairID           string         `protobuf:"bytes,25,opt,name=keyPairID,proto3" form:"keyPairID" json:"keyPairID,omitempty"`
	UserPassword        string         `protobuf:"bytes,26,opt,name=userPassword,proto3" form:"userPassword" json:"userPassword,omitempty"`
	CycleType           int32          `protobuf:"varint,27,opt,name=cycleType,proto3" form:"cycleType" json:"cycleType,omitempty"`
	AutoRenewStatus     int32          `protobuf:"varint,28,opt,name=autoRenewStatus,proto3" form:"autoRenewStatus" json:"autoRenewStatus,omitempty"`
	UserData            string         `protobuf:"bytes,29,opt,name=userData,proto3" form:"userData" json:"userData,omitempty"`
	PayVoucherPrice     float32        `protobuf:"fixed32,30,opt,name=payVoucherPrice,proto3" form:"payVoucherPrice" json:"payVoucherPrice,omitempty"`
	LabelList           []*Label       `protobuf:"bytes,31,rep,name=labelList,proto3" form:"labelList" json:"labelList,omitempty"`
	GpuDriverKits       string         `protobuf:"bytes,32,opt,name=gpuDriverKits,proto3" form:"gpuDriverKits" json:"gpuDriverKits,omitempty"`
	MonitorService      bool           `protobuf:"varint,33,opt,name=monitorService,proto3" form:"monitorService" json:"monitorService,omitempty"`
	InstanceDescription string         `protobuf:"bytes,34,opt,name=instanceDescription,proto3" form:"instanceDescription" json:"instanceDescription,omitempty"`
	LineType            string         `protobuf:"bytes,35,opt,name=lineType,proto3" form:"lineType" json:"lineType,omitempty"`
	SecurityProduct     string         `protobuf:"bytes,36,opt,name=securityProduct,proto3" form:"securityProduct" json:"securityProduct,omitempty"`
}

func (x *CreateInstanceRequest) Reset() {
	*x = CreateInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceRequest) ProtoMessage() {}

func (x *CreateInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceRequest) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{0}
}

func (x *CreateInstanceRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

func (x *CreateInstanceRequest) GetRegionID() string {
	if x != nil {
		return x.RegionID
	}
	return ""
}

func (x *CreateInstanceRequest) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *CreateInstanceRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *CreateInstanceRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateInstanceRequest) GetFlavorID() string {
	if x != nil {
		return x.FlavorID
	}
	return ""
}

func (x *CreateInstanceRequest) GetImageType() int32 {
	if x != nil {
		return x.ImageType
	}
	return 0
}

func (x *CreateInstanceRequest) GetImageID() string {
	if x != nil {
		return x.ImageID
	}
	return ""
}

func (x *CreateInstanceRequest) GetBootDiskType() DiskType {
	if x != nil {
		return x.BootDiskType
	}
	return DiskType_SATA
}

func (x *CreateInstanceRequest) GetBootDiskSize() int32 {
	if x != nil {
		return x.BootDiskSize
	}
	return 0
}

func (x *CreateInstanceRequest) GetBootDiskIsEncrypt() bool {
	if x != nil {
		return x.BootDiskIsEncrypt
	}
	return false
}

func (x *CreateInstanceRequest) GetBootDiskCmkID() string {
	if x != nil {
		return x.BootDiskCmkID
	}
	return ""
}

func (x *CreateInstanceRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *CreateInstanceRequest) GetOnDemand() bool {
	if x != nil {
		return x.OnDemand
	}
	return false
}

func (x *CreateInstanceRequest) GetNetworkCardList() []*NetworkCard {
	if x != nil {
		return x.NetworkCardList
	}
	return nil
}

func (x *CreateInstanceRequest) GetExtIP() string {
	if x != nil {
		return x.ExtIP
	}
	return ""
}

func (x *CreateInstanceRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateInstanceRequest) GetSecGroupList() []string {
	if x != nil {
		return x.SecGroupList
	}
	return nil
}

func (x *CreateInstanceRequest) GetDataDiskList() []*DataDisk {
	if x != nil {
		return x.DataDiskList
	}
	return nil
}

func (x *CreateInstanceRequest) GetIpVersion() string {
	if x != nil {
		return x.IpVersion
	}
	return ""
}

func (x *CreateInstanceRequest) GetBandWidth() int32 {
	if x != nil {
		return x.BandWidth
	}
	return 0
}

func (x *CreateInstanceRequest) GetIpv6AddressID() string {
	if x != nil {
		return x.Ipv6AddressID
	}
	return ""
}

func (x *CreateInstanceRequest) GetEipID() string {
	if x != nil {
		return x.EipID
	}
	return ""
}

func (x *CreateInstanceRequest) GetAffinityGroupID() string {
	if x != nil {
		return x.AffinityGroupID
	}
	return ""
}

func (x *CreateInstanceRequest) GetKeyPairID() string {
	if x != nil {
		return x.KeyPairID
	}
	return ""
}

func (x *CreateInstanceRequest) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *CreateInstanceRequest) GetCycleType() int32 {
	if x != nil {
		return x.CycleType
	}
	return 0
}

func (x *CreateInstanceRequest) GetAutoRenewStatus() int32 {
	if x != nil {
		return x.AutoRenewStatus
	}
	return 0
}

func (x *CreateInstanceRequest) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *CreateInstanceRequest) GetPayVoucherPrice() float32 {
	if x != nil {
		return x.PayVoucherPrice
	}
	return 0
}

func (x *CreateInstanceRequest) GetLabelList() []*Label {
	if x != nil {
		return x.LabelList
	}
	return nil
}

func (x *CreateInstanceRequest) GetGpuDriverKits() string {
	if x != nil {
		return x.GpuDriverKits
	}
	return ""
}

func (x *CreateInstanceRequest) GetMonitorService() bool {
	if x != nil {
		return x.MonitorService
	}
	return false
}

func (x *CreateInstanceRequest) GetInstanceDescription() string {
	if x != nil {
		return x.InstanceDescription
	}
	return ""
}

func (x *CreateInstanceRequest) GetLineType() string {
	if x != nil {
		return x.LineType
	}
	return ""
}

func (x *CreateInstanceRequest) GetSecurityProduct() string {
	if x != nil {
		return x.SecurityProduct
	}
	return ""
}

type DataDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskMode  string   `protobuf:"bytes,1,opt,name=diskMode,proto3" form:"diskMode" json:"diskMode,omitempty" query:"diskMode"`
	DiskType  DiskType `protobuf:"varint,2,opt,name=diskType,proto3,enum=proto.DiskType" form:"diskType" json:"diskType,omitempty" query:"diskType"`
	DiskSize  int32    `protobuf:"varint,3,opt,name=diskSize,proto3" form:"diskSize" json:"diskSize,omitempty" query:"diskSize"`
	IsEncrypt bool     `protobuf:"varint,4,opt,name=isEncrypt,proto3" form:"isEncrypt" json:"isEncrypt,omitempty" query:"isEncrypt"`
	CmkID     string   `protobuf:"bytes,5,opt,name=cmkID,proto3" form:"cmkID" json:"cmkID,omitempty" query:"cmkID"`
	DiskName  string   `protobuf:"bytes,6,opt,name=diskName,proto3" form:"diskName" json:"diskName,omitempty" query:"diskName"`
}

func (x *DataDisk) Reset() {
	*x = DataDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDisk) ProtoMessage() {}

func (x *DataDisk) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDisk.ProtoReflect.Descriptor instead.
func (*DataDisk) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{1}
}

func (x *DataDisk) GetDiskMode() string {
	if x != nil {
		return x.DiskMode
	}
	return ""
}

func (x *DataDisk) GetDiskType() DiskType {
	if x != nil {
		return x.DiskType
	}
	return DiskType_SATA
}

func (x *DataDisk) GetDiskSize() int32 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *DataDisk) GetIsEncrypt() bool {
	if x != nil {
		return x.IsEncrypt
	}
	return false
}

func (x *DataDisk) GetCmkID() string {
	if x != nil {
		return x.CmkID
	}
	return ""
}

func (x *DataDisk) GetDiskName() string {
	if x != nil {
		return x.DiskName
	}
	return ""
}

type CreateInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterOrderID    string `protobuf:"bytes,1,opt,name=masterOrderID,proto3" form:"masterOrderID" json:"masterOrderID,omitempty" query:"masterOrderID"`
	MasterOrderNO    string `protobuf:"bytes,2,opt,name=masterOrderNO,proto3" form:"masterOrderNO" json:"masterOrderNO,omitempty" query:"masterOrderNO"`
	MasterResourceID string `protobuf:"bytes,3,opt,name=masterResourceID,proto3" form:"masterResourceID" json:"masterResourceID,omitempty" query:"masterResourceID"`
	RegionID         string `protobuf:"bytes,4,opt,name=regionID,proto3" form:"regionID" json:"regionID,omitempty" query:"regionID"`
}

func (x *CreateInstanceResponse) Reset() {
	*x = CreateInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceResponse) ProtoMessage() {}

func (x *CreateInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateInstanceResponse) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{2}
}

func (x *CreateInstanceResponse) GetMasterOrderID() string {
	if x != nil {
		return x.MasterOrderID
	}
	return ""
}

func (x *CreateInstanceResponse) GetMasterOrderNO() string {
	if x != nil {
		return x.MasterOrderNO
	}
	return ""
}

func (x *CreateInstanceResponse) GetMasterResourceID() string {
	if x != nil {
		return x.MasterResourceID
	}
	return ""
}

func (x *CreateInstanceResponse) GetRegionID() string {
	if x != nil {
		return x.RegionID
	}
	return ""
}

type ListInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionID        string   `protobuf:"bytes,1,opt,name=regionID,proto3" form:"regionID" json:"regionID,omitempty"`
	AzName          string   `protobuf:"bytes,2,opt,name=azName,proto3" form:"azName" json:"azName,omitempty"`
	ProjectID       string   `protobuf:"bytes,3,opt,name=projectID,proto3" form:"projectID" json:"projectID,omitempty"`
	PageNo          int32    `protobuf:"varint,4,opt,name=pageNo,proto3" form:"pageNo" json:"pageNo,omitempty"`
	PageSize        int32    `protobuf:"varint,5,opt,name=pageSize,proto3" form:"pageSize" json:"pageSize,omitempty"`
	State           string   `protobuf:"bytes,6,opt,name=state,proto3" form:"state" json:"state,omitempty"`
	Keyword         string   `protobuf:"bytes,7,opt,name=keyword,proto3" form:"keyword" json:"keyword,omitempty"`
	InstanceName    string   `protobuf:"bytes,8,opt,name=instanceName,proto3" form:"instanceName" json:"instanceName,omitempty"`
	InstanceIDList  string   `protobuf:"bytes,9,opt,name=instanceIDList,proto3" form:"instanceIDList" json:"instanceIDList,omitempty"`
	SecurityGroupID string   `protobuf:"bytes,10,opt,name=securityGroupID,proto3" form:"securityGroupID" json:"securityGroupID,omitempty"`
	VpcID           string   `protobuf:"bytes,11,opt,name=vpcID,proto3" form:"vpcID" json:"vpcID,omitempty"`
	ResourceID      string   `protobuf:"bytes,12,opt,name=resourceID,proto3" form:"resourceID" json:"resourceID,omitempty"`
	LabelList       []*Label `protobuf:"bytes,13,rep,name=labelList,proto3" form:"labelList" json:"labelList,omitempty"`
	Sort            string   `protobuf:"bytes,14,opt,name=sort,proto3" form:"sort" json:"sort,omitempty"`
	Asc             bool     `protobuf:"varint,15,opt,name=asc,proto3" form:"asc" json:"asc,omitempty"`
}

func (x *ListInstanceRequest) Reset() {
	*x = ListInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceRequest) ProtoMessage() {}

func (x *ListInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceRequest) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{3}
}

func (x *ListInstanceRequest) GetRegionID() string {
	if x != nil {
		return x.RegionID
	}
	return ""
}

func (x *ListInstanceRequest) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *ListInstanceRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListInstanceRequest) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListInstanceRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInstanceRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ListInstanceRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListInstanceRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *ListInstanceRequest) GetInstanceIDList() string {
	if x != nil {
		return x.InstanceIDList
	}
	return ""
}

func (x *ListInstanceRequest) GetSecurityGroupID() string {
	if x != nil {
		return x.SecurityGroupID
	}
	return ""
}

func (x *ListInstanceRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListInstanceRequest) GetResourceID() string {
	if x != nil {
		return x.ResourceID
	}
	return ""
}

func (x *ListInstanceRequest) GetLabelList() []*Label {
	if x != nil {
		return x.LabelList
	}
	return nil
}

func (x *ListInstanceRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListInstanceRequest) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelKey   string `protobuf:"bytes,1,opt,name=labelKey,proto3" form:"labelKey" json:"labelKey,omitempty"`
	LabelValue string `protobuf:"bytes,2,opt,name=labelValue,proto3" form:"labelValue" json:"labelValue,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{4}
}

func (x *Label) GetLabelKey() string {
	if x != nil {
		return x.LabelKey
	}
	return ""
}

func (x *Label) GetLabelValue() string {
	if x != nil {
		return x.LabelValue
	}
	return ""
}

type ListInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentCount int32     `protobuf:"varint,1,opt,name=currentCount,proto3" form:"currentCount" json:"currentCount,omitempty" query:"currentCount"`
	TotalCount   int32     `protobuf:"varint,2,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
	TotalPage    int32     `protobuf:"varint,3,opt,name=totalPage,proto3" form:"totalPage" json:"totalPage,omitempty" query:"totalPage"`
	Results      []*Result `protobuf:"bytes,4,rep,name=results,proto3" form:"results" json:"results,omitempty" query:"results"`
}

func (x *ListInstanceResponse) Reset() {
	*x = ListInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceResponse) ProtoMessage() {}

func (x *ListInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceResponse) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{5}
}

func (x *ListInstanceResponse) GetCurrentCount() int32 {
	if x != nil {
		return x.CurrentCount
	}
	return 0
}

func (x *ListInstanceResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListInstanceResponse) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *ListInstanceResponse) GetResults() []*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID       string         `protobuf:"bytes,1,opt,name=projectID,proto3" form:"projectID" json:"projectID,omitempty" query:"projectID"`
	AzName          string         `protobuf:"bytes,2,opt,name=azName,proto3" form:"azName" json:"azName,omitempty" query:"azName"`
	AttachedVolume  []string       `protobuf:"bytes,4,rep,name=attachedVolume,proto3" form:"attachedVolume" json:"attachedVolume,omitempty" query:"attachedVolume"`
	Addresses       []*Address     `protobuf:"bytes,5,rep,name=addresses,proto3" form:"addresses" json:"addresses,omitempty" query:"addresses"`
	ResourceID      string         `protobuf:"bytes,6,opt,name=resourceID,proto3" form:"resourceID" json:"resourceID,omitempty" query:"resourceID"`
	InstanceID      string         `protobuf:"bytes,7,opt,name=instanceID,proto3" form:"instanceID" json:"instanceID,omitempty" query:"instanceID"`
	DisplayName     string         `protobuf:"bytes,8,opt,name=displayName,proto3" form:"displayName" json:"displayName,omitempty" query:"displayName"`
	InstanceName    string         `protobuf:"bytes,9,opt,name=instanceName,proto3" form:"instanceName" json:"instanceName,omitempty" query:"instanceName"`
	OsType          int32          `protobuf:"varint,10,opt,name=osType,proto3" form:"osType" json:"osType,omitempty" query:"osType"`
	InstanceStatus  InstanceStatus `protobuf:"varint,11,opt,name=instanceStatus,proto3,enum=proto.InstanceStatus" form:"instanceStatus" json:"instanceStatus,omitempty" query:"instanceStatus"`
	ExpiredTime     string         `protobuf:"bytes,12,opt,name=expiredTime,proto3" form:"expiredTime" json:"expiredTime,omitempty" query:"expiredTime"`
	AvailableDay    int32          `protobuf:"varint,13,opt,name=availableDay,proto3" form:"availableDay" json:"availableDay,omitempty" query:"availableDay"`
	UpdatedTime     string         `protobuf:"bytes,14,opt,name=updatedTime,proto3" form:"updatedTime" json:"updatedTime,omitempty" query:"updatedTime"`
	CreatedTime     string         `protobuf:"bytes,15,opt,name=createdTime,proto3" form:"createdTime" json:"createdTime,omitempty" query:"createdTime"`
	ZabbixName      string         `protobuf:"bytes,16,opt,name=zabbixName,proto3" form:"zabbixName" json:"zabbixName,omitempty" query:"zabbixName"`
	SecGroupList    []*SecGroup    `protobuf:"bytes,17,rep,name=secGroupList,proto3" form:"secGroupList" json:"secGroupList,omitempty" query:"secGroupList"`
	PrivateIP       string         `protobuf:"bytes,18,opt,name=privateIP,proto3" form:"privateIP" json:"privateIP,omitempty" query:"privateIP"`
	PrivateIPv6     string         `protobuf:"bytes,19,opt,name=privateIPv6,proto3" form:"privateIPv6" json:"privateIPv6,omitempty" query:"privateIPv6"`
	NetworkCardList []*NetworkCard `protobuf:"bytes,20,rep,name=networkCardList,proto3" form:"networkCardList" json:"networkCardList,omitempty" query:"networkCardList"`
	VipInfoList     []*VipInfo     `protobuf:"bytes,21,rep,name=vipInfoList,proto3" form:"vipInfoList" json:"vipInfoList,omitempty" query:"vipInfoList"`
	VipCount        int32          `protobuf:"varint,22,opt,name=vipCount,proto3" form:"vipCount" json:"vipCount,omitempty" query:"vipCount"`
	AffinityGroup   *AffinityGroup `protobuf:"bytes,23,opt,name=affinityGroup,proto3" form:"affinityGroup" json:"affinityGroup,omitempty" query:"affinityGroup"`
	Image           *Image         `protobuf:"bytes,24,opt,name=image,proto3" form:"image" json:"image,omitempty" query:"image"`
	Flavor          *Flavor        `protobuf:"bytes,25,opt,name=flavor,proto3" form:"flavor" json:"flavor,omitempty" query:"flavor"`
	OnDemand        bool           `protobuf:"varint,26,opt,name=onDemand,proto3" form:"onDemand" json:"onDemand,omitempty" query:"onDemand"`
	VpcName         string         `protobuf:"bytes,27,opt,name=vpcName,proto3" form:"vpcName" json:"vpcName,omitempty" query:"vpcName"`
	VpcID           string         `protobuf:"bytes,28,opt,name=vpcID,proto3" form:"vpcID" json:"vpcID,omitempty" query:"vpcID"`
	FixedIPList     []string       `protobuf:"bytes,29,rep,name=fixedIPList,proto3" form:"fixedIPList" json:"fixedIPList,omitempty" query:"fixedIPList"`
	FloatingIP      string         `protobuf:"bytes,30,opt,name=floatingIP,proto3" form:"floatingIP" json:"floatingIP,omitempty" query:"floatingIP"`
	SubnetIDList    []string       `protobuf:"bytes,31,rep,name=subnetIDList,proto3" form:"subnetIDList" json:"subnetIDList,omitempty" query:"subnetIDList"`
	KeypairName     string         `protobuf:"bytes,32,opt,name=keypairName,proto3" form:"keypairName" json:"keypairName,omitempty" query:"keypairName"`
	// 委托名称，注：委托绑定目前仅支持多可用区类型资源池，非可用区资源池为空字符串
	DelegateName string `protobuf:"bytes,33,opt,name=delegateName,proto3" form:"delegateName" json:"delegateName,omitempty" query:"delegateName"`
	// 是否开启删除保护
	DeletionProtection bool `protobuf:"varint,34,opt,name=deletionProtection,proto3" form:"deletionProtection" json:"deletionProtection,omitempty" query:"deletionProtection"`
	// 距离释放时间剩余天数
	RemainingDay int32 `protobuf:"varint,35,opt,name=remainingDay,proto3" form:"remainingDay" json:"remainingDay,omitempty" query:"remainingDay"`
	// 释放时间
	ReleaseTime string `protobuf:"bytes,36,opt,name=releaseTime,proto3" form:"releaseTime" json:"releaseTime,omitempty" query:"releaseTime"`
	// 云主机描述信息
	InstanceDescription string `protobuf:"bytes,37,opt,name=instanceDescription,proto3" form:"instanceDescription" json:"instanceDescription,omitempty" query:"instanceDescription"`
	// 用户自定义元数据，注：仅多可用区类型资源池支持返回，非可用区资源池请调用查询元数据接口
	Metadata map[string]string `protobuf:"bytes,38,rep,name=metadata,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" form:"metadata" json:"metadata,omitempty" query:"metadata"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{6}
}

func (x *Result) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *Result) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *Result) GetAttachedVolume() []string {
	if x != nil {
		return x.AttachedVolume
	}
	return nil
}

func (x *Result) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Result) GetResourceID() string {
	if x != nil {
		return x.ResourceID
	}
	return ""
}

func (x *Result) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *Result) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Result) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *Result) GetOsType() int32 {
	if x != nil {
		return x.OsType
	}
	return 0
}

func (x *Result) GetInstanceStatus() InstanceStatus {
	if x != nil {
		return x.InstanceStatus
	}
	return InstanceStatus_backuping
}

func (x *Result) GetExpiredTime() string {
	if x != nil {
		return x.ExpiredTime
	}
	return ""
}

func (x *Result) GetAvailableDay() int32 {
	if x != nil {
		return x.AvailableDay
	}
	return 0
}

func (x *Result) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Result) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *Result) GetZabbixName() string {
	if x != nil {
		return x.ZabbixName
	}
	return ""
}

func (x *Result) GetSecGroupList() []*SecGroup {
	if x != nil {
		return x.SecGroupList
	}
	return nil
}

func (x *Result) GetPrivateIP() string {
	if x != nil {
		return x.PrivateIP
	}
	return ""
}

func (x *Result) GetPrivateIPv6() string {
	if x != nil {
		return x.PrivateIPv6
	}
	return ""
}

func (x *Result) GetNetworkCardList() []*NetworkCard {
	if x != nil {
		return x.NetworkCardList
	}
	return nil
}

func (x *Result) GetVipInfoList() []*VipInfo {
	if x != nil {
		return x.VipInfoList
	}
	return nil
}

func (x *Result) GetVipCount() int32 {
	if x != nil {
		return x.VipCount
	}
	return 0
}

func (x *Result) GetAffinityGroup() *AffinityGroup {
	if x != nil {
		return x.AffinityGroup
	}
	return nil
}

func (x *Result) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Result) GetFlavor() *Flavor {
	if x != nil {
		return x.Flavor
	}
	return nil
}

func (x *Result) GetOnDemand() bool {
	if x != nil {
		return x.OnDemand
	}
	return false
}

func (x *Result) GetVpcName() string {
	if x != nil {
		return x.VpcName
	}
	return ""
}

func (x *Result) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *Result) GetFixedIPList() []string {
	if x != nil {
		return x.FixedIPList
	}
	return nil
}

func (x *Result) GetFloatingIP() string {
	if x != nil {
		return x.FloatingIP
	}
	return ""
}

func (x *Result) GetSubnetIDList() []string {
	if x != nil {
		return x.SubnetIDList
	}
	return nil
}

func (x *Result) GetKeypairName() string {
	if x != nil {
		return x.KeypairName
	}
	return ""
}

func (x *Result) GetDelegateName() string {
	if x != nil {
		return x.DelegateName
	}
	return ""
}

func (x *Result) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *Result) GetRemainingDay() int32 {
	if x != nil {
		return x.RemainingDay
	}
	return 0
}

func (x *Result) GetReleaseTime() string {
	if x != nil {
		return x.ReleaseTime
	}
	return ""
}

func (x *Result) GetInstanceDescription() string {
	if x != nil {
		return x.InstanceDescription
	}
	return ""
}

func (x *Result) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 网络地址信息
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpcName string `protobuf:"bytes,1,opt,name=vpcName,proto3" form:"vpcName" json:"vpcName,omitempty" query:"vpcName"`
	// 网络地址列表
	AddressList []*AddressInfo `protobuf:"bytes,2,rep,name=addressList,proto3" form:"addressList" json:"addressList,omitempty" query:"addressList"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{7}
}

func (x *Address) GetVpcName() string {
	if x != nil {
		return x.VpcName
	}
	return ""
}

func (x *Address) GetAddressList() []*AddressInfo {
	if x != nil {
		return x.AddressList
	}
	return nil
}

type AddressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr       string `protobuf:"bytes,1,opt,name=addr,proto3" form:"addr" json:"addr,omitempty" query:"addr"`
	Version    int32  `protobuf:"varint,2,opt,name=version,proto3" form:"version" json:"version,omitempty" query:"version"`
	Type       string `protobuf:"bytes,3,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	IsMaster   bool   `protobuf:"varint,4,opt,name=isMaster,proto3" form:"isMaster" json:"isMaster,omitempty" query:"isMaster"`
	MacAddress string `protobuf:"bytes,5,opt,name=macAddress,proto3" form:"macAddress" json:"macAddress,omitempty" query:"macAddress"`
}

func (x *AddressInfo) Reset() {
	*x = AddressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressInfo) ProtoMessage() {}

func (x *AddressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressInfo.ProtoReflect.Descriptor instead.
func (*AddressInfo) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{8}
}

func (x *AddressInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *AddressInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AddressInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddressInfo) GetIsMaster() bool {
	if x != nil {
		return x.IsMaster
	}
	return false
}

func (x *AddressInfo) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

// 安全组信息
type SecGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroupID   string `protobuf:"bytes,1,opt,name=securityGroupID,proto3" form:"securityGroupID" json:"securityGroupID,omitempty" query:"securityGroupID"`
	SecurityGroupName string `protobuf:"bytes,2,opt,name=securityGroupName,proto3" form:"securityGroupName" json:"securityGroupName,omitempty" query:"securityGroupName"`
}

func (x *SecGroup) Reset() {
	*x = SecGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecGroup) ProtoMessage() {}

func (x *SecGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecGroup.ProtoReflect.Descriptor instead.
func (*SecGroup) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{9}
}

func (x *SecGroup) GetSecurityGroupID() string {
	if x != nil {
		return x.SecurityGroupID
	}
	return ""
}

func (x *SecGroup) GetSecurityGroupName() string {
	if x != nil {
		return x.SecurityGroupName
	}
	return ""
}

// 网卡信息
type NetworkCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4地址
	IPv4Address string `protobuf:"bytes,1,opt,name=IPv4Address,proto3" form:"IPv4Address" json:"IPv4Address,omitempty" query:"IPv4Address"`
	// IPv6地址信息
	IPv6Address []string `protobuf:"bytes,2,rep,name=IPv6Address,proto3" form:"IPv6Address" json:"IPv6Address,omitempty" query:"IPv6Address"`
	// 子网ID
	SubnetID string `protobuf:"bytes,3,opt,name=subnetID,proto3" form:"subnetID" json:"subnetID,omitempty" query:"subnetID"`
	// 子网网段信息
	SubnetCidr string `protobuf:"bytes,4,opt,name=subnetCidr,proto3" form:"subnetCidr" json:"subnetCidr,omitempty" query:"subnetCidr"`
	// 是否主网卡
	IsMaster bool `protobuf:"varint,5,opt,name=isMaster,proto3" form:"isMaster" json:"isMaster,omitempty" query:"isMaster"`
	// 网关地址
	Gateway string `protobuf:"bytes,6,opt,name=gateway,proto3" form:"gateway" json:"gateway,omitempty" query:"gateway"`
	// 网卡ID
	NetworkCardID string `protobuf:"bytes,7,opt,name=networkCardID,proto3" form:"networkCardID" json:"networkCardID,omitempty" query:"networkCardID"`
	// 安全组ID列表
	SecurityGroup []string `protobuf:"bytes,8,rep,name=securityGroup,proto3" form:"securityGroup" json:"securityGroup,omitempty" query:"securityGroup"`
	// 内网IPv4地址，注：不可使用已占用IP
	FixedIP string `protobuf:"bytes,9,opt,name=fixedIP,proto3" form:"fixedIP" json:"fixedIP,omitempty" query:"fixedIP"`
	// 该参数暂时无法使用。网卡名称，长度2~32，支持拉丁字母、中文、数字、下划线、连字符，中文或英文字母开头，不能以http:或https:开头
	NicName string `protobuf:"bytes,10,opt,name=nicName,proto3" form:"nicName" json:"nicName,omitempty" query:"nicName"`
}

func (x *NetworkCard) Reset() {
	*x = NetworkCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCard) ProtoMessage() {}

func (x *NetworkCard) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCard.ProtoReflect.Descriptor instead.
func (*NetworkCard) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{10}
}

func (x *NetworkCard) GetIPv4Address() string {
	if x != nil {
		return x.IPv4Address
	}
	return ""
}

func (x *NetworkCard) GetIPv6Address() []string {
	if x != nil {
		return x.IPv6Address
	}
	return nil
}

func (x *NetworkCard) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

func (x *NetworkCard) GetSubnetCidr() string {
	if x != nil {
		return x.SubnetCidr
	}
	return ""
}

func (x *NetworkCard) GetIsMaster() bool {
	if x != nil {
		return x.IsMaster
	}
	return false
}

func (x *NetworkCard) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *NetworkCard) GetNetworkCardID() string {
	if x != nil {
		return x.NetworkCardID
	}
	return ""
}

func (x *NetworkCard) GetSecurityGroup() []string {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

func (x *NetworkCard) GetFixedIP() string {
	if x != nil {
		return x.FixedIP
	}
	return ""
}

func (x *NetworkCard) GetNicName() string {
	if x != nil {
		return x.NicName
	}
	return ""
}

// Vip信息
type VipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 虚拟IP的ID
	VipID string `protobuf:"bytes,1,opt,name=vipID,proto3" form:"vipID" json:"vipID,omitempty" query:"vipID"`
	// 虚拟IP地址
	VipAddress string `protobuf:"bytes,2,opt,name=vipAddress,proto3" form:"vipAddress" json:"vipAddress,omitempty" query:"vipAddress"`
	// 虚拟IP绑定的网卡对应IPv4地址
	VipBindNicIP string `protobuf:"bytes,3,opt,name=vipBindNicIP,proto3" form:"vipBindNicIP" json:"vipBindNicIP,omitempty" query:"vipBindNicIP"`
	// 虚拟IP绑定的网卡对应IPv6地址
	VipBindNicIPv6 string `protobuf:"bytes,4,opt,name=vipBindNicIPv6,proto3" form:"vipBindNicIPv6" json:"vipBindNicIPv6,omitempty" query:"vipBindNicIPv6"`
	// 网卡ID
	NicID string `protobuf:"bytes,5,opt,name=nicID,proto3" form:"nicID" json:"nicID,omitempty" query:"nicID"`
}

func (x *VipInfo) Reset() {
	*x = VipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipInfo) ProtoMessage() {}

func (x *VipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipInfo.ProtoReflect.Descriptor instead.
func (*VipInfo) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{11}
}

func (x *VipInfo) GetVipID() string {
	if x != nil {
		return x.VipID
	}
	return ""
}

func (x *VipInfo) GetVipAddress() string {
	if x != nil {
		return x.VipAddress
	}
	return ""
}

func (x *VipInfo) GetVipBindNicIP() string {
	if x != nil {
		return x.VipBindNicIP
	}
	return ""
}

func (x *VipInfo) GetVipBindNicIPv6() string {
	if x != nil {
		return x.VipBindNicIPv6
	}
	return ""
}

func (x *VipInfo) GetNicID() string {
	if x != nil {
		return x.NicID
	}
	return ""
}

// 云主机组信息
type AffinityGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy            string `protobuf:"bytes,1,opt,name=policy,proto3" form:"policy" json:"policy,omitempty" query:"policy"`
	AffinityGroupName string `protobuf:"bytes,2,opt,name=affinityGroupName,proto3" form:"affinityGroupName" json:"affinityGroupName,omitempty" query:"affinityGroupName"`
	AffinityGroupID   string `protobuf:"bytes,3,opt,name=affinityGroupID,proto3" form:"affinityGroupID" json:"affinityGroupID,omitempty" query:"affinityGroupID"`
}

func (x *AffinityGroup) Reset() {
	*x = AffinityGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffinityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffinityGroup) ProtoMessage() {}

func (x *AffinityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffinityGroup.ProtoReflect.Descriptor instead.
func (*AffinityGroup) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{12}
}

func (x *AffinityGroup) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *AffinityGroup) GetAffinityGroupName() string {
	if x != nil {
		return x.AffinityGroupName
	}
	return ""
}

func (x *AffinityGroup) GetAffinityGroupID() string {
	if x != nil {
		return x.AffinityGroupID
	}
	return ""
}

// 镜像信息
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageID   string `protobuf:"bytes,1,opt,name=imageID,proto3" form:"imageID" json:"imageID,omitempty" query:"imageID"`
	ImageName string `protobuf:"bytes,2,opt,name=imageName,proto3" form:"imageName" json:"imageName,omitempty" query:"imageName"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{13}
}

func (x *Image) GetImageID() string {
	if x != nil {
		return x.ImageID
	}
	return ""
}

func (x *Image) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

// 云主机规格信息
type Flavor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlavorID     string `protobuf:"bytes,1,opt,name=flavorID,proto3" form:"flavorID" json:"flavorID,omitempty" query:"flavorID"`
	FlavorName   string `protobuf:"bytes,2,opt,name=flavorName,proto3" form:"flavorName" json:"flavorName,omitempty" query:"flavorName"`
	FlavorCPU    int32  `protobuf:"varint,3,opt,name=flavorCPU,proto3" form:"flavorCPU" json:"flavorCPU,omitempty" query:"flavorCPU"`
	FlavorRAM    int32  `protobuf:"varint,4,opt,name=flavorRAM,proto3" form:"flavorRAM" json:"flavorRAM,omitempty" query:"flavorRAM"`
	GpuType      string `protobuf:"bytes,5,opt,name=gpuType,proto3" form:"gpuType" json:"gpuType,omitempty" query:"gpuType"`
	GpuCount     int32  `protobuf:"varint,6,opt,name=gpuCount,proto3" form:"gpuCount" json:"gpuCount,omitempty" query:"gpuCount"`
	GpuVendor    string `protobuf:"bytes,7,opt,name=gpuVendor,proto3" form:"gpuVendor" json:"gpuVendor,omitempty" query:"gpuVendor"`
	VideoMemSize int32  `protobuf:"varint,8,opt,name=videoMemSize,proto3" form:"videoMemSize" json:"videoMemSize,omitempty" query:"videoMemSize"`
}

func (x *Flavor) Reset() {
	*x = Flavor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flavor) ProtoMessage() {}

func (x *Flavor) ProtoReflect() protoreflect.Message {
	mi := &file_ecs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flavor.ProtoReflect.Descriptor instead.
func (*Flavor) Descriptor() ([]byte, []int) {
	return file_ecs_proto_rawDescGZIP(), []int{14}
}

func (x *Flavor) GetFlavorID() string {
	if x != nil {
		return x.FlavorID
	}
	return ""
}

func (x *Flavor) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *Flavor) GetFlavorCPU() int32 {
	if x != nil {
		return x.FlavorCPU
	}
	return 0
}

func (x *Flavor) GetFlavorRAM() int32 {
	if x != nil {
		return x.FlavorRAM
	}
	return 0
}

func (x *Flavor) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *Flavor) GetGpuCount() int32 {
	if x != nil {
		return x.GpuCount
	}
	return 0
}

func (x *Flavor) GetGpuVendor() string {
	if x != nil {
		return x.GpuVendor
	}
	return ""
}

func (x *Flavor) GetVideoMemSize() int32 {
	if x != nil {
		return x.VideoMemSize
	}
	return 0
}

var File_ecs_proto protoreflect.FileDescriptor

var file_ecs_proto_rawDesc = []byte{
	0x0a, 0x09, 0x65, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x0e,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb,
	0x18, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb,
	0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xca, 0xbb, 0x18, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49,
	0x44, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d,
	0xca, 0xbb, 0x18, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x45, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x62, 0x6f, 0x6f, 0x74,
	0x44, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xca, 0xbb,
	0x18, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0c,
	0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x11,
	0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x15, 0xca, 0xbb, 0x18, 0x11, 0x62, 0x6f, 0x6f,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x11,
	0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x12, 0x37, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6d, 0x6b,
	0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x62, 0x6f,
	0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6d, 0x6b, 0x49, 0x44, 0x52, 0x0d, 0x62, 0x6f, 0x6f,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6d, 0x6b, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x44, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x6f,
	0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0c, 0xca,
	0xbb, 0x18, 0x08, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x6f, 0x6e, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61,
	0x72, 0x64, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x49,
	0x50, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x65, 0x78, 0x74,
	0x49, 0x50, 0x52, 0x05, 0x65, 0x78, 0x74, 0x49, 0x50, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb,
	0x18, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xca, 0xbb,
	0x18, 0x0c, 0x73, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c,
	0x73, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x73, 0x6b, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x69, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x37, 0x0a,
	0x0d, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x69, 0x70, 0x49, 0x44, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x65, 0x69, 0x70, 0x49, 0x44,
	0x52, 0x05, 0x65, 0x69, 0x70, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x0f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xca, 0xbb,
	0x18, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x13, 0xca, 0xbb, 0x18, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x70, 0x61,
	0x79, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x70,
	0x61, 0x79, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x67, 0x70, 0x75,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x67, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4b,
	0x69, 0x74, 0x73, 0x52, 0x0d, 0x67, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4b, 0x69,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x42, 0x12, 0xca, 0xbb, 0x18, 0x0e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xca, 0xbb, 0x18,
	0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18,
	0x08, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb,
	0x18, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6d, 0x6b, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6d, 0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x4f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x4f, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x9c, 0x05, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca,
	0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb,
	0x18, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xbb,
	0x18, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xca, 0xbb, 0x18, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1f, 0x0a,
	0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xbb,
	0x18, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x39,
	0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xca, 0xbb, 0x18, 0x03, 0x61, 0x73, 0x63, 0x52, 0x03, 0x61,
	0x73, 0x63, 0x22, 0x61, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x08, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca,
	0xbb, 0x18, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xb9, 0x0b, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x7a, 0x61, 0x62, 0x62, 0x69,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x7a, 0x61, 0x62,
	0x62, 0x69, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c,
	0x73, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x76, 0x36, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x76, 0x36, 0x12, 0x3c, 0x0a, 0x0f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x76, 0x69,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x76, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x76, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x61, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x70,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x62,
	0x0a, 0x08, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x69, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x69,
	0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x50, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x50, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x56, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69,
	0x70, 0x42, 0x69, 0x6e, 0x64, 0x4e, 0x69, 0x63, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x4e, 0x69, 0x63, 0x49, 0x50, 0x12, 0x26,
	0x0a, 0x0e, 0x76, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x4e, 0x69, 0x63, 0x49, 0x50, 0x76, 0x36,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x4e,
	0x69, 0x63, 0x49, 0x50, 0x76, 0x36, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x69, 0x63, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x69, 0x63, 0x49, 0x44, 0x22, 0x7f, 0x0a, 0x0d,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x3f, 0x0a,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf8,
	0x01, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x43,
	0x50, 0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x43, 0x50, 0x55, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x41, 0x4d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x41,
	0x4d, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x70, 0x75, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x70, 0x75, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x4d, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x2a, 0x34, 0x0a, 0x08, 0x44, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41, 0x54, 0x41, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x41, 0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x53, 0x44, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x53, 0x44, 0x10, 0x03, 0x2a,
	0xdd, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x08, 0x12,
	0x0c, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x09, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x75, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d,
	0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x10, 0x0d, 0x32,
	0x84, 0x02, 0x0a, 0x0a, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0xd2,
	0xc1, 0x18, 0x17, 0x2f, 0x76, 0x34, 0x2f, 0x65, 0x63, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0xd2, 0xc1, 0x18, 0x16, 0x2f, 0x76, 0x34, 0x2f, 0x65, 0x63, 0x73,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a,
	0x25, 0x92, 0xce, 0x18, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x63, 0x73,
	0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x74,
	0x79, 0x75, 0x6e, 0x2e, 0x63, 0x6e, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65,
	0x63, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x65, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ecs_proto_rawDescOnce sync.Once
	file_ecs_proto_rawDescData = file_ecs_proto_rawDesc
)

func file_ecs_proto_rawDescGZIP() []byte {
	file_ecs_proto_rawDescOnce.Do(func() {
		file_ecs_proto_rawDescData = protoimpl.X.CompressGZIP(file_ecs_proto_rawDescData)
	})
	return file_ecs_proto_rawDescData
}

var file_ecs_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ecs_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_ecs_proto_goTypes = []interface{}{
	(DiskType)(0),                  // 0: proto.DiskType
	(InstanceStatus)(0),            // 1: proto.InstanceStatus
	(*CreateInstanceRequest)(nil),  // 2: proto.CreateInstanceRequest
	(*DataDisk)(nil),               // 3: proto.DataDisk
	(*CreateInstanceResponse)(nil), // 4: proto.CreateInstanceResponse
	(*ListInstanceRequest)(nil),    // 5: proto.ListInstanceRequest
	(*Label)(nil),                  // 6: proto.Label
	(*ListInstanceResponse)(nil),   // 7: proto.ListInstanceResponse
	(*Result)(nil),                 // 8: proto.Result
	(*Address)(nil),                // 9: proto.Address
	(*AddressInfo)(nil),            // 10: proto.AddressInfo
	(*SecGroup)(nil),               // 11: proto.SecGroup
	(*NetworkCard)(nil),            // 12: proto.NetworkCard
	(*VipInfo)(nil),                // 13: proto.VipInfo
	(*AffinityGroup)(nil),          // 14: proto.AffinityGroup
	(*Image)(nil),                  // 15: proto.Image
	(*Flavor)(nil),                 // 16: proto.Flavor
	nil,                            // 17: proto.Result.MetadataEntry
}
var file_ecs_proto_depIdxs = []int32{
	0,  // 0: proto.CreateInstanceRequest.bootDiskType:type_name -> proto.DiskType
	12, // 1: proto.CreateInstanceRequest.networkCardList:type_name -> proto.NetworkCard
	3,  // 2: proto.CreateInstanceRequest.dataDiskList:type_name -> proto.DataDisk
	6,  // 3: proto.CreateInstanceRequest.labelList:type_name -> proto.Label
	0,  // 4: proto.DataDisk.diskType:type_name -> proto.DiskType
	6,  // 5: proto.ListInstanceRequest.labelList:type_name -> proto.Label
	8,  // 6: proto.ListInstanceResponse.results:type_name -> proto.Result
	9,  // 7: proto.Result.addresses:type_name -> proto.Address
	1,  // 8: proto.Result.instanceStatus:type_name -> proto.InstanceStatus
	11, // 9: proto.Result.secGroupList:type_name -> proto.SecGroup
	12, // 10: proto.Result.networkCardList:type_name -> proto.NetworkCard
	13, // 11: proto.Result.vipInfoList:type_name -> proto.VipInfo
	14, // 12: proto.Result.affinityGroup:type_name -> proto.AffinityGroup
	15, // 13: proto.Result.image:type_name -> proto.Image
	16, // 14: proto.Result.flavor:type_name -> proto.Flavor
	17, // 15: proto.Result.metadata:type_name -> proto.Result.MetadataEntry
	10, // 16: proto.Address.addressList:type_name -> proto.AddressInfo
	2,  // 17: proto.EcsService.CreateInstance:input_type -> proto.CreateInstanceRequest
	5,  // 18: proto.EcsService.ListInstance:input_type -> proto.ListInstanceRequest
	4,  // 19: proto.EcsService.CreateInstance:output_type -> proto.CreateInstanceResponse
	7,  // 20: proto.EcsService.ListInstance:output_type -> proto.ListInstanceResponse
	19, // [19:21] is the sub-list for method output_type
	17, // [17:19] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_ecs_proto_init() }
func file_ecs_proto_init() {
	if File_ecs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ecs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffinityGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flavor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ecs_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ecs_proto_goTypes,
		DependencyIndexes: file_ecs_proto_depIdxs,
		EnumInfos:         file_ecs_proto_enumTypes,
		MessageInfos:      file_ecs_proto_msgTypes,
	}.Build()
	File_ecs_proto = out.File
	file_ecs_proto_rawDesc = nil
	file_ecs_proto_goTypes = nil
	file_ecs_proto_depIdxs = nil
}
