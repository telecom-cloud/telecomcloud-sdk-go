// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package crs

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	instance "github.com/telecom-cloud/telecomcloud-sdk-go/service/crs/types/instance"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type InstanceClient interface {
	SubscribeEnterpriseInstance(context context.Context, req *instance.SubscribeEnterpriseInstanceRequest, reqOpt ...config.RequestOption) (resp *instance.SubscribeEnterpriseInstanceResponse, rawResponse *protocol.Response, err error)

	ListEnterpriseInstance(context context.Context, req *instance.ListEnterpriseInstanceRequest, reqOpt ...config.RequestOption) (resp *instance.ListEnterpriseInstanceResponse, rawResponse *protocol.Response, err error)

	GetEnterpriseInstance(context context.Context, req *instance.GetEnterpriseInstanceRequest, reqOpt ...config.RequestOption) (resp *instance.GetEnterpriseInstanceResponse, rawResponse *protocol.Response, err error)

	GetDelegateUsername(context context.Context, req *instance.GetDelegateUsernameRequest, reqOpt ...config.RequestOption) (resp *instance.GetDelegateUsernameResponse, rawResponse *protocol.Response, err error)

	ResetDelegateUserPassword(context context.Context, req *instance.ResetDelegateUserPasswordRequest, reqOpt ...config.RequestOption) (resp *instance.ResetDelegateUserPasswordResponse, rawResponse *protocol.Response, err error)

	GetAuthorizationToken(context context.Context, req *instance.GetAuthorizationTokenRequest, reqOpt ...config.RequestOption) (resp *instance.GetAuthorizationTokenResponse, rawResponse *protocol.Response, err error)

	ValidateInstanceName(context context.Context, req *instance.ValidateInstanceNameRequest, reqOpt ...config.RequestOption) (resp *instance.ValidateInstanceNameResponse, rawResponse *protocol.Response, err error)

	ValidateUserName(context context.Context, req *instance.ValidateUserNameRequest, reqOpt ...config.RequestOption) (resp *instance.ValidateUserNameResponse, rawResponse *protocol.Response, err error)

	CreateInstanceEndpointAclPolicy(context context.Context, req *instance.CreateInstanceEndpointAclPolicyRequest, reqOpt ...config.RequestOption) (resp *instance.CreateInstanceEndpointAclPolicyResponse, rawResponse *protocol.Response, err error)

	ListInstanceEndpointAclPolicy(context context.Context, req *instance.ListInstanceEndpointAclPolicyRequest, reqOpt ...config.RequestOption) (resp *instance.ListInstanceEndpointAclPolicyResponse, rawResponse *protocol.Response, err error)

	DeleteInstanceEndpointAclPolicy(context context.Context, req *instance.DeleteInstanceEndpointAclPolicyRequest, reqOpt ...config.RequestOption) (resp *instance.DeleteInstanceEndpointAclPolicyResponse, rawResponse *protocol.Response, err error)

	CreateInstanceVpceLinkedVpcs(context context.Context, req *instance.CreateInstanceVpceLinkedVpcsRequest, reqOpt ...config.RequestOption) (resp *instance.CreateInstanceVpceLinkedVpcsResponse, rawResponse *protocol.Response, err error)

	GetInstanceVpceLinkedVpcs(context context.Context, req *instance.GetInstanceVpceLinkedVpcsRequest, reqOpt ...config.RequestOption) (resp *instance.GetInstanceVpceLinkedVpcsResponse, rawResponse *protocol.Response, err error)
}

type instanceClient struct {
	client *HttpClient
}

func NewInstanceClient(hostUrl string, ops ...Option) (InstanceClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &instanceClient{
		client: cli,
	}, nil
}

func (s *instanceClient) SubscribeEnterpriseInstance(ctx context.Context, req *instance.SubscribeEnterpriseInstanceRequest, reqOpt ...config.RequestOption) (resp *instance.SubscribeEnterpriseInstanceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/subscribeEnterpriseInstance")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) ListEnterpriseInstance(ctx context.Context, req *instance.ListEnterpriseInstanceRequest, reqOpt ...config.RequestOption) (resp *instance.ListEnterpriseInstanceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"regionId":     req.GetRegionId(),
		"pageNum":      req.GetPageNum(),
		"pageSize":     req.GetPageSize(),
		"instanceName": req.GetInstanceName(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/listInstance")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) GetEnterpriseInstance(ctx context.Context, req *instance.GetEnterpriseInstanceRequest, reqOpt ...config.RequestOption) (resp *instance.GetEnterpriseInstanceResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"instanceId": req.GetInstanceId(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/getInstance")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) GetDelegateUsername(ctx context.Context, req *instance.GetDelegateUsernameRequest, reqOpt ...config.RequestOption) (resp *instance.GetDelegateUsernameResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"regionId": req.GetRegionId(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/getDelegatedUsername")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) ResetDelegateUserPassword(ctx context.Context, req *instance.ResetDelegateUserPasswordRequest, reqOpt ...config.RequestOption) (resp *instance.ResetDelegateUserPasswordResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/resetDelegatedPassword")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) GetAuthorizationToken(ctx context.Context, req *instance.GetAuthorizationTokenRequest, reqOpt ...config.RequestOption) (resp *instance.GetAuthorizationTokenResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/getAuthorizationToken")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) ValidateInstanceName(ctx context.Context, req *instance.ValidateInstanceNameRequest, reqOpt ...config.RequestOption) (resp *instance.ValidateInstanceNameResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/validateInstanceName")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) ValidateUserName(ctx context.Context, req *instance.ValidateUserNameRequest, reqOpt ...config.RequestOption) (resp *instance.ValidateUserNameResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/validateUserName")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) CreateInstanceEndpointAclPolicy(ctx context.Context, req *instance.CreateInstanceEndpointAclPolicyRequest, reqOpt ...config.RequestOption) (resp *instance.CreateInstanceEndpointAclPolicyResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/createInstanceEndpointAclPolicy")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) ListInstanceEndpointAclPolicy(ctx context.Context, req *instance.ListInstanceEndpointAclPolicyRequest, reqOpt ...config.RequestOption) (resp *instance.ListInstanceEndpointAclPolicyResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"instanceId": req.GetInstanceId(),
		"pageNum":    req.GetPageNum(),
		"pageSize":   req.GetPageSize(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/listInstanceEndpointAclPolicy")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) DeleteInstanceEndpointAclPolicy(ctx context.Context, req *instance.DeleteInstanceEndpointAclPolicyRequest, reqOpt ...config.RequestOption) (resp *instance.DeleteInstanceEndpointAclPolicyResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/deleteInstanceEndpointAclPolicy")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) CreateInstanceVpceLinkedVpcs(ctx context.Context, req *instance.CreateInstanceVpceLinkedVpcsRequest, reqOpt ...config.RequestOption) (resp *instance.CreateInstanceVpceLinkedVpcsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/createInstanceVpceLinkedVpcs")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *instanceClient) GetInstanceVpceLinkedVpcs(ctx context.Context, req *instance.GetInstanceVpceLinkedVpcsRequest, reqOpt ...config.RequestOption) (resp *instance.GetInstanceVpceLinkedVpcsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"vpcIdList": req.GetVpcIdList(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/getInstanceVpceLinkedVpcs")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultInstanceClient, _ = NewInstanceClient(baseDomain)

func ConfigDefaultInstanceClient(ops ...Option) (err error) {
	defaultInstanceClient, err = NewInstanceClient(baseDomain, ops...)
	return
}

func SubscribeEnterpriseInstance(context context.Context, req *instance.SubscribeEnterpriseInstanceRequest, reqOpt ...config.RequestOption) (resp *instance.SubscribeEnterpriseInstanceResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.SubscribeEnterpriseInstance(context, req, reqOpt...)
}

func ListEnterpriseInstance(context context.Context, req *instance.ListEnterpriseInstanceRequest, reqOpt ...config.RequestOption) (resp *instance.ListEnterpriseInstanceResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.ListEnterpriseInstance(context, req, reqOpt...)
}

func GetEnterpriseInstance(context context.Context, req *instance.GetEnterpriseInstanceRequest, reqOpt ...config.RequestOption) (resp *instance.GetEnterpriseInstanceResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.GetEnterpriseInstance(context, req, reqOpt...)
}

func GetDelegateUsername(context context.Context, req *instance.GetDelegateUsernameRequest, reqOpt ...config.RequestOption) (resp *instance.GetDelegateUsernameResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.GetDelegateUsername(context, req, reqOpt...)
}

func ResetDelegateUserPassword(context context.Context, req *instance.ResetDelegateUserPasswordRequest, reqOpt ...config.RequestOption) (resp *instance.ResetDelegateUserPasswordResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.ResetDelegateUserPassword(context, req, reqOpt...)
}

func GetAuthorizationToken(context context.Context, req *instance.GetAuthorizationTokenRequest, reqOpt ...config.RequestOption) (resp *instance.GetAuthorizationTokenResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.GetAuthorizationToken(context, req, reqOpt...)
}

func ValidateInstanceName(context context.Context, req *instance.ValidateInstanceNameRequest, reqOpt ...config.RequestOption) (resp *instance.ValidateInstanceNameResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.ValidateInstanceName(context, req, reqOpt...)
}

func ValidateUserName(context context.Context, req *instance.ValidateUserNameRequest, reqOpt ...config.RequestOption) (resp *instance.ValidateUserNameResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.ValidateUserName(context, req, reqOpt...)
}

func CreateInstanceEndpointAclPolicy(context context.Context, req *instance.CreateInstanceEndpointAclPolicyRequest, reqOpt ...config.RequestOption) (resp *instance.CreateInstanceEndpointAclPolicyResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.CreateInstanceEndpointAclPolicy(context, req, reqOpt...)
}

func ListInstanceEndpointAclPolicy(context context.Context, req *instance.ListInstanceEndpointAclPolicyRequest, reqOpt ...config.RequestOption) (resp *instance.ListInstanceEndpointAclPolicyResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.ListInstanceEndpointAclPolicy(context, req, reqOpt...)
}

func DeleteInstanceEndpointAclPolicy(context context.Context, req *instance.DeleteInstanceEndpointAclPolicyRequest, reqOpt ...config.RequestOption) (resp *instance.DeleteInstanceEndpointAclPolicyResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.DeleteInstanceEndpointAclPolicy(context, req, reqOpt...)
}

func CreateInstanceVpceLinkedVpcs(context context.Context, req *instance.CreateInstanceVpceLinkedVpcsRequest, reqOpt ...config.RequestOption) (resp *instance.CreateInstanceVpceLinkedVpcsResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.CreateInstanceVpceLinkedVpcs(context, req, reqOpt...)
}

func GetInstanceVpceLinkedVpcs(context context.Context, req *instance.GetInstanceVpceLinkedVpcsRequest, reqOpt ...config.RequestOption) (resp *instance.GetInstanceVpceLinkedVpcsResponse, rawResponse *protocol.Response, err error) {
	return defaultInstanceClient.GetInstanceVpceLinkedVpcs(context, req, reqOpt...)
}
