// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package crs

import (
	"crypto/tls"

	cli "github.com/telecom-cloud/client-go/pkg/client"
)

var baseDomain = "https://crs-global.ctapi.ctyun.cn"

type ClientSet interface {
	Instance() InstanceClient
	Namespace() NamespaceClient
	Artifact() ArtifactClient
	Repository() RepositoryClient
}

type clientSet struct {
	instanceCli   InstanceClient
	namespaceCli  NamespaceClient
	artifactCli   ArtifactClient
	repositoryCli RepositoryClient
}

func NewClientSet(baseDomain string, options ...Option) (ClientSet, error) {
	defaultOpt := []Option{
		WithClientOption(cli.WithTLSConfig(&tls.Config{
			InsecureSkipVerify: true,
		})),
	}
	options = append(defaultOpt, options...)
	instanceCli, err := NewInstanceClient(baseDomain, options...)
	if err != nil {
		return nil, err
	}
	namespaceCli, err := NewNamespaceClient(baseDomain, options...)
	if err != nil {
		return nil, err
	}
	artifactCli, err := NewArtifactClient(baseDomain, options...)
	if err != nil {
		return nil, err
	}
	repositoryCli, err := NewRepositoryClient(baseDomain, options...)
	if err != nil {
		return nil, err
	}

	return &clientSet{
		instanceCli:   instanceCli,
		namespaceCli:  namespaceCli,
		artifactCli:   artifactCli,
		repositoryCli: repositoryCli,
	}, nil
}

func (cs *clientSet) Instance() InstanceClient {
	return cs.instanceCli
}

func (cs *clientSet) Namespace() NamespaceClient {
	return cs.namespaceCli
}

func (cs *clientSet) Artifact() ArtifactClient {
	return cs.artifactCli
}

func (cs *clientSet) Repository() RepositoryClient {
	return cs.repositoryCli
}
