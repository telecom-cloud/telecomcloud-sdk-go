// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package crs

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	repository "github.com/telecom-cloud/telecomcloud-sdk-go/service/crs/types/repository"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type RepositoryClient interface {
	CreateRepository(context context.Context, req *repository.CreateRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.CreateRepositoryResponse, rawResponse *protocol.Response, err error)

	ListRepository(context context.Context, req *repository.ListRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.ListRepositoryResponse, rawResponse *protocol.Response, err error)

	GetRepository(context context.Context, req *repository.GetRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.GetRepositoryResponse, rawResponse *protocol.Response, err error)

	UpdateRepository(context context.Context, req *repository.UpdateRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.UpdateRepositoryResponse, rawResponse *protocol.Response, err error)

	ListRepoTag(context context.Context, req *repository.ListRepoTagRequest, reqOpt ...config.RequestOption) (resp *repository.ListRepoTagResponse, rawResponse *protocol.Response, err error)

	GetRepoTag(context context.Context, req *repository.GetRepoTagRequest, reqOpt ...config.RequestOption) (resp *repository.GetRepoTagResponse, rawResponse *protocol.Response, err error)
}

type repositoryClient struct {
	client *HttpClient
}

func NewRepositoryClient(hostUrl string, ops ...Option) (RepositoryClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &repositoryClient{
		client: cli,
	}, nil
}

func (s *repositoryClient) CreateRepository(ctx context.Context, req *repository.CreateRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.CreateRepositoryResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/createRepository")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *repositoryClient) ListRepository(ctx context.Context, req *repository.ListRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.ListRepositoryResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"regionId":       req.GetRegionId(),
		"instanceId":     req.GetInstanceId(),
		"namespaceName":  req.GetNamespaceName(),
		"repositoryName": req.GetRepositoryName(),
		"pageNum":        req.GetPageNum(),
		"pageSize":       req.GetPageSize(),
		"orderBy":        req.GetOrderBy(),
		"order":          req.GetOrder(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/listRepository")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *repositoryClient) GetRepository(ctx context.Context, req *repository.GetRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.GetRepositoryResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"instanceId":   req.GetInstanceId(),
		"repositoryId": req.GetRepositoryId(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/getRepository")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *repositoryClient) UpdateRepository(ctx context.Context, req *repository.UpdateRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.UpdateRepositoryResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/updateRepository")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *repositoryClient) ListRepoTag(ctx context.Context, req *repository.ListRepoTagRequest, reqOpt ...config.RequestOption) (resp *repository.ListRepoTagResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"instanceId":   req.GetInstanceId(),
		"repositoryId": req.GetRepositoryId(),
		"tagName":      req.GetTagName(),
		"pageSize":     req.GetPageSize(),
		"pageNum":      req.GetPageNum(),
		"orderBy":      req.GetOrderBy(),
		"order":        req.GetOrder(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/listRepoTag")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *repositoryClient) GetRepoTag(ctx context.Context, req *repository.GetRepoTagRequest, reqOpt ...config.RequestOption) (resp *repository.GetRepoTagResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"instanceId":   req.GetInstanceId(),
		"repositoryId": req.GetRepositoryId(),
		"tagName":      req.GetTagName(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/v1/updateRepository")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultRepositoryClient, _ = NewRepositoryClient(baseDomain)

func ConfigDefaultRepositoryClient(ops ...Option) (err error) {
	defaultRepositoryClient, err = NewRepositoryClient(baseDomain, ops...)
	return
}

func CreateRepository(context context.Context, req *repository.CreateRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.CreateRepositoryResponse, rawResponse *protocol.Response, err error) {
	return defaultRepositoryClient.CreateRepository(context, req, reqOpt...)
}

func ListRepository(context context.Context, req *repository.ListRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.ListRepositoryResponse, rawResponse *protocol.Response, err error) {
	return defaultRepositoryClient.ListRepository(context, req, reqOpt...)
}

func GetRepository(context context.Context, req *repository.GetRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.GetRepositoryResponse, rawResponse *protocol.Response, err error) {
	return defaultRepositoryClient.GetRepository(context, req, reqOpt...)
}

func UpdateRepository(context context.Context, req *repository.UpdateRepositoryRequest, reqOpt ...config.RequestOption) (resp *repository.UpdateRepositoryResponse, rawResponse *protocol.Response, err error) {
	return defaultRepositoryClient.UpdateRepository(context, req, reqOpt...)
}

func ListRepoTag(context context.Context, req *repository.ListRepoTagRequest, reqOpt ...config.RequestOption) (resp *repository.ListRepoTagResponse, rawResponse *protocol.Response, err error) {
	return defaultRepositoryClient.ListRepoTag(context, req, reqOpt...)
}

func GetRepoTag(context context.Context, req *repository.GetRepoTagRequest, reqOpt ...config.RequestOption) (resp *repository.GetRepoTagResponse, rawResponse *protocol.Response, err error) {
	return defaultRepositoryClient.GetRepoTag(context, req, reqOpt...)
}
