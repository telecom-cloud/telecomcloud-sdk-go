// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: commitcontainer.proto

package commitcontainer

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// commit container image info
type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" form:"repository" json:"repository,omitempty"`
	Tag        string `protobuf:"bytes,2,opt,name=tag,proto3" form:"tag" json:"tag,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" form:"message" json:"message,omitempty"`
	Author     string `protobuf:"bytes,4,opt,name=author,proto3" form:"author" json:"author,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{0}
}

func (x *ImageInfo) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ImageInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ImageInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ImageInfo) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

// commit container registry info
type RegistryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registry string `protobuf:"bytes,1,opt,name=registry,proto3" form:"registry" json:"registry,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" form:"username" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" form:"password" json:"password,omitempty"`
}

func (x *RegistryInfo) Reset() {
	*x = RegistryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryInfo) ProtoMessage() {}

func (x *RegistryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryInfo.ProtoReflect.Descriptor instead.
func (*RegistryInfo) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{1}
}

func (x *RegistryInfo) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *RegistryInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegistryInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// commit container task
type CommitContainerTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty"`
	RegionId         string `protobuf:"bytes,2,opt,name=regionId,proto3" form:"regionId" json:"regionId,omitempty"`
	TaskId           string `protobuf:"bytes,3,opt,name=taskId,proto3" form:"taskId" json:"taskId,omitempty"`
	TaskStatus       string `protobuf:"bytes,4,opt,name=taskStatus,proto3" form:"taskStatus" json:"taskStatus,omitempty"`
	ContainerGroupId string `protobuf:"bytes,5,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	ContainerName    string `protobuf:"bytes,6,opt,name=containerName,proto3" form:"containerName" json:"containerName,omitempty"`
}

func (x *CommitContainerTask) Reset() {
	*x = CommitContainerTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitContainerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitContainerTask) ProtoMessage() {}

func (x *CommitContainerTask) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitContainerTask.ProtoReflect.Descriptor instead.
func (*CommitContainerTask) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{2}
}

func (x *CommitContainerTask) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CommitContainerTask) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CommitContainerTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CommitContainerTask) GetTaskStatus() string {
	if x != nil {
		return x.TaskStatus
	}
	return ""
}

func (x *CommitContainerTask) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *CommitContainerTask) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

type DescribeCommitContainerTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId         string `protobuf:"bytes,1,opt,name=regionId,proto3" form:"regionId" json:"regionId,omitempty"`
	TaskId           string `protobuf:"bytes,2,opt,name=taskId,proto3" json:"taskId,omitempty" path:"taskId"`
	ContainerGroupId string `protobuf:"bytes,3,opt,name=containerGroupId,proto3" json:"containerGroupId,omitempty" query:"containerGroupId"`
}

func (x *DescribeCommitContainerTaskRequest) Reset() {
	*x = DescribeCommitContainerTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCommitContainerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCommitContainerTaskRequest) ProtoMessage() {}

func (x *DescribeCommitContainerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCommitContainerTaskRequest.ProtoReflect.Descriptor instead.
func (*DescribeCommitContainerTaskRequest) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeCommitContainerTaskRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *DescribeCommitContainerTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DescribeCommitContainerTaskRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

type DescribeCommitContainerTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*CommitContainerTask `protobuf:"bytes,1,rep,name=tasks,proto3" form:"tasks" json:"tasks,omitempty"`
}

func (x *DescribeCommitContainerTaskResponse) Reset() {
	*x = DescribeCommitContainerTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCommitContainerTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCommitContainerTaskResponse) ProtoMessage() {}

func (x *DescribeCommitContainerTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCommitContainerTaskResponse.ProtoReflect.Descriptor instead.
func (*DescribeCommitContainerTaskResponse) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{4}
}

func (x *DescribeCommitContainerTaskResponse) GetTasks() []*CommitContainerTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type CreateCommitContainerTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId         string        `protobuf:"bytes,1,opt,name=regionId,proto3" form:"regionId" json:"regionId,omitempty"`
	TenantId         string        `protobuf:"bytes,2,opt,name=tenantId,proto3" form:"tenantId" json:"tenantId,omitempty"`
	ContainerGroupId string        `protobuf:"bytes,3,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	ContainerName    string        `protobuf:"bytes,4,opt,name=containerName,proto3" form:"containerName" json:"containerName,omitempty"`
	Image            *ImageInfo    `protobuf:"bytes,5,opt,name=image,proto3" form:"image" json:"image,omitempty"`
	Registry         *RegistryInfo `protobuf:"bytes,6,opt,name=registry,proto3" form:"registry" json:"registry,omitempty"`
}

func (x *CreateCommitContainerTaskRequest) Reset() {
	*x = CreateCommitContainerTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitContainerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitContainerTaskRequest) ProtoMessage() {}

func (x *CreateCommitContainerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitContainerTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateCommitContainerTaskRequest) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCommitContainerTaskRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CreateCommitContainerTaskRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateCommitContainerTaskRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *CreateCommitContainerTaskRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *CreateCommitContainerTaskRequest) GetImage() *ImageInfo {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *CreateCommitContainerTaskRequest) GetRegistry() *RegistryInfo {
	if x != nil {
		return x.Registry
	}
	return nil
}

type CreateCommitContainerTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty"`
	TaskId    string `protobuf:"bytes,2,opt,name=taskId,proto3" form:"taskId" json:"taskId,omitempty"`
}

func (x *CreateCommitContainerTaskResponse) Reset() {
	*x = CreateCommitContainerTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitContainerTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitContainerTaskResponse) ProtoMessage() {}

func (x *CreateCommitContainerTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitContainerTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateCommitContainerTaskResponse) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCommitContainerTaskResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateCommitContainerTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type UpdateCommitContainerTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty" path:"taskId"`
	TaskStatus string `protobuf:"bytes,2,opt,name=taskStatus,proto3" form:"taskStatus" json:"taskStatus,omitempty"`
}

func (x *UpdateCommitContainerTaskRequest) Reset() {
	*x = UpdateCommitContainerTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommitContainerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommitContainerTaskRequest) ProtoMessage() {}

func (x *UpdateCommitContainerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommitContainerTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateCommitContainerTaskRequest) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCommitContainerTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UpdateCommitContainerTaskRequest) GetTaskStatus() string {
	if x != nil {
		return x.TaskStatus
	}
	return ""
}

type UpdateCommitContainerTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" form:"taskId" json:"taskId,omitempty"`
}

func (x *UpdateCommitContainerTaskResponse) Reset() {
	*x = UpdateCommitContainerTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommitContainerTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommitContainerTaskResponse) ProtoMessage() {}

func (x *UpdateCommitContainerTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommitContainerTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateCommitContainerTaskResponse) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCommitContainerTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DeleteCommitContainerTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty" path:"taskId"`
}

func (x *DeleteCommitContainerTaskRequest) Reset() {
	*x = DeleteCommitContainerTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommitContainerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommitContainerTaskRequest) ProtoMessage() {}

func (x *DeleteCommitContainerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommitContainerTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteCommitContainerTaskRequest) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCommitContainerTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DeleteCommitContainerTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" form:"taskId" json:"taskId,omitempty"`
}

func (x *DeleteCommitContainerTaskResponse) Reset() {
	*x = DeleteCommitContainerTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commitcontainer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommitContainerTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommitContainerTaskResponse) ProtoMessage() {}

func (x *DeleteCommitContainerTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitcontainer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommitContainerTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteCommitContainerTaskResponse) Descriptor() ([]byte, []int) {
	return file_commitcontainer_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCommitContainerTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

var File_commitcontainer_proto protoreflect.FileDescriptor

var file_commitcontainer_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xca, 0xbb, 0x18, 0x03, 0x74, 0x61, 0x67, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x8c, 0x01,
	0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28,
	0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xbb, 0x02, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x22, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xd2, 0xbb, 0x18,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x62, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb,
	0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x22, 0x74, 0x0a, 0x21, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca,
	0xbb, 0x18, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x76, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xd2, 0xbb, 0x18, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca,
	0xbb, 0x18, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x21, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xca, 0xbb, 0x18, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x46, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xd2, 0xbb, 0x18, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x21, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xca, 0xbb, 0x18, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x32, 0x93, 0x06, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0xca, 0xc1, 0x18, 0x3f, 0x2f,
	0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x2f, 0x3a, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0xa9,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0xd2, 0xc1, 0x18, 0x35, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0xb1, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0xda, 0xc1, 0x18,
	0x3d, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x2f, 0x3a, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0xb1,
	0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x41, 0xe2, 0xc1, 0x18, 0x3d, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x2f, 0x3a, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x1a, 0x25, 0x92, 0xce, 0x18, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x65, 0x63, 0x69, 0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x74, 0x79, 0x75, 0x6e, 0x2e, 0x63, 0x6e, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_commitcontainer_proto_rawDescOnce sync.Once
	file_commitcontainer_proto_rawDescData = file_commitcontainer_proto_rawDesc
)

func file_commitcontainer_proto_rawDescGZIP() []byte {
	file_commitcontainer_proto_rawDescOnce.Do(func() {
		file_commitcontainer_proto_rawDescData = protoimpl.X.CompressGZIP(file_commitcontainer_proto_rawDescData)
	})
	return file_commitcontainer_proto_rawDescData
}

var file_commitcontainer_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_commitcontainer_proto_goTypes = []interface{}{
	(*ImageInfo)(nil),                           // 0: proto.ImageInfo
	(*RegistryInfo)(nil),                        // 1: proto.RegistryInfo
	(*CommitContainerTask)(nil),                 // 2: proto.CommitContainerTask
	(*DescribeCommitContainerTaskRequest)(nil),  // 3: proto.DescribeCommitContainerTaskRequest
	(*DescribeCommitContainerTaskResponse)(nil), // 4: proto.DescribeCommitContainerTaskResponse
	(*CreateCommitContainerTaskRequest)(nil),    // 5: proto.CreateCommitContainerTaskRequest
	(*CreateCommitContainerTaskResponse)(nil),   // 6: proto.CreateCommitContainerTaskResponse
	(*UpdateCommitContainerTaskRequest)(nil),    // 7: proto.UpdateCommitContainerTaskRequest
	(*UpdateCommitContainerTaskResponse)(nil),   // 8: proto.UpdateCommitContainerTaskResponse
	(*DeleteCommitContainerTaskRequest)(nil),    // 9: proto.DeleteCommitContainerTaskRequest
	(*DeleteCommitContainerTaskResponse)(nil),   // 10: proto.DeleteCommitContainerTaskResponse
}
var file_commitcontainer_proto_depIdxs = []int32{
	2,  // 0: proto.DescribeCommitContainerTaskResponse.tasks:type_name -> proto.CommitContainerTask
	0,  // 1: proto.CreateCommitContainerTaskRequest.image:type_name -> proto.ImageInfo
	1,  // 2: proto.CreateCommitContainerTaskRequest.registry:type_name -> proto.RegistryInfo
	3,  // 3: proto.CommitContainerTaskService.DescribeCommitContainerTask:input_type -> proto.DescribeCommitContainerTaskRequest
	5,  // 4: proto.CommitContainerTaskService.CreateCommitContainerTask:input_type -> proto.CreateCommitContainerTaskRequest
	7,  // 5: proto.CommitContainerTaskService.UpdateCommitContainerTask:input_type -> proto.UpdateCommitContainerTaskRequest
	9,  // 6: proto.CommitContainerTaskService.DeleteCommitContainerTask:input_type -> proto.DeleteCommitContainerTaskRequest
	4,  // 7: proto.CommitContainerTaskService.DescribeCommitContainerTask:output_type -> proto.DescribeCommitContainerTaskResponse
	6,  // 8: proto.CommitContainerTaskService.CreateCommitContainerTask:output_type -> proto.CreateCommitContainerTaskResponse
	8,  // 9: proto.CommitContainerTaskService.UpdateCommitContainerTask:output_type -> proto.UpdateCommitContainerTaskResponse
	10, // 10: proto.CommitContainerTaskService.DeleteCommitContainerTask:output_type -> proto.DeleteCommitContainerTaskResponse
	7,  // [7:11] is the sub-list for method output_type
	3,  // [3:7] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_commitcontainer_proto_init() }
func file_commitcontainer_proto_init() {
	if File_commitcontainer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commitcontainer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commitcontainer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commitcontainer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitContainerTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commitcontainer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCommitContainerTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commitcontainer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCommitContainerTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commitcontainer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitContainerTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commitcontainer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitContainerTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commitcontainer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommitContainerTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commitcontainer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommitContainerTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commitcontainer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommitContainerTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commitcontainer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommitContainerTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commitcontainer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commitcontainer_proto_goTypes,
		DependencyIndexes: file_commitcontainer_proto_depIdxs,
		MessageInfos:      file_commitcontainer_proto_msgTypes,
	}.Build()
	File_commitcontainer_proto = out.File
	file_commitcontainer_proto_rawDesc = nil
	file_commitcontainer_proto_goTypes = nil
	file_commitcontainer_proto_depIdxs = nil
}
