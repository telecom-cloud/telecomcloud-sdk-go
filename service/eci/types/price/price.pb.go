// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: price.proto

package price

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DescribeContainerGroupPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId         string  `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	Cpu              float64 `protobuf:"fixed64,2,opt,name=cpu,proto3" form:"cpu" json:"cpu,omitempty"`
	Memory           float64 `protobuf:"fixed64,3,opt,name=memory,proto3" form:"memory" json:"memory,omitempty"`
	FlavorName       string  `protobuf:"bytes,4,opt,name=flavorName,proto3" form:"flavorName" json:"flavorName,omitempty"`
	AzName           string  `protobuf:"bytes,5,opt,name=azName,proto3" form:"azName" json:"azName,omitempty"`
	EphemeralStorage int64   `protobuf:"varint,6,opt,name=ephemeralStorage,proto3" form:"ephemeralStorage" json:"ephemeralStorage,omitempty"`
	// noSpot, regular instances charged based on usage
	// spotWithPriceLimit, preemptive instances with set upper price limits
	// spotWithAutoPrice, the preemptive instance that following the actual market price, and the system automatically bids
	// default value is noSpot
	SpotStrategy string `protobuf:"bytes,7,opt,name=spotStrategy,proto3" form:"spotStrategy" json:"spotStrategy,omitempty"`
	// +optional
	SpotPriceLimit string `protobuf:"bytes,8,opt,name=spotPriceLimit,proto3" form:"spotPriceLimit" json:"spotPriceLimit,omitempty"`
	// computing power category.
	// when the value is economy, it indicates the price of the economy specification being queried.
	// +optional
	ComputeCategory string `protobuf:"bytes,9,opt,name=computeCategory,proto3" form:"computeCategory" json:"computeCategory,omitempty"`
}

func (x *DescribeContainerGroupPriceRequest) Reset() {
	*x = DescribeContainerGroupPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupPriceRequest) ProtoMessage() {}

func (x *DescribeContainerGroupPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupPriceRequest.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupPriceRequest) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{0}
}

func (x *DescribeContainerGroupPriceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *DescribeContainerGroupPriceRequest) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *DescribeContainerGroupPriceRequest) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *DescribeContainerGroupPriceRequest) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *DescribeContainerGroupPriceRequest) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *DescribeContainerGroupPriceRequest) GetEphemeralStorage() int64 {
	if x != nil {
		return x.EphemeralStorage
	}
	return 0
}

func (x *DescribeContainerGroupPriceRequest) GetSpotStrategy() string {
	if x != nil {
		return x.SpotStrategy
	}
	return ""
}

func (x *DescribeContainerGroupPriceRequest) GetSpotPriceLimit() string {
	if x != nil {
		return x.SpotPriceLimit
	}
	return ""
}

func (x *DescribeContainerGroupPriceRequest) GetComputeCategory() string {
	if x != nil {
		return x.ComputeCategory
	}
	return ""
}

type DescribeContainerGroupPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string     `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	PriceInfo *PriceInfo `protobuf:"bytes,2,opt,name=priceInfo,proto3" form:"priceInfo" json:"priceInfo,omitempty" query:"priceInfo"`
}

func (x *DescribeContainerGroupPriceResponse) Reset() {
	*x = DescribeContainerGroupPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupPriceResponse) ProtoMessage() {}

func (x *DescribeContainerGroupPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupPriceResponse.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupPriceResponse) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{1}
}

func (x *DescribeContainerGroupPriceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DescribeContainerGroupPriceResponse) GetPriceInfo() *PriceInfo {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

type BatchDescribeContainerGroupPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId string         `protobuf:"bytes,1,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	Flavors  []*FlavorParam `protobuf:"bytes,2,rep,name=flavors,proto3" form:"flavors" json:"flavors,omitempty"`
}

func (x *BatchDescribeContainerGroupPriceRequest) Reset() {
	*x = BatchDescribeContainerGroupPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDescribeContainerGroupPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDescribeContainerGroupPriceRequest) ProtoMessage() {}

func (x *BatchDescribeContainerGroupPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDescribeContainerGroupPriceRequest.ProtoReflect.Descriptor instead.
func (*BatchDescribeContainerGroupPriceRequest) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{2}
}

func (x *BatchDescribeContainerGroupPriceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *BatchDescribeContainerGroupPriceRequest) GetFlavors() []*FlavorParam {
	if x != nil {
		return x.Flavors
	}
	return nil
}

type FlavorParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlavorName string  `protobuf:"bytes,1,opt,name=flavorName,proto3" form:"flavorName" json:"flavorName,omitempty"`
	AzName     string  `protobuf:"bytes,2,opt,name=azName,proto3" form:"azName" json:"azName,omitempty"`
	Cpu        float64 `protobuf:"fixed64,3,opt,name=cpu,proto3" form:"-" json:"-" query:"-"`
	Memory     float64 `protobuf:"fixed64,4,opt,name=memory,proto3" form:"-" json:"-" query:"-"`
}

func (x *FlavorParam) Reset() {
	*x = FlavorParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlavorParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlavorParam) ProtoMessage() {}

func (x *FlavorParam) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlavorParam.ProtoReflect.Descriptor instead.
func (*FlavorParam) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{3}
}

func (x *FlavorParam) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *FlavorParam) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *FlavorParam) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *FlavorParam) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type BatchDescribeContainerGroupPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	PriceInfo map[string]*PriceInfo `protobuf:"bytes,2,rep,name=priceInfo,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" form:"priceInfo" json:"priceInfo,omitempty" query:"priceInfo"`
}

func (x *BatchDescribeContainerGroupPriceResponse) Reset() {
	*x = BatchDescribeContainerGroupPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDescribeContainerGroupPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDescribeContainerGroupPriceResponse) ProtoMessage() {}

func (x *BatchDescribeContainerGroupPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDescribeContainerGroupPriceResponse.ProtoReflect.Descriptor instead.
func (*BatchDescribeContainerGroupPriceResponse) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{4}
}

func (x *BatchDescribeContainerGroupPriceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *BatchDescribeContainerGroupPriceResponse) GetPriceInfo() map[string]*PriceInfo {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

type PriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpotPrice *SpotPrice `protobuf:"bytes,1,opt,name=spotPrice,proto3" form:"spotPrice" json:"spotPrice,omitempty" query:"spotPrice"`
	Price     *Price     `protobuf:"bytes,2,opt,name=price,proto3" form:"price" json:"price,omitempty" query:"price"`
	Rules     []*Rule    `protobuf:"bytes,3,rep,name=rules,proto3" form:"rules" json:"rules,omitempty" query:"rules"`
}

func (x *PriceInfo) Reset() {
	*x = PriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceInfo) ProtoMessage() {}

func (x *PriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceInfo.ProtoReflect.Descriptor instead.
func (*PriceInfo) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{5}
}

func (x *PriceInfo) GetSpotPrice() *SpotPrice {
	if x != nil {
		return x.SpotPrice
	}
	return nil
}

func (x *PriceInfo) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *PriceInfo) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type SpotPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpotPrice) Reset() {
	*x = SpotPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotPrice) ProtoMessage() {}

func (x *SpotPrice) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotPrice.ProtoReflect.Descriptor instead.
func (*SpotPrice) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{6}
}

type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the original price for specified resource
	OriginalPrice string `protobuf:"bytes,1,opt,name=originalPrice,proto3" form:"originalPrice" json:"originalPrice,omitempty" query:"originalPrice"`
	// the discount price for specified resource
	DiscountPrice string `protobuf:"bytes,2,opt,name=discountPrice,proto3" form:"discountPrice" json:"discountPrice,omitempty" query:"discountPrice"`
	// the finalPrice that equal originalPrice sub discountPrice
	TradePrice string `protobuf:"bytes,3,opt,name=tradePrice,proto3" form:"tradePrice" json:"tradePrice,omitempty" query:"tradePrice"`
	// monetary unit
	// cny is suitable for china
	// usd is suitable for international
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" form:"currency" json:"currency,omitempty" query:"currency"`
	// resource detail info
	DetailInfos []*DetailInfo `protobuf:"bytes,5,rep,name=detailInfos,proto3" form:"detailInfos" json:"detailInfos,omitempty" query:"detailInfos"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{7}
}

func (x *Price) GetOriginalPrice() string {
	if x != nil {
		return x.OriginalPrice
	}
	return ""
}

func (x *Price) GetDiscountPrice() string {
	if x != nil {
		return x.DiscountPrice
	}
	return ""
}

func (x *Price) GetTradePrice() string {
	if x != nil {
		return x.TradePrice
	}
	return ""
}

func (x *Price) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Price) GetDetailInfos() []*DetailInfo {
	if x != nil {
		return x.DetailInfos
	}
	return nil
}

type DetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// production and sales product types,
	// just like PAAS_ECI_BASIC, PAAS_ECI_PREMIUM, or PAAS_ECI_EBS
	ResourceType string `protobuf:"bytes,1,opt,name=resourceType,proto3" form:"resourceType" json:"resourceType,omitempty" query:"resourceType"`
	// the original price for specified resource
	OriginalPrice string `protobuf:"bytes,2,opt,name=originalPrice,proto3" form:"originalPrice" json:"originalPrice,omitempty" query:"originalPrice"`
	// the discount price for specified resource
	DiscountPrice string `protobuf:"bytes,3,opt,name=discountPrice,proto3" form:"discountPrice" json:"discountPrice,omitempty" query:"discountPrice"`
	// the finalPrice that equal originalPrice sub discountPrice
	TradePrice string `protobuf:"bytes,4,opt,name=tradePrice,proto3" form:"tradePrice" json:"tradePrice,omitempty" query:"tradePrice"`
	// subset of resource pricing rules
	Rule []*Rule `protobuf:"bytes,5,rep,name=rule,proto3" form:"rule" json:"rule,omitempty" query:"rule"`
}

func (x *DetailInfo) Reset() {
	*x = DetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailInfo) ProtoMessage() {}

func (x *DetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailInfo.ProtoReflect.Descriptor instead.
func (*DetailInfo) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{8}
}

func (x *DetailInfo) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *DetailInfo) GetOriginalPrice() string {
	if x != nil {
		return x.OriginalPrice
	}
	return ""
}

func (x *DetailInfo) GetDiscountPrice() string {
	if x != nil {
		return x.DiscountPrice
	}
	return ""
}

func (x *DetailInfo) GetTradePrice() string {
	if x != nil {
		return x.TradePrice
	}
	return ""
}

func (x *DetailInfo) GetRule() []*Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId      string `protobuf:"bytes,1,opt,name=ruleId,proto3" form:"ruleId" json:"ruleId,omitempty" query:"ruleId"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" form:"description" json:"description,omitempty" query:"description"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{9}
}

func (x *Rule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *Rule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_price_proto protoreflect.FileDescriptor

var file_price_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd4, 0x03, 0x0a, 0x22, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x07, 0xca,
	0xbb, 0x18, 0x03, 0x63, 0x70, 0x75, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x22, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0xca, 0xbb, 0x18,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x2e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xca, 0xbb, 0x18, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x7a, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x14, 0xca,
	0xbb, 0x18, 0x10, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x10, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x70, 0x6f, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xca, 0xbb, 0x18,
	0x0c, 0x73, 0x70, 0x6f, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0c, 0x73,
	0x70, 0x6f, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x70, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xca, 0xbb, 0x18, 0x0e, 0x73, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0e, 0x73, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x73, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x27,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x73, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x22, 0x9f, 0x01, 0x0a,
	0x0b, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x0a,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb,
	0x18, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x08, 0xfa,
	0xbb, 0x18, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x20, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x08, 0xfa, 0xbb,
	0x18, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xf6,
	0x01, 0x0a, 0x28, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x4e, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x0b, 0x0a, 0x09,
	0x53, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x0b, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x22, 0xbd, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x22, 0x40, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x8b, 0x03, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0xd2, 0xc1,
	0x18, 0x32, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0xd2, 0xc1,
	0x18, 0x37, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x25, 0x92, 0xce, 0x18, 0x21, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x63, 0x69, 0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x74, 0x79, 0x75, 0x6e, 0x2e, 0x63, 0x6e,
	0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_price_proto_rawDescOnce sync.Once
	file_price_proto_rawDescData = file_price_proto_rawDesc
)

func file_price_proto_rawDescGZIP() []byte {
	file_price_proto_rawDescOnce.Do(func() {
		file_price_proto_rawDescData = protoimpl.X.CompressGZIP(file_price_proto_rawDescData)
	})
	return file_price_proto_rawDescData
}

var file_price_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_price_proto_goTypes = []interface{}{
	(*DescribeContainerGroupPriceRequest)(nil),       // 0: proto.DescribeContainerGroupPriceRequest
	(*DescribeContainerGroupPriceResponse)(nil),      // 1: proto.DescribeContainerGroupPriceResponse
	(*BatchDescribeContainerGroupPriceRequest)(nil),  // 2: proto.BatchDescribeContainerGroupPriceRequest
	(*FlavorParam)(nil),                              // 3: proto.FlavorParam
	(*BatchDescribeContainerGroupPriceResponse)(nil), // 4: proto.BatchDescribeContainerGroupPriceResponse
	(*PriceInfo)(nil),                                // 5: proto.PriceInfo
	(*SpotPrice)(nil),                                // 6: proto.SpotPrice
	(*Price)(nil),                                    // 7: proto.Price
	(*DetailInfo)(nil),                               // 8: proto.DetailInfo
	(*Rule)(nil),                                     // 9: proto.Rule
	nil,                                              // 10: proto.BatchDescribeContainerGroupPriceResponse.PriceInfoEntry
}
var file_price_proto_depIdxs = []int32{
	5,  // 0: proto.DescribeContainerGroupPriceResponse.priceInfo:type_name -> proto.PriceInfo
	3,  // 1: proto.BatchDescribeContainerGroupPriceRequest.flavors:type_name -> proto.FlavorParam
	10, // 2: proto.BatchDescribeContainerGroupPriceResponse.priceInfo:type_name -> proto.BatchDescribeContainerGroupPriceResponse.PriceInfoEntry
	6,  // 3: proto.PriceInfo.spotPrice:type_name -> proto.SpotPrice
	7,  // 4: proto.PriceInfo.price:type_name -> proto.Price
	9,  // 5: proto.PriceInfo.rules:type_name -> proto.Rule
	8,  // 6: proto.Price.detailInfos:type_name -> proto.DetailInfo
	9,  // 7: proto.DetailInfo.rule:type_name -> proto.Rule
	5,  // 8: proto.BatchDescribeContainerGroupPriceResponse.PriceInfoEntry.value:type_name -> proto.PriceInfo
	0,  // 9: proto.PriceService.DescribePrice:input_type -> proto.DescribeContainerGroupPriceRequest
	2,  // 10: proto.PriceService.BatchDescribePrice:input_type -> proto.BatchDescribeContainerGroupPriceRequest
	1,  // 11: proto.PriceService.DescribePrice:output_type -> proto.DescribeContainerGroupPriceResponse
	4,  // 12: proto.PriceService.BatchDescribePrice:output_type -> proto.BatchDescribeContainerGroupPriceResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_price_proto_init() }
func file_price_proto_init() {
	if File_price_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_price_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDescribeContainerGroupPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlavorParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDescribeContainerGroupPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_price_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_price_proto_goTypes,
		DependencyIndexes: file_price_proto_depIdxs,
		MessageInfos:      file_price_proto_msgTypes,
	}.Build()
	File_price_proto = out.File
	file_price_proto_rawDesc = nil
	file_price_proto_goTypes = nil
	file_price_proto_depIdxs = nil
}
