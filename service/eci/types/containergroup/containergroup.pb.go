// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: api/eci/containergroup.proto

package containergroup

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateContainerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupName       string                     `protobuf:"bytes,1,opt,name=containerGroupName,proto3" form:"containerGroupName" json:"containerGroupName,omitempty"`
	Cpu                      float64                    `protobuf:"fixed64,2,opt,name=cpu,proto3" form:"cpu" json:"cpu,omitempty"`
	Memory                   float64                    `protobuf:"fixed64,3,opt,name=memory,proto3" form:"memory" json:"memory,omitempty"`
	Eip                      *Eip                       `protobuf:"bytes,4,opt,name=eip,proto3" form:"eip" json:"eip,omitempty"`
	RestartPolicy            string                     `protobuf:"bytes,5,opt,name=restartPolicy,proto3" form:"restartPolicy" json:"restartPolicy,omitempty"`
	VpcId                    string                     `protobuf:"bytes,6,opt,name=vpcId,proto3" form:"vpcId" json:"vpcId,omitempty"`
	VSwitchId                string                     `protobuf:"bytes,7,opt,name=vSwitchId,proto3" form:"vSwitchId" json:"vSwitchId,omitempty"`
	SecurityGroupId          string                     `protobuf:"bytes,8,opt,name=securityGroupId,proto3" form:"securityGroupId" json:"securityGroupId,omitempty"`
	DnsConfig                *PodDNSConfig              `protobuf:"bytes,9,opt,name=dnsConfig,proto3" form:"dnsConfig" json:"dnsConfig,omitempty"`
	HostAliases              []*HostAlias               `protobuf:"bytes,10,rep,name=hostAliases,proto3" form:"hostAliases" json:"hostAliases,omitempty"`
	Tags                     []*Tag                     `protobuf:"bytes,11,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	InitContainers           []*Container               `protobuf:"bytes,12,rep,name=initContainers,proto3" form:"initContainers" json:"initContainers,omitempty"`
	Containers               []*Container               `protobuf:"bytes,13,rep,name=containers,proto3" form:"containers" json:"containers,omitempty"`
	Volumes                  []*Volume                  `protobuf:"bytes,14,rep,name=volumes,proto3" form:"volumes" json:"volumes,omitempty"`
	EphemeralVolume          int32                      `protobuf:"varint,15,opt,name=ephemeralVolume,proto3" form:"ephemeralVolume" json:"ephemeralVolume,omitempty"`
	ImageRegistryCredentials []*ImageRegistryCredential `protobuf:"bytes,16,rep,name=imageRegistryCredentials,proto3" form:"imageRegistryCredentials" json:"imageRegistryCredentials,omitempty"`
	AzInfo                   []*AzInfo                  `protobuf:"bytes,17,rep,name=azInfo,proto3" form:"azInfo" json:"azInfo,omitempty"`
	FlavorId                 string                     `protobuf:"bytes,18,opt,name=flavorId,proto3" form:"flavorId" json:"flavorId,omitempty"`
	MasterOrderId            string                     `protobuf:"bytes,19,opt,name=masterOrderId,proto3" form:"masterOrderId" json:"masterOrderId,omitempty"`
	MasterResourceId         string                     `protobuf:"bytes,20,opt,name=masterResourceId,proto3" form:"masterResourceId" json:"masterResourceId,omitempty"`
	SubResources             []*SubResource             `protobuf:"bytes,21,rep,name=subResources,proto3" form:"subResources" json:"subResources,omitempty"`
	FlavorType               string                     `protobuf:"bytes,22,opt,name=flavorType,proto3" form:"flavorType" json:"flavorType,omitempty"`
	FlavorName               string                     `protobuf:"bytes,23,opt,name=flavorName,proto3" form:"flavorName" json:"flavorName,omitempty"`
	Gpu                      float64                    `protobuf:"fixed64,24,opt,name=gpu,proto3" form:"gpu" json:"gpu,omitempty"`
	HostName                 string                     `protobuf:"bytes,25,opt,name=hostName,proto3" form:"hostname" json:"hostname,omitempty"`
	AutoMatchImageCache      bool                       `protobuf:"varint,26,opt,name=autoMatchImageCache,proto3" form:"autoMatchImageCache" json:"autoMatchImageCache,omitempty"`
	AlsInstanceId            string                     `protobuf:"bytes,27,opt,name=alsInstanceId,proto3" form:"alsInstanceId" json:"alsInstanceId,omitempty"`
	ImageCacheId             string                     `protobuf:"bytes,28,opt,name=imageCacheId,proto3" form:"imageCacheId" json:"imageCacheId,omitempty"`
	IamRoleName              string                     `protobuf:"bytes,29,opt,name=iamRoleName,proto3" form:"iamRoleName" json:"iamRoleName,omitempty"`
	FlavorInfo               *FlavorInfo                `protobuf:"bytes,30,opt,name=flavorInfo,proto3" form:"flavorInfo" json:"flavorInfo,omitempty"`
	SecurityContext          *HostSecurityContext       `protobuf:"bytes,31,opt,name=securityContext,proto3" form:"securityContext" json:"securityContext,omitempty"`
	AgentId                  string                     `protobuf:"bytes,32,opt,name=agentId,proto3" form:"agentId" json:"agentId,omitempty"`
	DataCacheBucket          string                     `protobuf:"bytes,33,opt,name=dataCacheBucket,proto3" form:"dataCacheBucket" json:"dataCacheBucket,omitempty"`
	EpId                     string                     `protobuf:"bytes,34,opt,name=epId,proto3" form:"epId" json:"epId,omitempty"`
	MasterOrderNo            string                     `protobuf:"bytes,35,opt,name=masterOrderNo,proto3" form:"masterOrderNo" json:"masterOrderNo,omitempty"`
	RegionId                 string                     `protobuf:"bytes,36,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
	AccountInfo              string                     `protobuf:"bytes,37,opt,name=accountInfo,proto3" header:"dy-tob-accountInfo" json:"accountInfo,omitempty"`
	AccountId                string                     `protobuf:"bytes,38,opt,name=accountId,proto3" header:"tob-account-id" json:"accountId,omitempty"`
	ServiceAccountName       string                     `protobuf:"bytes,39,opt,name=serviceAccountName,proto3" form:"serviceAccountName" json:"serviceAccountName,omitempty"`
	CpuArchitecture          string                     `protobuf:"bytes,40,opt,name=cpuArchitecture,proto3" form:"cpuArchitecture" json:"cpuArchitecture,omitempty"`
	Annotations              map[string]string          `protobuf:"bytes,41,rep,name=annotations,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" form:"annotations" json:"annotations,omitempty"`
	Labels                   map[string]string          `protobuf:"bytes,42,rep,name=labels,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" form:"labels" json:"labels,omitempty"`
}

func (x *CreateContainerGroupRequest) Reset() {
	*x = CreateContainerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContainerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContainerGroupRequest) ProtoMessage() {}

func (x *CreateContainerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContainerGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateContainerGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{0}
}

func (x *CreateContainerGroupRequest) GetContainerGroupName() string {
	if x != nil {
		return x.ContainerGroupName
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *CreateContainerGroupRequest) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *CreateContainerGroupRequest) GetEip() *Eip {
	if x != nil {
		return x.Eip
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetVSwitchId() string {
	if x != nil {
		return x.VSwitchId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetDnsConfig() *PodDNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetHostAliases() []*HostAlias {
	if x != nil {
		return x.HostAliases
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetInitContainers() []*Container {
	if x != nil {
		return x.InitContainers
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetContainers() []*Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetEphemeralVolume() int32 {
	if x != nil {
		return x.EphemeralVolume
	}
	return 0
}

func (x *CreateContainerGroupRequest) GetImageRegistryCredentials() []*ImageRegistryCredential {
	if x != nil {
		return x.ImageRegistryCredentials
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetAzInfo() []*AzInfo {
	if x != nil {
		return x.AzInfo
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetFlavorId() string {
	if x != nil {
		return x.FlavorId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetMasterOrderId() string {
	if x != nil {
		return x.MasterOrderId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetMasterResourceId() string {
	if x != nil {
		return x.MasterResourceId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetSubResources() []*SubResource {
	if x != nil {
		return x.SubResources
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetFlavorType() string {
	if x != nil {
		return x.FlavorType
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetGpu() float64 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *CreateContainerGroupRequest) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetAutoMatchImageCache() bool {
	if x != nil {
		return x.AutoMatchImageCache
	}
	return false
}

func (x *CreateContainerGroupRequest) GetAlsInstanceId() string {
	if x != nil {
		return x.AlsInstanceId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetImageCacheId() string {
	if x != nil {
		return x.ImageCacheId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetIamRoleName() string {
	if x != nil {
		return x.IamRoleName
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetFlavorInfo() *FlavorInfo {
	if x != nil {
		return x.FlavorInfo
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetSecurityContext() *HostSecurityContext {
	if x != nil {
		return x.SecurityContext
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetDataCacheBucket() string {
	if x != nil {
		return x.DataCacheBucket
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetEpId() string {
	if x != nil {
		return x.EpId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetMasterOrderNo() string {
	if x != nil {
		return x.MasterOrderNo
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetAccountInfo() string {
	if x != nil {
		return x.AccountInfo
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetServiceAccountName() string {
	if x != nil {
		return x.ServiceAccountName
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetCpuArchitecture() string {
	if x != nil {
		return x.CpuArchitecture
	}
	return ""
}

func (x *CreateContainerGroupRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateContainerGroupRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type HostSecurityContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sysctl       []*Sysctl `protobuf:"bytes,1,rep,name=sysctl,proto3" form:"sysctl" json:"sysctl,omitempty" query:"sysctl"`
	RunAsNonRoot bool      `protobuf:"varint,2,opt,name=runAsNonRoot,proto3" form:"runAsNonRoot" json:"runAsNonRoot,omitempty" query:"runAsNonRoot"`
	RunAsGroup   int64     `protobuf:"varint,3,opt,name=runAsGroup,proto3" form:"runAsGroup" json:"runAsGroup,omitempty" query:"runAsGroup"`
	RunAsUser    int64     `protobuf:"varint,4,opt,name=runAsUser,proto3" form:"runAsUser" json:"runAsUser,omitempty" query:"runAsUser"`
}

func (x *HostSecurityContext) Reset() {
	*x = HostSecurityContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostSecurityContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostSecurityContext) ProtoMessage() {}

func (x *HostSecurityContext) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostSecurityContext.ProtoReflect.Descriptor instead.
func (*HostSecurityContext) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{1}
}

func (x *HostSecurityContext) GetSysctl() []*Sysctl {
	if x != nil {
		return x.Sysctl
	}
	return nil
}

func (x *HostSecurityContext) GetRunAsNonRoot() bool {
	if x != nil {
		return x.RunAsNonRoot
	}
	return false
}

func (x *HostSecurityContext) GetRunAsGroup() int64 {
	if x != nil {
		return x.RunAsGroup
	}
	return 0
}

func (x *HostSecurityContext) GetRunAsUser() int64 {
	if x != nil {
		return x.RunAsUser
	}
	return 0
}

type Sysctl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" form:"value" json:"value,omitempty" query:"value"`
}

func (x *Sysctl) Reset() {
	*x = Sysctl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sysctl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sysctl) ProtoMessage() {}

func (x *Sysctl) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sysctl.ProtoReflect.Descriptor instead.
func (*Sysctl) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{2}
}

func (x *Sysctl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sysctl) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type FlavorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlavorID      string  `protobuf:"bytes,1,opt,name=flavorID,proto3" form:"flavorID" json:"flavorID,omitempty" query:"flavorID"`
	FlavorName    string  `protobuf:"bytes,2,opt,name=flavorName,proto3" form:"flavorName" json:"flavorName,omitempty" query:"flavorName"`
	FlavorSeries  string  `protobuf:"bytes,3,opt,name=flavorSeries,proto3" form:"flavorSeries" json:"flavorSeries,omitempty" query:"flavorSeries"`
	FlavorCPU     int32   `protobuf:"varint,4,opt,name=flavorCPU,proto3" form:"flavorCPU" json:"flavorCPU,omitempty" query:"flavorCPU"`
	FlavorRAM     int32   `protobuf:"varint,5,opt,name=flavorRAM,proto3" form:"flavorRAM" json:"flavorRAM,omitempty" query:"flavorRAM"`
	GpuType       string  `protobuf:"bytes,6,opt,name=gpuType,proto3" form:"gpuType" json:"gpuType,omitempty" query:"gpuType"`
	GpuVendor     string  `protobuf:"bytes,7,opt,name=gpuVendor,proto3" form:"gpuVendor" json:"gpuVendor,omitempty" query:"gpuVendor"`
	VideoMemSize  int32   `protobuf:"varint,8,opt,name=videoMemSize,proto3" form:"videoMemSize" json:"videoMemSize,omitempty" query:"videoMemSize"`
	Pps           int32   `protobuf:"varint,9,opt,name=pps,proto3" form:"pps" json:"pps,omitempty" query:"pps"`
	Bandwidth     float64 `protobuf:"fixed64,10,opt,name=bandwidth,proto3" form:"bandwidth" json:"bandwidth,omitempty" query:"bandwidth"`
	BaseBandwidth float64 `protobuf:"fixed64,11,opt,name=baseBandwidth,proto3" form:"baseBandwidth" json:"baseBandwidth,omitempty" query:"baseBandwidth"`
}

func (x *FlavorInfo) Reset() {
	*x = FlavorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlavorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlavorInfo) ProtoMessage() {}

func (x *FlavorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlavorInfo.ProtoReflect.Descriptor instead.
func (*FlavorInfo) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{3}
}

func (x *FlavorInfo) GetFlavorID() string {
	if x != nil {
		return x.FlavorID
	}
	return ""
}

func (x *FlavorInfo) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *FlavorInfo) GetFlavorSeries() string {
	if x != nil {
		return x.FlavorSeries
	}
	return ""
}

func (x *FlavorInfo) GetFlavorCPU() int32 {
	if x != nil {
		return x.FlavorCPU
	}
	return 0
}

func (x *FlavorInfo) GetFlavorRAM() int32 {
	if x != nil {
		return x.FlavorRAM
	}
	return 0
}

func (x *FlavorInfo) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *FlavorInfo) GetGpuVendor() string {
	if x != nil {
		return x.GpuVendor
	}
	return ""
}

func (x *FlavorInfo) GetVideoMemSize() int32 {
	if x != nil {
		return x.VideoMemSize
	}
	return 0
}

func (x *FlavorInfo) GetPps() int32 {
	if x != nil {
		return x.Pps
	}
	return 0
}

func (x *FlavorInfo) GetBandwidth() float64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *FlavorInfo) GetBaseBandwidth() float64 {
	if x != nil {
		return x.BaseBandwidth
	}
	return 0
}

type SubResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId   string `protobuf:"bytes,1,opt,name=resourceId,proto3" form:"resourceId" json:"resourceId,omitempty" query:"resourceId"`
	ResourceType string `protobuf:"bytes,2,opt,name=resourceType,proto3" form:"resourceType" json:"resourceType,omitempty" query:"resourceType"`
	BasicType    string `protobuf:"bytes,3,opt,name=basicType,proto3" form:"basicType" json:"basicType,omitempty" query:"basicType"`
	SaleEntryId  string `protobuf:"bytes,4,opt,name=saleEntryId,proto3" form:"saleEntryId" json:"saleEntryId,omitempty" query:"saleEntryId"`
}

func (x *SubResource) Reset() {
	*x = SubResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubResource) ProtoMessage() {}

func (x *SubResource) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubResource.ProtoReflect.Descriptor instead.
func (*SubResource) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{4}
}

func (x *SubResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *SubResource) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SubResource) GetBasicType() string {
	if x != nil {
		return x.BasicType
	}
	return ""
}

func (x *SubResource) GetSaleEntryId() string {
	if x != nil {
		return x.SaleEntryId
	}
	return ""
}

type InternalRequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId         string `protobuf:"bytes,1,opt,name=TenantId,proto3" header:"Tenant-Id" json:"TenantId,omitempty"`
	UserId           string `protobuf:"bytes,2,opt,name=UserId,proto3" header:"User-Id" json:"UserId,omitempty"`
	TenantCode       string `protobuf:"bytes,3,opt,name=TenantCode,proto3" header:"Tenant-Code" json:"TenantCode,omitempty"`
	RegionId         string `protobuf:"bytes,4,opt,name=RegionId,proto3" header:"Res-Pool-Code" json:"RegionId,omitempty"`
	BssAccountId     string `protobuf:"bytes,5,opt,name=BssAccountId,proto3" header:"Bss-Account-Id" json:"BssAccountId,omitempty"`
	BssUserId        string `protobuf:"bytes,6,opt,name=BssUserId,proto3" header:"Bss-User-Id" json:"BssUserId,omitempty"`
	MasterOrderId    string `protobuf:"bytes,7,opt,name=MasterOrderId,proto3" header:"Master-Order-Id" json:"MasterOrderId,omitempty"`
	MasterResourceId string `protobuf:"bytes,8,opt,name=MasterResourceId,proto3" header:"Master-Resource-Id" json:"MasterResourceId,omitempty"`
	BusinessType     string `protobuf:"bytes,9,opt,name=BusinessType,proto3" header:"Business-Type" json:"BusinessType,omitempty"`
}

func (x *InternalRequestHeader) Reset() {
	*x = InternalRequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalRequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalRequestHeader) ProtoMessage() {}

func (x *InternalRequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalRequestHeader.ProtoReflect.Descriptor instead.
func (*InternalRequestHeader) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{5}
}

func (x *InternalRequestHeader) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *InternalRequestHeader) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InternalRequestHeader) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *InternalRequestHeader) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *InternalRequestHeader) GetBssAccountId() string {
	if x != nil {
		return x.BssAccountId
	}
	return ""
}

func (x *InternalRequestHeader) GetBssUserId() string {
	if x != nil {
		return x.BssUserId
	}
	return ""
}

func (x *InternalRequestHeader) GetMasterOrderId() string {
	if x != nil {
		return x.MasterOrderId
	}
	return ""
}

func (x *InternalRequestHeader) GetMasterResourceId() string {
	if x != nil {
		return x.MasterResourceId
	}
	return ""
}

func (x *InternalRequestHeader) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

// PodDNSConfigOption defines DNS resolver options of a pod.
type PodDNSConfigOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" form:"value" json:"value,omitempty" query:"value"`
}

func (x *PodDNSConfigOption) Reset() {
	*x = PodDNSConfigOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodDNSConfigOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodDNSConfigOption) ProtoMessage() {}

func (x *PodDNSConfigOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodDNSConfigOption.ProtoReflect.Descriptor instead.
func (*PodDNSConfigOption) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{6}
}

func (x *PodDNSConfigOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodDNSConfigOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// PodDNSConfig defines the DNS parameters of a pod in addition to
// those generated from DNSPolicy.
type PodDNSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of DNS name server IP addresses.
	// This will be appended to the base nameservers generated from DNSPolicy.
	// Duplicated nameservers will be removed.
	Nameservers []string `protobuf:"bytes,1,rep,name=nameservers,proto3" form:"nameservers" json:"nameservers,omitempty" query:"nameservers"`
	// A list of DNS search domains for host-name lookup.
	// This will be appended to the base search paths generated from DNSPolicy.
	// Duplicated search paths will be removed.
	Searches []string `protobuf:"bytes,2,rep,name=searches,proto3" form:"searches" json:"searches,omitempty" query:"searches"`
	// A list of DNS resolver options.
	// This will be merged with the base options generated from DNSPolicy.
	// Duplicated entries will be removed. Resolution options given in Options
	// will override those that appear in the base DNSPolicy.
	Options []*PodDNSConfigOption `protobuf:"bytes,3,rep,name=options,proto3" form:"options" json:"options,omitempty" query:"options"`
}

func (x *PodDNSConfig) Reset() {
	*x = PodDNSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodDNSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodDNSConfig) ProtoMessage() {}

func (x *PodDNSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodDNSConfig.ProtoReflect.Descriptor instead.
func (*PodDNSConfig) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{7}
}

func (x *PodDNSConfig) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *PodDNSConfig) GetSearches() []string {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PodDNSConfig) GetOptions() []*PodDNSConfigOption {
	if x != nil {
		return x.Options
	}
	return nil
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
// pod's hosts file.
type HostAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP address of the host file entry.
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" form:"ip" json:"ip,omitempty" query:"ip"`
	// Hostnames for the above IP address.
	Hostnames []string `protobuf:"bytes,2,rep,name=hostnames,proto3" form:"hostnames" json:"hostnames,omitempty" query:"hostnames"`
}

func (x *HostAlias) Reset() {
	*x = HostAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostAlias) ProtoMessage() {}

func (x *HostAlias) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostAlias.ProtoReflect.Descriptor instead.
func (*HostAlias) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{8}
}

func (x *HostAlias) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostAlias) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" form:"key" json:"key,omitempty" query:"key"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" form:"value" json:"value,omitempty" query:"value"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{9}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Eip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EipInstanceId string `protobuf:"bytes,1,opt,name=eipInstanceId,proto3" form:"eipInstanceId" json:"eipInstanceId,omitempty" query:"eipInstanceId"`
	AutoCreateEip bool   `protobuf:"varint,2,opt,name=autoCreateEip,proto3" form:"autoCreateEip" json:"autoCreateEip,omitempty" query:"autoCreateEip"`
	EipBandwidth  int32  `protobuf:"varint,3,opt,name=eipBandwidth,proto3" form:"eipBandwidth" json:"eipBandwidth,omitempty" query:"eipBandwidth"`
}

func (x *Eip) Reset() {
	*x = Eip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Eip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eip) ProtoMessage() {}

func (x *Eip) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eip.ProtoReflect.Descriptor instead.
func (*Eip) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{10}
}

func (x *Eip) GetEipInstanceId() string {
	if x != nil {
		return x.EipInstanceId
	}
	return ""
}

func (x *Eip) GetAutoCreateEip() bool {
	if x != nil {
		return x.AutoCreateEip
	}
	return false
}

func (x *Eip) GetEipBandwidth() int32 {
	if x != nil {
		return x.EipBandwidth
	}
	return 0
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                          string            `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Cpu                           float64           `protobuf:"fixed64,2,opt,name=cpu,proto3" form:"cpu" json:"cpu,omitempty" query:"cpu"`
	Memory                        float64           `protobuf:"fixed64,3,opt,name=memory,proto3" form:"memory" json:"memory,omitempty" query:"memory"`
	Image                         string            `protobuf:"bytes,4,opt,name=image,proto3" form:"image" json:"image,omitempty" query:"image"`
	ImagePullPolicy               string            `protobuf:"bytes,5,opt,name=imagePullPolicy,proto3" form:"imagePullPolicy" json:"imagePullPolicy,omitempty" query:"imagePullPolicy"`
	Command                       []string          `protobuf:"bytes,6,rep,name=command,proto3" form:"command" json:"command,omitempty" query:"command"`
	Args                          []string          `protobuf:"bytes,7,rep,name=args,proto3" form:"args" json:"args,omitempty" query:"args"`
	WorkingDir                    string            `protobuf:"bytes,8,opt,name=workingDir,proto3" form:"workingDir" json:"workingDir,omitempty" query:"workingDir"`
	Ports                         []*ContainerPort  `protobuf:"bytes,9,rep,name=ports,proto3" form:"ports" json:"ports,omitempty" query:"ports"`
	EnvironmentVar                []*EnvironmentVar `protobuf:"bytes,10,rep,name=environmentVar,proto3" form:"environmentVar" json:"environmentVar,omitempty" query:"environmentVar"`
	VolumeMount                   []*VolumeMount    `protobuf:"bytes,11,rep,name=volumeMount,proto3" form:"volumeMount" json:"volumeMount,omitempty" query:"volumeMount"`
	ReadinessProbe                *Probe            `protobuf:"bytes,12,opt,name=readinessProbe,proto3" form:"readinessProbe" json:"readinessProbe,omitempty" query:"readinessProbe"`
	LivenessProbe                 *Probe            `protobuf:"bytes,13,opt,name=livenessProbe,proto3" form:"livenessProbe" json:"livenessProbe,omitempty" query:"livenessProbe"`
	LifecyclePostStartHandlerExec []string          `protobuf:"bytes,14,rep,name=lifecyclePostStartHandlerExec,proto3" form:"lifecyclePostStartHandlerExec" json:"lifecyclePostStartHandlerExec,omitempty" query:"lifecyclePostStartHandlerExec"`
	LifecyclePreStopHandlerExec   []string          `protobuf:"bytes,15,rep,name=lifecyclePreStopHandlerExec,proto3" form:"lifecyclePreStopHandlerExec" json:"lifecyclePreStopHandlerExec,omitempty" query:"lifecyclePreStopHandlerExec"`
	Gpu                           float64           `protobuf:"fixed64,16,opt,name=gpu,proto3" form:"gpu" json:"gpu,omitempty" query:"gpu"`
	SecurityContext               *SecurityContext  `protobuf:"bytes,17,opt,name=securityContext,proto3" form:"securityContext" json:"securityContext,omitempty" query:"securityContext"`
	VolumeDevice                  []*VolumeDevice   `protobuf:"bytes,18,rep,name=volumeDevice,proto3" form:"volumeDevice" json:"volumeDevice,omitempty" query:"volumeDevice"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{11}
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Container) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Container) GetImagePullPolicy() string {
	if x != nil {
		return x.ImagePullPolicy
	}
	return ""
}

func (x *Container) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Container) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Container) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *Container) GetPorts() []*ContainerPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Container) GetEnvironmentVar() []*EnvironmentVar {
	if x != nil {
		return x.EnvironmentVar
	}
	return nil
}

func (x *Container) GetVolumeMount() []*VolumeMount {
	if x != nil {
		return x.VolumeMount
	}
	return nil
}

func (x *Container) GetReadinessProbe() *Probe {
	if x != nil {
		return x.ReadinessProbe
	}
	return nil
}

func (x *Container) GetLivenessProbe() *Probe {
	if x != nil {
		return x.LivenessProbe
	}
	return nil
}

func (x *Container) GetLifecyclePostStartHandlerExec() []string {
	if x != nil {
		return x.LifecyclePostStartHandlerExec
	}
	return nil
}

func (x *Container) GetLifecyclePreStopHandlerExec() []string {
	if x != nil {
		return x.LifecyclePreStopHandlerExec
	}
	return nil
}

func (x *Container) GetGpu() float64 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *Container) GetSecurityContext() *SecurityContext {
	if x != nil {
		return x.SecurityContext
	}
	return nil
}

func (x *Container) GetVolumeDevice() []*VolumeDevice {
	if x != nil {
		return x.VolumeDevice
	}
	return nil
}

type ContainerPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" form:"port" json:"port,omitempty" query:"port"`
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" form:"protocol" json:"protocol,omitempty" query:"protocol"`
}

func (x *ContainerPort) Reset() {
	*x = ContainerPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerPort) ProtoMessage() {}

func (x *ContainerPort) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerPort.ProtoReflect.Descriptor instead.
func (*ContainerPort) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{12}
}

func (x *ContainerPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerPort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ContainerPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

type EnvironmentVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              string            `protobuf:"bytes,1,opt,name=key,proto3" form:"key" json:"key,omitempty" query:"key"`
	Value            string            `protobuf:"bytes,2,opt,name=value,proto3" form:"value" json:"value,omitempty" query:"value"`
	FieldRef         *FieldRef         `protobuf:"bytes,3,opt,name=fieldRef,proto3" form:"fieldRef" json:"fieldRef,omitempty" query:"fieldRef"`
	ResourceFieldRef *ResourceFieldRef `protobuf:"bytes,4,opt,name=resourceFieldRef,proto3" form:"resourceFieldRef" json:"resourceFieldRef,omitempty" query:"resourceFieldRef"`
}

func (x *EnvironmentVar) Reset() {
	*x = EnvironmentVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentVar) ProtoMessage() {}

func (x *EnvironmentVar) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentVar.ProtoReflect.Descriptor instead.
func (*EnvironmentVar) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{13}
}

func (x *EnvironmentVar) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EnvironmentVar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EnvironmentVar) GetFieldRef() *FieldRef {
	if x != nil {
		return x.FieldRef
	}
	return nil
}

func (x *EnvironmentVar) GetResourceFieldRef() *ResourceFieldRef {
	if x != nil {
		return x.ResourceFieldRef
	}
	return nil
}

type FieldRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldPath  string `protobuf:"bytes,1,opt,name=fieldPath,proto3" form:"fieldPath" json:"fieldPath,omitempty" query:"fieldPath"`
	ApiVersion string `protobuf:"bytes,2,opt,name=apiVersion,proto3" form:"apiVersion" json:"apiVersion,omitempty" query:"apiVersion"`
}

func (x *FieldRef) Reset() {
	*x = FieldRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRef) ProtoMessage() {}

func (x *FieldRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRef.ProtoReflect.Descriptor instead.
func (*FieldRef) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{14}
}

func (x *FieldRef) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

func (x *FieldRef) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

type VolumeMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	MountPath   string `protobuf:"bytes,2,opt,name=mountPath,proto3" form:"mountPath" json:"mountPath,omitempty" query:"mountPath"`
	ReadOnly    bool   `protobuf:"varint,3,opt,name=readOnly,proto3" form:"readOnly" json:"readOnly,omitempty" query:"readOnly"`
	SubPath     string `protobuf:"bytes,4,opt,name=subPath,proto3" form:"subPath" json:"subPath,omitempty" query:"subPath"`
	SubPathExpr string `protobuf:"bytes,5,opt,name=subPathExpr,proto3" form:"subPathExpr" json:"subPathExpr,omitempty" query:"subPathExpr"`
}

func (x *VolumeMount) Reset() {
	*x = VolumeMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeMount) ProtoMessage() {}

func (x *VolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeMount.ProtoReflect.Descriptor instead.
func (*VolumeMount) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{15}
}

func (x *VolumeMount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *VolumeMount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *VolumeMount) GetSubPath() string {
	if x != nil {
		return x.SubPath
	}
	return ""
}

func (x *VolumeMount) GetSubPathExpr() string {
	if x != nil {
		return x.SubPathExpr
	}
	return ""
}

type VolumeDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	DevicePath string `protobuf:"bytes,2,opt,name=devicePath,proto3" form:"devicePath" json:"devicePath,omitempty" query:"devicePath"`
}

func (x *VolumeDevice) Reset() {
	*x = VolumeDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDevice) ProtoMessage() {}

func (x *VolumeDevice) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDevice.ProtoReflect.Descriptor instead.
func (*VolumeDevice) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{16}
}

func (x *VolumeDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeDevice) GetDevicePath() string {
	if x != nil {
		return x.DevicePath
	}
	return ""
}

type Probe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exec                *Exec      `protobuf:"bytes,1,opt,name=exec,proto3" form:"exec" json:"exec,omitempty" query:"exec"`
	HttpGet             *HttpGet   `protobuf:"bytes,2,opt,name=httpGet,proto3" form:"httpGet" json:"httpGet,omitempty" query:"httpGet"`
	TcpSocket           *TCPSocket `protobuf:"bytes,3,opt,name=tcpSocket,proto3" form:"tcpSocket" json:"tcpSocket,omitempty" query:"tcpSocket"`
	InitialDelaySeconds int32      `protobuf:"varint,4,opt,name=initialDelaySeconds,proto3" form:"initialDelaySeconds" json:"initialDelaySeconds,omitempty" query:"initialDelaySeconds"`
	TimeoutSeconds      int32      `protobuf:"varint,5,opt,name=timeoutSeconds,proto3" form:"timeoutSeconds" json:"timeoutSeconds,omitempty" query:"timeoutSeconds"`
	PeriodSeconds       int32      `protobuf:"varint,6,opt,name=periodSeconds,proto3" form:"periodSeconds" json:"periodSeconds,omitempty" query:"periodSeconds"`
	SuccessThreshold    int32      `protobuf:"varint,7,opt,name=successThreshold,proto3" form:"successThreshold" json:"successThreshold,omitempty" query:"successThreshold"`
	FailureThreshold    int32      `protobuf:"varint,8,opt,name=failureThreshold,proto3" form:"failureThreshold" json:"failureThreshold,omitempty" query:"failureThreshold"`
}

func (x *Probe) Reset() {
	*x = Probe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probe) ProtoMessage() {}

func (x *Probe) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probe.ProtoReflect.Descriptor instead.
func (*Probe) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{17}
}

func (x *Probe) GetExec() *Exec {
	if x != nil {
		return x.Exec
	}
	return nil
}

func (x *Probe) GetHttpGet() *HttpGet {
	if x != nil {
		return x.HttpGet
	}
	return nil
}

func (x *Probe) GetTcpSocket() *TCPSocket {
	if x != nil {
		return x.TcpSocket
	}
	return nil
}

func (x *Probe) GetInitialDelaySeconds() int32 {
	if x != nil {
		return x.InitialDelaySeconds
	}
	return 0
}

func (x *Probe) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *Probe) GetPeriodSeconds() int32 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

func (x *Probe) GetSuccessThreshold() int32 {
	if x != nil {
		return x.SuccessThreshold
	}
	return 0
}

func (x *Probe) GetFailureThreshold() int32 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

type Exec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string `protobuf:"bytes,1,rep,name=command,proto3" form:"command" json:"command,omitempty" query:"command"`
}

func (x *Exec) Reset() {
	*x = Exec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exec) ProtoMessage() {}

func (x *Exec) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exec.ProtoReflect.Descriptor instead.
func (*Exec) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{18}
}

func (x *Exec) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

type HttpGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        string        `protobuf:"bytes,1,opt,name=path,proto3" form:"path" json:"path,omitempty" query:"path"`
	Port        int32         `protobuf:"varint,2,opt,name=port,proto3" form:"port" json:"port,omitempty" query:"port"`
	Scheme      string        `protobuf:"bytes,3,opt,name=scheme,proto3" form:"scheme" json:"scheme,omitempty" query:"scheme"`
	Host        string        `protobuf:"bytes,4,opt,name=host,proto3" form:"host" json:"host,omitempty" query:"host"`
	HttpHeaders []*HTTPHeader `protobuf:"bytes,5,rep,name=httpHeaders,proto3" form:"httpHeaders" json:"httpHeaders,omitempty" query:"httpHeaders"`
}

func (x *HttpGet) Reset() {
	*x = HttpGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpGet) ProtoMessage() {}

func (x *HttpGet) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpGet.ProtoReflect.Descriptor instead.
func (*HttpGet) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{19}
}

func (x *HttpGet) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpGet) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HttpGet) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *HttpGet) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HttpGet) GetHttpHeaders() []*HTTPHeader {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

type HTTPHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" form:"value" json:"value,omitempty" query:"value"`
}

func (x *HTTPHeader) Reset() {
	*x = HTTPHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPHeader) ProtoMessage() {}

func (x *HTTPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPHeader.ProtoReflect.Descriptor instead.
func (*HTTPHeader) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{20}
}

func (x *HTTPHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TCPSocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int32 `protobuf:"varint,1,opt,name=port,proto3" form:"port" json:"port,omitempty" query:"port"`
}

func (x *TCPSocket) Reset() {
	*x = TCPSocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPSocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPSocket) ProtoMessage() {}

func (x *TCPSocket) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPSocket.ProtoReflect.Descriptor instead.
func (*TCPSocket) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{21}
}

func (x *TCPSocket) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type SecurityContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities             *Capabilities `protobuf:"bytes,1,opt,name=capabilities,proto3" form:"capabilities" json:"capabilities,omitempty" query:"capabilities"`
	Privileged               bool          `protobuf:"varint,2,opt,name=privileged,proto3" form:"privileged" json:"privileged,omitempty" query:"privileged"`
	ReadOnlyRootFileSystem   bool          `protobuf:"varint,3,opt,name=readOnlyRootFileSystem,proto3" form:"readOnlyRootFileSystem" json:"readOnlyRootFileSystem,omitempty" query:"readOnlyRootFileSystem"`
	AllowPrivilegeEscalation bool          `protobuf:"varint,4,opt,name=allowPrivilegeEscalation,proto3" form:"allowPrivilegeEscalation" json:"allowPrivilegeEscalation,omitempty" query:"allowPrivilegeEscalation"`
	RunAsNonRoot             bool          `protobuf:"varint,5,opt,name=runAsNonRoot,proto3" form:"runAsNonRoot" json:"runAsNonRoot,omitempty" query:"runAsNonRoot"`
	RunAsGroup               int64         `protobuf:"varint,6,opt,name=runAsGroup,proto3" form:"runAsGroup" json:"runAsGroup,omitempty" query:"runAsGroup"`
	RunAsUser                int64         `protobuf:"varint,7,opt,name=runAsUser,proto3" form:"runAsUser" json:"runAsUser,omitempty" query:"runAsUser"`
}

func (x *SecurityContext) Reset() {
	*x = SecurityContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityContext) ProtoMessage() {}

func (x *SecurityContext) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityContext.ProtoReflect.Descriptor instead.
func (*SecurityContext) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{22}
}

func (x *SecurityContext) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *SecurityContext) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *SecurityContext) GetReadOnlyRootFileSystem() bool {
	if x != nil {
		return x.ReadOnlyRootFileSystem
	}
	return false
}

func (x *SecurityContext) GetAllowPrivilegeEscalation() bool {
	if x != nil {
		return x.AllowPrivilegeEscalation
	}
	return false
}

func (x *SecurityContext) GetRunAsNonRoot() bool {
	if x != nil {
		return x.RunAsNonRoot
	}
	return false
}

func (x *SecurityContext) GetRunAsGroup() int64 {
	if x != nil {
		return x.RunAsGroup
	}
	return 0
}

func (x *SecurityContext) GetRunAsUser() int64 {
	if x != nil {
		return x.RunAsUser
	}
	return 0
}

type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add  []string `protobuf:"bytes,1,rep,name=add,proto3" form:"add" json:"add,omitempty" query:"add"`
	Drop []string `protobuf:"bytes,2,rep,name=drop,proto3" form:"drop" json:"drop,omitempty" query:"drop"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{23}
}

func (x *Capabilities) GetAdd() []string {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *Capabilities) GetDrop() []string {
	if x != nil {
		return x.Drop
	}
	return nil
}

type ImageRegistryCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" form:"password" json:"password,omitempty" query:"password"`
	Server   string `protobuf:"bytes,2,opt,name=server,proto3" form:"server" json:"server,omitempty" query:"server"`
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" form:"userName" json:"userName,omitempty" query:"userName"`
}

func (x *ImageRegistryCredential) Reset() {
	*x = ImageRegistryCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRegistryCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRegistryCredential) ProtoMessage() {}

func (x *ImageRegistryCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRegistryCredential.ProtoReflect.Descriptor instead.
func (*ImageRegistryCredential) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{24}
}

func (x *ImageRegistryCredential) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ImageRegistryCredential) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *ImageRegistryCredential) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type AzInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AzName string `protobuf:"bytes,1,opt,name=azName,proto3" form:"azName" json:"azName,omitempty" query:"azName"`
	AzId   int32  `protobuf:"varint,2,opt,name=azId,proto3" form:"azId" json:"azId,omitempty" query:"azId"`
}

func (x *AzInfo) Reset() {
	*x = AzInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzInfo) ProtoMessage() {}

func (x *AzInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzInfo.ProtoReflect.Descriptor instead.
func (*AzInfo) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{25}
}

func (x *AzInfo) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *AzInfo) GetAzId() int32 {
	if x != nil {
		return x.AzId
	}
	return 0
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              string             `protobuf:"bytes,1,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	Name              string             `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	EmptyDirVolume    *EmptyDirVolume    `protobuf:"bytes,3,opt,name=emptyDirVolume,proto3" form:"emptyDirVolume" json:"emptyDirVolume,omitempty" query:"emptyDirVolume"`
	ConfigFileVolume  *ConfigFileVolume  `protobuf:"bytes,4,opt,name=configFileVolume,proto3" form:"configFileVolume" json:"configFileVolume,omitempty" query:"configFileVolume"`
	SecretVolume      *SecretVolume      `protobuf:"bytes,5,opt,name=secretVolume,proto3" form:"secretVolume" json:"secretVolume,omitempty" query:"secretVolume"`
	DiskVolume        *DiskVolume        `protobuf:"bytes,6,opt,name=diskVolume,proto3" form:"diskVolume" json:"diskVolume,omitempty" query:"diskVolume"`
	NasVolume         *NasVolume         `protobuf:"bytes,7,opt,name=nasVolume,proto3" form:"nasVolume" json:"nasVolume,omitempty" query:"nasVolume"`
	ZosVolume         *ZosVolume         `protobuf:"bytes,8,opt,name=zosVolume,proto3" form:"zosVolume" json:"zosVolume,omitempty" query:"zosVolume"`
	HostPathVolume    *HostPathVolume    `protobuf:"bytes,9,opt,name=hostPathVolume,proto3" form:"hostPathVolume" json:"hostPathVolume,omitempty" query:"hostPathVolume"`
	DownwardAPIVolume *DownwardAPIVolume `protobuf:"bytes,10,opt,name=downwardAPIVolume,proto3" form:"downwardAPIVolume" json:"downwardAPIVolume,omitempty" query:"downwardAPIVolume"`
	ProjectedVolume   *ProjectedVolume   `protobuf:"bytes,11,opt,name=projectedVolume,proto3" form:"projectedVolume" json:"projectedVolume,omitempty" query:"projectedVolume"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{26}
}

func (x *Volume) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetEmptyDirVolume() *EmptyDirVolume {
	if x != nil {
		return x.EmptyDirVolume
	}
	return nil
}

func (x *Volume) GetConfigFileVolume() *ConfigFileVolume {
	if x != nil {
		return x.ConfigFileVolume
	}
	return nil
}

func (x *Volume) GetSecretVolume() *SecretVolume {
	if x != nil {
		return x.SecretVolume
	}
	return nil
}

func (x *Volume) GetDiskVolume() *DiskVolume {
	if x != nil {
		return x.DiskVolume
	}
	return nil
}

func (x *Volume) GetNasVolume() *NasVolume {
	if x != nil {
		return x.NasVolume
	}
	return nil
}

func (x *Volume) GetZosVolume() *ZosVolume {
	if x != nil {
		return x.ZosVolume
	}
	return nil
}

func (x *Volume) GetHostPathVolume() *HostPathVolume {
	if x != nil {
		return x.HostPathVolume
	}
	return nil
}

func (x *Volume) GetDownwardAPIVolume() *DownwardAPIVolume {
	if x != nil {
		return x.DownwardAPIVolume
	}
	return nil
}

func (x *Volume) GetProjectedVolume() *ProjectedVolume {
	if x != nil {
		return x.ProjectedVolume
	}
	return nil
}

type ProjectedVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultMode int32               `protobuf:"varint,1,opt,name=defaultMode,proto3" form:"defaultMode" json:"defaultMode,omitempty" query:"defaultMode"`
	Sources     []*VolumeProjection `protobuf:"bytes,2,rep,name=sources,proto3" form:"sources" json:"sources,omitempty" query:"sources"`
}

func (x *ProjectedVolume) Reset() {
	*x = ProjectedVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectedVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectedVolume) ProtoMessage() {}

func (x *ProjectedVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectedVolume.ProtoReflect.Descriptor instead.
func (*ProjectedVolume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{27}
}

func (x *ProjectedVolume) GetDefaultMode() int32 {
	if x != nil {
		return x.DefaultMode
	}
	return 0
}

func (x *ProjectedVolume) GetSources() []*VolumeProjection {
	if x != nil {
		return x.Sources
	}
	return nil
}

type VolumeProjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigMap   *ConfigMapProjection   `protobuf:"bytes,1,opt,name=configMap,proto3" form:"configMap" json:"configMap,omitempty" query:"configMap"`
	DownwardAPI *DownwardAPIProjection `protobuf:"bytes,2,opt,name=downwardAPI,proto3" form:"downwardAPI" json:"downwardAPI,omitempty" query:"downwardAPI"`
	Secret      *SecretProjection      `protobuf:"bytes,3,opt,name=secret,proto3" form:"secret" json:"secret,omitempty" query:"secret"`
}

func (x *VolumeProjection) Reset() {
	*x = VolumeProjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeProjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeProjection) ProtoMessage() {}

func (x *VolumeProjection) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeProjection.ProtoReflect.Descriptor instead.
func (*VolumeProjection) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{28}
}

func (x *VolumeProjection) GetConfigMap() *ConfigMapProjection {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

func (x *VolumeProjection) GetDownwardAPI() *DownwardAPIProjection {
	if x != nil {
		return x.DownwardAPI
	}
	return nil
}

func (x *VolumeProjection) GetSecret() *SecretProjection {
	if x != nil {
		return x.Secret
	}
	return nil
}

type ConfigMapProjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string       `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Items    []*KeyToPath `protobuf:"bytes,2,rep,name=items,proto3" form:"items" json:"items,omitempty" query:"items"`
	Optional bool         `protobuf:"varint,3,opt,name=optional,proto3" form:"optional" json:"optional,omitempty" query:"optional"`
}

func (x *ConfigMapProjection) Reset() {
	*x = ConfigMapProjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapProjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapProjection) ProtoMessage() {}

func (x *ConfigMapProjection) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapProjection.ProtoReflect.Descriptor instead.
func (*ConfigMapProjection) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{29}
}

func (x *ConfigMapProjection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigMapProjection) GetItems() []*KeyToPath {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ConfigMapProjection) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type DownwardAPIProjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*DownwardAPIItem `protobuf:"bytes,1,rep,name=items,proto3" form:"items" json:"items,omitempty" query:"items"`
}

func (x *DownwardAPIProjection) Reset() {
	*x = DownwardAPIProjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownwardAPIProjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownwardAPIProjection) ProtoMessage() {}

func (x *DownwardAPIProjection) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownwardAPIProjection.ProtoReflect.Descriptor instead.
func (*DownwardAPIProjection) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{30}
}

func (x *DownwardAPIProjection) GetItems() []*DownwardAPIItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type SecretProjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string       `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Items    []*KeyToPath `protobuf:"bytes,2,rep,name=items,proto3" form:"items" json:"items,omitempty" query:"items"`
	Optional bool         `protobuf:"varint,3,opt,name=optional,proto3" form:"optional" json:"optional,omitempty" query:"optional"`
}

func (x *SecretProjection) Reset() {
	*x = SecretProjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretProjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretProjection) ProtoMessage() {}

func (x *SecretProjection) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretProjection.ProtoReflect.Descriptor instead.
func (*SecretProjection) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{31}
}

func (x *SecretProjection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecretProjection) GetItems() []*KeyToPath {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SecretProjection) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type KeyToPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" form:"key" json:"key,omitempty" query:"key"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" form:"path" json:"path,omitempty" query:"path"`
	Mode int32  `protobuf:"varint,3,opt,name=mode,proto3" form:"mode" json:"mode,omitempty" query:"mode"`
}

func (x *KeyToPath) Reset() {
	*x = KeyToPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyToPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyToPath) ProtoMessage() {}

func (x *KeyToPath) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyToPath.ProtoReflect.Descriptor instead.
func (*KeyToPath) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{32}
}

func (x *KeyToPath) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyToPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KeyToPath) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type DownwardAPIVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultMode int32              `protobuf:"varint,1,opt,name=defaultMode,proto3" form:"defaultMode" json:"defaultMode,omitempty" query:"defaultMode"`
	Items       []*DownwardAPIItem `protobuf:"bytes,2,rep,name=items,proto3" form:"items" json:"items,omitempty" query:"items"`
}

func (x *DownwardAPIVolume) Reset() {
	*x = DownwardAPIVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownwardAPIVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownwardAPIVolume) ProtoMessage() {}

func (x *DownwardAPIVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownwardAPIVolume.ProtoReflect.Descriptor instead.
func (*DownwardAPIVolume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{33}
}

func (x *DownwardAPIVolume) GetDefaultMode() int32 {
	if x != nil {
		return x.DefaultMode
	}
	return 0
}

func (x *DownwardAPIVolume) GetItems() []*DownwardAPIItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type DownwardAPIItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode             int32             `protobuf:"varint,1,opt,name=mode,proto3" form:"mode" json:"mode,omitempty" query:"mode"`
	Path             string            `protobuf:"bytes,2,opt,name=path,proto3" form:"path" json:"path,omitempty" query:"path"`
	FieldRef         *FieldRef         `protobuf:"bytes,3,opt,name=fieldRef,proto3" form:"fieldRef" json:"fieldRef,omitempty" query:"fieldRef"`
	ResourceFieldRef *ResourceFieldRef `protobuf:"bytes,4,opt,name=resourceFieldRef,proto3" form:"resourceFieldRef" json:"resourceFieldRef,omitempty" query:"resourceFieldRef"`
}

func (x *DownwardAPIItem) Reset() {
	*x = DownwardAPIItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownwardAPIItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownwardAPIItem) ProtoMessage() {}

func (x *DownwardAPIItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownwardAPIItem.ProtoReflect.Descriptor instead.
func (*DownwardAPIItem) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{34}
}

func (x *DownwardAPIItem) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *DownwardAPIItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DownwardAPIItem) GetFieldRef() *FieldRef {
	if x != nil {
		return x.FieldRef
	}
	return nil
}

func (x *DownwardAPIItem) GetResourceFieldRef() *ResourceFieldRef {
	if x != nil {
		return x.ResourceFieldRef
	}
	return nil
}

type ResourceFieldRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerName string `protobuf:"bytes,1,opt,name=containerName,proto3" form:"containerName" json:"containerName,omitempty" query:"containerName"`
	Resource      string `protobuf:"bytes,2,opt,name=resource,proto3" form:"resource" json:"resource,omitempty" query:"resource"`
	Divisor       string `protobuf:"bytes,3,opt,name=divisor,proto3" form:"divisor" json:"divisor,omitempty" query:"divisor"` // resource.Quantity (eg: cpu: 1m  mem: 1Mi)
}

func (x *ResourceFieldRef) Reset() {
	*x = ResourceFieldRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceFieldRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceFieldRef) ProtoMessage() {}

func (x *ResourceFieldRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceFieldRef.ProtoReflect.Descriptor instead.
func (*ResourceFieldRef) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{35}
}

func (x *ResourceFieldRef) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ResourceFieldRef) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ResourceFieldRef) GetDivisor() string {
	if x != nil {
		return x.Divisor
	}
	return ""
}

type HostPathVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" form:"path" json:"path,omitempty" query:"path"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
}

func (x *HostPathVolume) Reset() {
	*x = HostPathVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostPathVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPathVolume) ProtoMessage() {}

func (x *HostPathVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostPathVolume.ProtoReflect.Descriptor instead.
func (*HostPathVolume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{36}
}

func (x *HostPathVolume) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HostPathVolume) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type EmptyDirVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// const
	Medium    string `protobuf:"bytes,1,opt,name=medium,proto3" form:"medium" json:"medium,omitempty" query:"medium"`
	SizeLimit int32  `protobuf:"varint,2,opt,name=sizeLimit,proto3" form:"sizeLimit" json:"sizeLimit,omitempty" query:"sizeLimit"`
}

func (x *EmptyDirVolume) Reset() {
	*x = EmptyDirVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyDirVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyDirVolume) ProtoMessage() {}

func (x *EmptyDirVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyDirVolume.ProtoReflect.Descriptor instead.
func (*EmptyDirVolume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{37}
}

func (x *EmptyDirVolume) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *EmptyDirVolume) GetSizeLimit() int32 {
	if x != nil {
		return x.SizeLimit
	}
	return 0
}

type ConfigFileVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultMode       int32               `protobuf:"varint,1,opt,name=defaultMode,proto3" form:"defaultMode" json:"defaultMode,omitempty" query:"defaultMode"`
	ConfigFileToPaths []*ConfigFileToPath `protobuf:"bytes,2,rep,name=configFileToPaths,proto3" form:"configFileToPaths" json:"configFileToPaths,omitempty" query:"configFileToPaths"`
}

func (x *ConfigFileVolume) Reset() {
	*x = ConfigFileVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFileVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFileVolume) ProtoMessage() {}

func (x *ConfigFileVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFileVolume.ProtoReflect.Descriptor instead.
func (*ConfigFileVolume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{38}
}

func (x *ConfigFileVolume) GetDefaultMode() int32 {
	if x != nil {
		return x.DefaultMode
	}
	return 0
}

func (x *ConfigFileVolume) GetConfigFileToPaths() []*ConfigFileToPath {
	if x != nil {
		return x.ConfigFileToPaths
	}
	return nil
}

type ConfigFileToPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    int32  `protobuf:"varint,1,opt,name=mode,proto3" form:"mode" json:"mode,omitempty" query:"mode"`
	Path    string `protobuf:"bytes,2,opt,name=path,proto3" form:"path" json:"path,omitempty" query:"path"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" form:"content" json:"content,omitempty" query:"content"`
}

func (x *ConfigFileToPath) Reset() {
	*x = ConfigFileToPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFileToPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFileToPath) ProtoMessage() {}

func (x *ConfigFileToPath) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFileToPath.ProtoReflect.Descriptor instead.
func (*ConfigFileToPath) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{39}
}

func (x *ConfigFileToPath) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *ConfigFileToPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ConfigFileToPath) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SecretVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultMode   int32           `protobuf:"varint,1,opt,name=defaultMode,proto3" form:"defaultMode" json:"defaultMode,omitempty" query:"defaultMode"`
	SecretToPaths []*SecretToPath `protobuf:"bytes,2,rep,name=secretToPaths,proto3" form:"secretToPaths" json:"secretToPaths,omitempty" query:"secretToPaths"`
}

func (x *SecretVolume) Reset() {
	*x = SecretVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretVolume) ProtoMessage() {}

func (x *SecretVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretVolume.ProtoReflect.Descriptor instead.
func (*SecretVolume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{40}
}

func (x *SecretVolume) GetDefaultMode() int32 {
	if x != nil {
		return x.DefaultMode
	}
	return 0
}

func (x *SecretVolume) GetSecretToPaths() []*SecretToPath {
	if x != nil {
		return x.SecretToPaths
	}
	return nil
}

type SecretToPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    int32  `protobuf:"varint,1,opt,name=mode,proto3" form:"mode" json:"mode,omitempty" query:"mode"`
	Path    string `protobuf:"bytes,2,opt,name=path,proto3" form:"path" json:"path,omitempty" query:"path"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" form:"content" json:"content,omitempty" query:"content"`
}

func (x *SecretToPath) Reset() {
	*x = SecretToPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretToPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretToPath) ProtoMessage() {}

func (x *SecretToPath) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretToPath.ProtoReflect.Descriptor instead.
func (*SecretToPath) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{41}
}

func (x *SecretToPath) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *SecretToPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SecretToPath) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DiskVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeHandle string `protobuf:"bytes,1,opt,name=volumeHandle,proto3" form:"volumeHandle" json:"volumeHandle,omitempty" query:"volumeHandle"`
	VolumeSize   int32  `protobuf:"varint,2,opt,name=volumeSize,proto3" form:"volumeSize" json:"volumeSize,omitempty" query:"volumeSize"`
	FsType       string `protobuf:"bytes,3,opt,name=fsType,proto3" form:"fsType" json:"fsType,omitempty" query:"fsType"`
	ReadOnly     bool   `protobuf:"varint,4,opt,name=readOnly,proto3" form:"readOnly" json:"readOnly,omitempty" query:"readOnly"`
}

func (x *DiskVolume) Reset() {
	*x = DiskVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskVolume) ProtoMessage() {}

func (x *DiskVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskVolume.ProtoReflect.Descriptor instead.
func (*DiskVolume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{42}
}

func (x *DiskVolume) GetVolumeHandle() string {
	if x != nil {
		return x.VolumeHandle
	}
	return ""
}

func (x *DiskVolume) GetVolumeSize() int32 {
	if x != nil {
		return x.VolumeSize
	}
	return 0
}

func (x *DiskVolume) GetFsType() string {
	if x != nil {
		return x.FsType
	}
	return ""
}

func (x *DiskVolume) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type NasVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePath string `protobuf:"bytes,1,opt,name=sourcePath,proto3" form:"sourcePath" json:"sourcePath,omitempty" query:"sourcePath"`
	ReadOnly   bool   `protobuf:"varint,2,opt,name=readOnly,proto3" form:"readOnly" json:"readOnly,omitempty" query:"readOnly"`
	Uid        string `protobuf:"bytes,3,opt,name=uid,proto3" form:"uid" json:"uid,omitempty" query:"uid"`
	Version    string `protobuf:"bytes,4,opt,name=version,proto3" form:"version" json:"version,omitempty" query:"version"`
}

func (x *NasVolume) Reset() {
	*x = NasVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NasVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NasVolume) ProtoMessage() {}

func (x *NasVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NasVolume.ProtoReflect.Descriptor instead.
func (*NasVolume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{43}
}

func (x *NasVolume) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *NasVolume) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *NasVolume) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NasVolume) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ZosVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket     string `protobuf:"bytes,1,opt,name=bucket,proto3" form:"bucket" json:"bucket,omitempty" query:"bucket"`
	Url        string `protobuf:"bytes,2,opt,name=url,proto3" form:"url" json:"url,omitempty" query:"url"`
	Credential string `protobuf:"bytes,3,opt,name=credential,proto3" form:"credential" json:"credential,omitempty" query:"credential"`
	ReadOnly   bool   `protobuf:"varint,4,opt,name=readOnly,proto3" form:"readOnly" json:"readOnly,omitempty" query:"readOnly"`
}

func (x *ZosVolume) Reset() {
	*x = ZosVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZosVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZosVolume) ProtoMessage() {}

func (x *ZosVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZosVolume.ProtoReflect.Descriptor instead.
func (*ZosVolume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{44}
}

func (x *ZosVolume) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *ZosVolume) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ZosVolume) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *ZosVolume) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type CreateContainerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	ContainerGroupId string `protobuf:"bytes,2,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty" query:"containerGroupId"`
	MasterOrderId    string `protobuf:"bytes,3,opt,name=masterOrderId,proto3" form:"masterOrderId" json:"masterOrderId,omitempty" query:"masterOrderId"`
}

func (x *CreateContainerGroupResponse) Reset() {
	*x = CreateContainerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContainerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContainerGroupResponse) ProtoMessage() {}

func (x *CreateContainerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContainerGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateContainerGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{45}
}

func (x *CreateContainerGroupResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateContainerGroupResponse) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *CreateContainerGroupResponse) GetMasterOrderId() string {
	if x != nil {
		return x.MasterOrderId
	}
	return ""
}

type DeleteContainerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" json:"containerGroupId,omitempty" path:"containerGroupId"`
	RegionId         string `protobuf:"bytes,2,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DeleteContainerGroupRequest) Reset() {
	*x = DeleteContainerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContainerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContainerGroupRequest) ProtoMessage() {}

func (x *DeleteContainerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContainerGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteContainerGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteContainerGroupRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *DeleteContainerGroupRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DeleteContainerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	RequestId        string `protobuf:"bytes,2,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *DeleteContainerGroupResponse) Reset() {
	*x = DeleteContainerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContainerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContainerGroupResponse) ProtoMessage() {}

func (x *DeleteContainerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContainerGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteContainerGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteContainerGroupResponse) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *DeleteContainerGroupResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ForceRecycleContainerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId         string `protobuf:"bytes,1,opt,name=regionId,proto3" json:"regionId,omitempty" path:"regionId"`
	TenantId         string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty" path:"tenantId"`
	ContainerGroupId string `protobuf:"bytes,3,opt,name=containerGroupId,proto3" json:"containerGroupId,omitempty" path:"containerGroupId"`
}

func (x *ForceRecycleContainerGroupRequest) Reset() {
	*x = ForceRecycleContainerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceRecycleContainerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceRecycleContainerGroupRequest) ProtoMessage() {}

func (x *ForceRecycleContainerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceRecycleContainerGroupRequest.ProtoReflect.Descriptor instead.
func (*ForceRecycleContainerGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{48}
}

func (x *ForceRecycleContainerGroupRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ForceRecycleContainerGroupRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ForceRecycleContainerGroupRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

type ForceRecycleContainerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	RequestId        string `protobuf:"bytes,2,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *ForceRecycleContainerGroupResponse) Reset() {
	*x = ForceRecycleContainerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceRecycleContainerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceRecycleContainerGroupResponse) ProtoMessage() {}

func (x *ForceRecycleContainerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceRecycleContainerGroupResponse.ProtoReflect.Descriptor instead.
func (*ForceRecycleContainerGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{49}
}

func (x *ForceRecycleContainerGroupResponse) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *ForceRecycleContainerGroupResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateContainerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId         string                     `protobuf:"bytes,1,opt,name=containerGroupId,proto3" json:"containerGroupId,omitempty" path:"containerGroupId"`
	Eip                      *Eip                       `protobuf:"bytes,2,opt,name=eip,proto3" form:"eip" json:"eip,omitempty"`
	RestartPolicy            string                     `protobuf:"bytes,3,opt,name=restartPolicy,proto3" form:"restartPolicy" json:"restartPolicy,omitempty"`
	Tags                     []*Tag                     `protobuf:"bytes,4,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	InitContainers           []*Container               `protobuf:"bytes,5,rep,name=initContainers,proto3" form:"initContainers" json:"initContainers,omitempty"`
	Containers               []*Container               `protobuf:"bytes,6,rep,name=containers,proto3" form:"containers" json:"containers,omitempty"`
	ImageRegistryCredentials []*ImageRegistryCredential `protobuf:"bytes,7,rep,name=imageRegistryCredentials,proto3" form:"imageRegistryCredentials" json:"imageRegistryCredentials,omitempty"`
	DnsConfig                *PodDNSConfig              `protobuf:"bytes,8,opt,name=dnsConfig,proto3" form:"dnsConfig" json:"dnsConfig,omitempty"`
	Volumes                  []*Volume                  `protobuf:"bytes,9,rep,name=volumes,proto3" form:"volumes" json:"volumes,omitempty"`
	RegionId                 string                     `protobuf:"bytes,10,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *UpdateContainerGroupRequest) Reset() {
	*x = UpdateContainerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContainerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContainerGroupRequest) ProtoMessage() {}

func (x *UpdateContainerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContainerGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateContainerGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateContainerGroupRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *UpdateContainerGroupRequest) GetEip() *Eip {
	if x != nil {
		return x.Eip
	}
	return nil
}

func (x *UpdateContainerGroupRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *UpdateContainerGroupRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateContainerGroupRequest) GetInitContainers() []*Container {
	if x != nil {
		return x.InitContainers
	}
	return nil
}

func (x *UpdateContainerGroupRequest) GetContainers() []*Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *UpdateContainerGroupRequest) GetImageRegistryCredentials() []*ImageRegistryCredential {
	if x != nil {
		return x.ImageRegistryCredentials
	}
	return nil
}

func (x *UpdateContainerGroupRequest) GetDnsConfig() *PodDNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

func (x *UpdateContainerGroupRequest) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *UpdateContainerGroupRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type UpdateContainerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty"`
	ContainerGroupId string `protobuf:"bytes,2,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
}

func (x *UpdateContainerGroupResponse) Reset() {
	*x = UpdateContainerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContainerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContainerGroupResponse) ProtoMessage() {}

func (x *UpdateContainerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContainerGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateContainerGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateContainerGroupResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UpdateContainerGroupResponse) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

type RestartContainerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" json:"containerGroupId,omitempty" path:"containerGroupId"`
	RegionId         string `protobuf:"bytes,2,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *RestartContainerGroupRequest) Reset() {
	*x = RestartContainerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartContainerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartContainerGroupRequest) ProtoMessage() {}

func (x *RestartContainerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartContainerGroupRequest.ProtoReflect.Descriptor instead.
func (*RestartContainerGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{52}
}

func (x *RestartContainerGroupRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *RestartContainerGroupRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type RestartContainerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	RequestId        string `protobuf:"bytes,2,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *RestartContainerGroupResponse) Reset() {
	*x = RestartContainerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartContainerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartContainerGroupResponse) ProtoMessage() {}

func (x *RestartContainerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartContainerGroupResponse.ProtoReflect.Descriptor instead.
func (*RestartContainerGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{53}
}

func (x *RestartContainerGroupResponse) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *RestartContainerGroupResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetContainerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" json:"containerGroupId,omitempty" path:"containerGroupId"`
	RegionId         string `protobuf:"bytes,2,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *GetContainerGroupRequest) Reset() {
	*x = GetContainerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerGroupRequest) ProtoMessage() {}

func (x *GetContainerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerGroupRequest.ProtoReflect.Descriptor instead.
func (*GetContainerGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{54}
}

func (x *GetContainerGroupRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *GetContainerGroupRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type GetContainerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId    string               `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	ContainerGroupName  string               `protobuf:"bytes,2,opt,name=containerGroupName,proto3" form:"containerGroupName" json:"containerGroupName,omitempty"`
	IntranetIp          string               `protobuf:"bytes,3,opt,name=intranetIp,proto3" form:"intranetIp" json:"intranetIp,omitempty"`
	InternetIp          string               `protobuf:"bytes,4,opt,name=internetIp,proto3" form:"internetIp" json:"internetIp,omitempty"`
	Status              string               `protobuf:"bytes,5,opt,name=status,proto3" form:"status" json:"status,omitempty"`
	Cpu                 float64              `protobuf:"fixed64,6,opt,name=cpu,proto3" form:"cpu" json:"cpu,omitempty"`
	Memory              float64              `protobuf:"fixed64,7,opt,name=memory,proto3" form:"memory" json:"memory,omitempty"`
	RestartPolicy       string               `protobuf:"bytes,8,opt,name=restartPolicy,proto3" form:"restartPolicy" json:"restartPolicy,omitempty"`
	VpcId               string               `protobuf:"bytes,9,opt,name=vpcId,proto3" form:"vpcId" json:"vpcId,omitempty"`
	VSwitchId           string               `protobuf:"bytes,10,opt,name=vSwitchId,proto3" form:"vSwitchId" json:"vSwitchId,omitempty"`
	SecurityGroupId     string               `protobuf:"bytes,11,opt,name=securityGroupId,proto3" form:"securityGroupId" json:"securityGroupId,omitempty"`
	Tags                []*Tag               `protobuf:"bytes,12,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	Containers          []*DescribeContainer `protobuf:"bytes,13,rep,name=containers,proto3" form:"containers" json:"containers,omitempty"`
	Events              []*DescribeEvent     `protobuf:"bytes,14,rep,name=events,proto3" form:"events" json:"events,omitempty"`
	TenantEniInstanceId string               `protobuf:"bytes,15,opt,name=tenantEniInstanceId,proto3" form:"tenantEniInstanceId" json:"tenantEniInstanceId,omitempty"`
	Volumes             []*DescribeVolume    `protobuf:"bytes,16,rep,name=volumes,proto3" form:"volumes" json:"volumes,omitempty"`
	VmId                string               `protobuf:"bytes,17,opt,name=vmId,proto3" form:"vmId" json:"vmId,omitempty"`
	CreationTime        string               `protobuf:"bytes,18,opt,name=creationTime,proto3" form:"creationTime" json:"creationTime,omitempty"`
	SucceededTime       string               `protobuf:"bytes,19,opt,name=succeededTime,proto3" form:"succeededTime" json:"succeededTime,omitempty"`
	FailedTime          string               `protobuf:"bytes,20,opt,name=failedTime,proto3" form:"failedTime" json:"failedTime,omitempty"`
	RequestId           string               `protobuf:"bytes,21,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	ProdInstId          string               `protobuf:"bytes,22,opt,name=prodInstId,proto3" form:"prodInstId" json:"prodInstId,omitempty" query:"prodInstId"`
	Gpu                 float64              `protobuf:"fixed64,23,opt,name=gpu,proto3" form:"gpu" json:"gpu,omitempty"`
	InitContainers      []*DescribeContainer `protobuf:"bytes,24,rep,name=initContainers,proto3" form:"initContainers" json:"initContainers,omitempty"`
	Ipv6Address         string               `protobuf:"bytes,25,opt,name=Ipv6Address,proto3" form:"ipv6Address" json:"ipv6Address,omitempty"`
	EpId                string               `protobuf:"bytes,26,opt,name=EpId,proto3" form:"epId" json:"epId,omitempty"`
}

func (x *GetContainerGroupResponse) Reset() {
	*x = GetContainerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerGroupResponse) ProtoMessage() {}

func (x *GetContainerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerGroupResponse.ProtoReflect.Descriptor instead.
func (*GetContainerGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{55}
}

func (x *GetContainerGroupResponse) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *GetContainerGroupResponse) GetContainerGroupName() string {
	if x != nil {
		return x.ContainerGroupName
	}
	return ""
}

func (x *GetContainerGroupResponse) GetIntranetIp() string {
	if x != nil {
		return x.IntranetIp
	}
	return ""
}

func (x *GetContainerGroupResponse) GetInternetIp() string {
	if x != nil {
		return x.InternetIp
	}
	return ""
}

func (x *GetContainerGroupResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetContainerGroupResponse) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *GetContainerGroupResponse) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *GetContainerGroupResponse) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *GetContainerGroupResponse) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *GetContainerGroupResponse) GetVSwitchId() string {
	if x != nil {
		return x.VSwitchId
	}
	return ""
}

func (x *GetContainerGroupResponse) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *GetContainerGroupResponse) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetContainerGroupResponse) GetContainers() []*DescribeContainer {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *GetContainerGroupResponse) GetEvents() []*DescribeEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetContainerGroupResponse) GetTenantEniInstanceId() string {
	if x != nil {
		return x.TenantEniInstanceId
	}
	return ""
}

func (x *GetContainerGroupResponse) GetVolumes() []*DescribeVolume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *GetContainerGroupResponse) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *GetContainerGroupResponse) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *GetContainerGroupResponse) GetSucceededTime() string {
	if x != nil {
		return x.SucceededTime
	}
	return ""
}

func (x *GetContainerGroupResponse) GetFailedTime() string {
	if x != nil {
		return x.FailedTime
	}
	return ""
}

func (x *GetContainerGroupResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetContainerGroupResponse) GetProdInstId() string {
	if x != nil {
		return x.ProdInstId
	}
	return ""
}

func (x *GetContainerGroupResponse) GetGpu() float64 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *GetContainerGroupResponse) GetInitContainers() []*DescribeContainer {
	if x != nil {
		return x.InitContainers
	}
	return nil
}

func (x *GetContainerGroupResponse) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *GetContainerGroupResponse) GetEpId() string {
	if x != nil {
		return x.EpId
	}
	return ""
}

type DescribeContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId                   string            `protobuf:"bytes,1,opt,name=containerId,proto3" form:"containerId" json:"containerId,omitempty" query:"containerId"`
	Name                          string            `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Memory                        float64           `protobuf:"fixed64,3,opt,name=memory,proto3" form:"memory" json:"memory,omitempty" query:"memory"`
	Cpu                           float64           `protobuf:"fixed64,4,opt,name=cpu,proto3" form:"cpu" json:"cpu,omitempty" query:"cpu"`
	Image                         string            `protobuf:"bytes,5,opt,name=image,proto3" form:"image" json:"image,omitempty" query:"image"`
	ImagePullPolicy               string            `protobuf:"bytes,6,opt,name=imagePullPolicy,proto3" form:"imagePullPolicy" json:"imagePullPolicy,omitempty" query:"imagePullPolicy"`
	WorkingDir                    string            `protobuf:"bytes,7,opt,name=workingDir,proto3" form:"workingDir" json:"workingDir,omitempty" query:"workingDir"`
	Ports                         []*ContainerPort  `protobuf:"bytes,8,rep,name=ports,proto3" form:"ports" json:"ports" query:"ports"`
	RestartCount                  int32             `protobuf:"varint,9,opt,name=restartCount,proto3" form:"restartCount" json:"restartCount,omitempty" query:"restartCount"`
	Ready                         bool              `protobuf:"varint,10,opt,name=ready,proto3" form:"ready" json:"ready,omitempty" query:"ready"`
	CurrentState                  *State            `protobuf:"bytes,11,opt,name=currentState,proto3" form:"currentState" json:"currentState,omitempty" query:"currentState"`
	PreviousState                 *State            `protobuf:"bytes,12,opt,name=previousState,proto3" form:"previousState" json:"previousState,omitempty" query:"previousState"`
	Command                       []string          `protobuf:"bytes,13,rep,name=command,proto3" form:"command" json:"command,omitempty" query:"command"`
	Args                          []string          `protobuf:"bytes,14,rep,name=args,proto3" form:"args" json:"args,omitempty" query:"args"`
	EnvironmentVar                []*EnvironmentVar `protobuf:"bytes,15,rep,name=environmentVar,proto3" form:"environmentVar" json:"environmentVar,omitempty" query:"environmentVar"`
	VolumeMount                   []*VolumeMount    `protobuf:"bytes,16,rep,name=volumeMount,proto3" form:"volumeMount" json:"volumeMount,omitempty" query:"volumeMount"`
	ReadinessProbe                *Probe            `protobuf:"bytes,17,opt,name=readinessProbe,proto3" form:"readinessProbe" json:"readinessProbe,omitempty" query:"readinessProbe"`
	LivenessProbe                 *Probe            `protobuf:"bytes,18,opt,name=livenessProbe,proto3" form:"livenessProbe" json:"livenessProbe,omitempty" query:"livenessProbe"`
	LifecyclePostStartHandlerExec []string          `protobuf:"bytes,19,rep,name=lifecyclePostStartHandlerExec,proto3" form:"lifecyclePostStartHandlerExec" json:"lifecyclePostStartHandlerExec,omitempty" query:"lifecyclePostStartHandlerExec"`
	LifecyclePreStopHandlerExec   []string          `protobuf:"bytes,20,rep,name=lifecyclePreStopHandlerExec,proto3" form:"lifecyclePreStopHandlerExec" json:"lifecyclePreStopHandlerExec,omitempty" query:"lifecyclePreStopHandlerExec"`
	Gpu                           float64           `protobuf:"fixed64,21,opt,name=gpu,proto3" form:"gpu" json:"gpu,omitempty" query:"gpu"`
}

func (x *DescribeContainer) Reset() {
	*x = DescribeContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainer) ProtoMessage() {}

func (x *DescribeContainer) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainer.ProtoReflect.Descriptor instead.
func (*DescribeContainer) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{56}
}

func (x *DescribeContainer) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *DescribeContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeContainer) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *DescribeContainer) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *DescribeContainer) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DescribeContainer) GetImagePullPolicy() string {
	if x != nil {
		return x.ImagePullPolicy
	}
	return ""
}

func (x *DescribeContainer) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *DescribeContainer) GetPorts() []*ContainerPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DescribeContainer) GetRestartCount() int32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *DescribeContainer) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *DescribeContainer) GetCurrentState() *State {
	if x != nil {
		return x.CurrentState
	}
	return nil
}

func (x *DescribeContainer) GetPreviousState() *State {
	if x != nil {
		return x.PreviousState
	}
	return nil
}

func (x *DescribeContainer) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *DescribeContainer) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *DescribeContainer) GetEnvironmentVar() []*EnvironmentVar {
	if x != nil {
		return x.EnvironmentVar
	}
	return nil
}

func (x *DescribeContainer) GetVolumeMount() []*VolumeMount {
	if x != nil {
		return x.VolumeMount
	}
	return nil
}

func (x *DescribeContainer) GetReadinessProbe() *Probe {
	if x != nil {
		return x.ReadinessProbe
	}
	return nil
}

func (x *DescribeContainer) GetLivenessProbe() *Probe {
	if x != nil {
		return x.LivenessProbe
	}
	return nil
}

func (x *DescribeContainer) GetLifecyclePostStartHandlerExec() []string {
	if x != nil {
		return x.LifecyclePostStartHandlerExec
	}
	return nil
}

func (x *DescribeContainer) GetLifecyclePreStopHandlerExec() []string {
	if x != nil {
		return x.LifecyclePreStopHandlerExec
	}
	return nil
}

func (x *DescribeContainer) GetGpu() float64 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason     string `protobuf:"bytes,1,opt,name=reason,proto3" form:"reason" json:"reason,omitempty" query:"reason"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" form:"message" json:"message,omitempty" query:"message"`
	State      string `protobuf:"bytes,3,opt,name=state,proto3" form:"state" json:"state,omitempty" query:"state"`
	StartTime  string `protobuf:"bytes,4,opt,name=startTime,proto3" form:"startTime" json:"startTime,omitempty" query:"startTime"`
	FinishTime string `protobuf:"bytes,5,opt,name=finishTime,proto3" form:"finishTime" json:"finishTime,omitempty" query:"finishTime"`
	Signal     int32  `protobuf:"varint,6,opt,name=signal,proto3" form:"signal" json:"signal,omitempty" query:"signal"`
	ExitCode   int32  `protobuf:"varint,7,opt,name=exitCode,proto3" form:"exitCode" json:"exitCode,omitempty" query:"exitCode"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{57}
}

func (x *State) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *State) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *State) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *State) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *State) GetFinishTime() string {
	if x != nil {
		return x.FinishTime
	}
	return ""
}

func (x *State) GetSignal() int32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

func (x *State) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type DescribeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string          `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Namespace          string          `protobuf:"bytes,2,opt,name=namespace,proto3" form:"namespace" json:"namespace,omitempty" query:"namespace"`
	Type               string          `protobuf:"bytes,3,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	Count              int32           `protobuf:"varint,4,opt,name=count,proto3" form:"count" json:"count,omitempty" query:"count"`
	FirstTimestamp     string          `protobuf:"bytes,5,opt,name=firstTimestamp,proto3" form:"firstTimestamp" json:"firstTimestamp,omitempty" query:"firstTimestamp"`
	LastTimestamp      string          `protobuf:"bytes,6,opt,name=lastTimestamp,proto3" form:"lastTimestamp" json:"lastTimestamp,omitempty" query:"lastTimestamp"`
	Message            string          `protobuf:"bytes,7,opt,name=message,proto3" form:"message" json:"message,omitempty" query:"message"`
	Reason             string          `protobuf:"bytes,8,opt,name=reason,proto3" form:"reason" json:"reason,omitempty" query:"reason"`
	ReportingComponent string          `protobuf:"bytes,9,opt,name=reportingComponent,proto3" form:"reportingComponent" json:"reportingComponent,omitempty" query:"reportingComponent"`
	ReportingInstance  string          `protobuf:"bytes,10,opt,name=reportingInstance,proto3" form:"reportingInstance" json:"reportingInstance,omitempty" query:"reportingInstance"`
	Source             *Source         `protobuf:"bytes,11,opt,name=source,proto3" form:"source" json:"source,omitempty" query:"source"`
	InvolvedObject     *InvolvedObject `protobuf:"bytes,12,opt,name=involvedObject,proto3" form:"involvedObject" json:"involvedObject,omitempty" query:"involvedObject"`
}

func (x *DescribeEvent) Reset() {
	*x = DescribeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeEvent) ProtoMessage() {}

func (x *DescribeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeEvent.ProtoReflect.Descriptor instead.
func (*DescribeEvent) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{58}
}

func (x *DescribeEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeEvent) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DescribeEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DescribeEvent) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DescribeEvent) GetFirstTimestamp() string {
	if x != nil {
		return x.FirstTimestamp
	}
	return ""
}

func (x *DescribeEvent) GetLastTimestamp() string {
	if x != nil {
		return x.LastTimestamp
	}
	return ""
}

func (x *DescribeEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DescribeEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DescribeEvent) GetReportingComponent() string {
	if x != nil {
		return x.ReportingComponent
	}
	return ""
}

func (x *DescribeEvent) GetReportingInstance() string {
	if x != nil {
		return x.ReportingInstance
	}
	return ""
}

func (x *DescribeEvent) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DescribeEvent) GetInvolvedObject() *InvolvedObject {
	if x != nil {
		return x.InvolvedObject
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component string `protobuf:"bytes,1,opt,name=component,proto3" form:"component" json:"component,omitempty" query:"component"`
	Host      string `protobuf:"bytes,2,opt,name=host,proto3" form:"host" json:"host,omitempty" query:"host"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{59}
}

func (x *Source) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *Source) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type InvolvedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind       string `protobuf:"bytes,1,opt,name=kind,proto3" form:"kind" json:"kind,omitempty" query:"kind"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Namespace  string `protobuf:"bytes,3,opt,name=namespace,proto3" form:"namespace" json:"namespace,omitempty" query:"namespace"`
	Uid        string `protobuf:"bytes,4,opt,name=uid,proto3" form:"uid" json:"uid,omitempty" query:"uid"`
	ApiVersion string `protobuf:"bytes,5,opt,name=apiVersion,proto3" form:"apiVersion" json:"apiVersion,omitempty" query:"apiVersion"`
}

func (x *InvolvedObject) Reset() {
	*x = InvolvedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvolvedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvolvedObject) ProtoMessage() {}

func (x *InvolvedObject) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvolvedObject.ProtoReflect.Descriptor instead.
func (*InvolvedObject) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{60}
}

func (x *InvolvedObject) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *InvolvedObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvolvedObject) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InvolvedObject) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *InvolvedObject) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

type DescribeVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// const
	Type                              string                   `protobuf:"bytes,1,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	Name                              string                   `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	EmptyDirVolumeMedium              string                   `protobuf:"bytes,3,opt,name=emptyDirVolumeMedium,proto3" form:"emptyDirVolumeMedium" json:"emptyDirVolumeMedium,omitempty" query:"emptyDirVolumeMedium"`
	EmptyDirVolumeSizeLimit           string                   `protobuf:"bytes,4,opt,name=emptyDirVolumeSizeLimit,proto3" form:"emptyDirVolumeSizeLimit" json:"emptyDirVolumeSizeLimit,omitempty" query:"emptyDirVolumeSizeLimit"`
	ConfigFileVolumeConfigFileToPaths []*DescribeVolumeCommon  `protobuf:"bytes,5,rep,name=configFileVolumeConfigFileToPaths,proto3" form:"configFileVolumeConfigFileToPaths" json:"configFileVolumeConfigFileToPaths,omitempty" query:"configFileVolumeConfigFileToPaths"`
	SecretVolumeFileToPaths           []*DescribeVolumeCommon  `protobuf:"bytes,6,rep,name=secretVolumeFileToPaths,proto3" form:"secretVolumeFileToPaths" json:"secretVolumeFileToPaths,omitempty" query:"secretVolumeFileToPaths"`
	DiskVolumeId                      string                   `protobuf:"bytes,7,opt,name=diskVolumeId,proto3" form:"diskVolumeId" json:"diskVolumeId,omitempty" query:"diskVolumeId"`
	DiskVolumeFsType                  string                   `protobuf:"bytes,8,opt,name=diskVolumeFsType,proto3" form:"diskVolumeFsType" json:"diskVolumeFsType,omitempty" query:"diskVolumeFsType"`
	DiskVolumeReadOnly                bool                     `protobuf:"varint,9,opt,name=diskVolumeReadOnly,proto3" form:"diskVolumeReadOnly" json:"diskVolumeReadOnly,omitempty" query:"diskVolumeReadOnly"`
	NasSourcePath                     string                   `protobuf:"bytes,10,opt,name=nasSourcePath,proto3" form:"nasSourcePath" json:"nasSourcePath,omitempty" query:"nasSourcePath"`
	NasReadOnly                       bool                     `protobuf:"varint,11,opt,name=nasReadOnly,proto3" form:"nasReadOnly" json:"nasReadOnly,omitempty" query:"nasReadOnly"`
	ZosBucket                         string                   `protobuf:"bytes,12,opt,name=zosBucket,proto3" form:"zosBucket" json:"zosBucket,omitempty" query:"zosBucket"`
	ZosUrl                            string                   `protobuf:"bytes,13,opt,name=zosUrl,proto3" form:"zosUrl" json:"zosUrl,omitempty" query:"zosUrl"`
	ZosReadOnly                       bool                     `protobuf:"varint,14,opt,name=zosReadOnly,proto3" form:"zosReadOnly" json:"zosReadOnly,omitempty" query:"zosReadOnly"`
	HostPathVolumePath                string                   `protobuf:"bytes,15,opt,name=hostPathVolumePath,proto3" form:"hostPathVolumePath" json:"hostPathVolumePath,omitempty" query:"hostPathVolumePath"`
	HostPathVolumeType                string                   `protobuf:"bytes,16,opt,name=hostPathVolumeType,proto3" form:"hostPathVolumeType" json:"hostPathVolumeType,omitempty" query:"hostPathVolumeType"`
	DownwardAPIVolumeItems            []*DownwardAPIVolumeItem `protobuf:"bytes,17,rep,name=downwardAPIVolumeItems,proto3" form:"downwardAPIVolumeItems" json:"downwardAPIVolumeItems,omitempty" query:"downwardAPIVolumeItems"`
	ProjectedVolumeItems              []*ProjectedVolumeItem   `protobuf:"bytes,18,rep,name=projectedVolumeItems,proto3" form:"projectedVolumeItems" json:"projectedVolumeItems,omitempty" query:"projectedVolumeItems"`
}

func (x *DescribeVolume) Reset() {
	*x = DescribeVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVolume) ProtoMessage() {}

func (x *DescribeVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVolume.ProtoReflect.Descriptor instead.
func (*DescribeVolume) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{61}
}

func (x *DescribeVolume) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DescribeVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeVolume) GetEmptyDirVolumeMedium() string {
	if x != nil {
		return x.EmptyDirVolumeMedium
	}
	return ""
}

func (x *DescribeVolume) GetEmptyDirVolumeSizeLimit() string {
	if x != nil {
		return x.EmptyDirVolumeSizeLimit
	}
	return ""
}

func (x *DescribeVolume) GetConfigFileVolumeConfigFileToPaths() []*DescribeVolumeCommon {
	if x != nil {
		return x.ConfigFileVolumeConfigFileToPaths
	}
	return nil
}

func (x *DescribeVolume) GetSecretVolumeFileToPaths() []*DescribeVolumeCommon {
	if x != nil {
		return x.SecretVolumeFileToPaths
	}
	return nil
}

func (x *DescribeVolume) GetDiskVolumeId() string {
	if x != nil {
		return x.DiskVolumeId
	}
	return ""
}

func (x *DescribeVolume) GetDiskVolumeFsType() string {
	if x != nil {
		return x.DiskVolumeFsType
	}
	return ""
}

func (x *DescribeVolume) GetDiskVolumeReadOnly() bool {
	if x != nil {
		return x.DiskVolumeReadOnly
	}
	return false
}

func (x *DescribeVolume) GetNasSourcePath() string {
	if x != nil {
		return x.NasSourcePath
	}
	return ""
}

func (x *DescribeVolume) GetNasReadOnly() bool {
	if x != nil {
		return x.NasReadOnly
	}
	return false
}

func (x *DescribeVolume) GetZosBucket() string {
	if x != nil {
		return x.ZosBucket
	}
	return ""
}

func (x *DescribeVolume) GetZosUrl() string {
	if x != nil {
		return x.ZosUrl
	}
	return ""
}

func (x *DescribeVolume) GetZosReadOnly() bool {
	if x != nil {
		return x.ZosReadOnly
	}
	return false
}

func (x *DescribeVolume) GetHostPathVolumePath() string {
	if x != nil {
		return x.HostPathVolumePath
	}
	return ""
}

func (x *DescribeVolume) GetHostPathVolumeType() string {
	if x != nil {
		return x.HostPathVolumeType
	}
	return ""
}

func (x *DescribeVolume) GetDownwardAPIVolumeItems() []*DownwardAPIVolumeItem {
	if x != nil {
		return x.DownwardAPIVolumeItems
	}
	return nil
}

func (x *DescribeVolume) GetProjectedVolumeItems() []*ProjectedVolumeItem {
	if x != nil {
		return x.ProjectedVolumeItems
	}
	return nil
}

type ProjectedVolumeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultMode int32               `protobuf:"varint,1,opt,name=defaultMode,proto3" form:"defaultMode" json:"defaultMode,omitempty" query:"defaultMode"`
	Sources     []*VolumeProjection `protobuf:"bytes,2,rep,name=sources,proto3" form:"sources" json:"sources,omitempty" query:"sources"`
}

func (x *ProjectedVolumeItem) Reset() {
	*x = ProjectedVolumeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectedVolumeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectedVolumeItem) ProtoMessage() {}

func (x *ProjectedVolumeItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectedVolumeItem.ProtoReflect.Descriptor instead.
func (*ProjectedVolumeItem) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{62}
}

func (x *ProjectedVolumeItem) GetDefaultMode() int32 {
	if x != nil {
		return x.DefaultMode
	}
	return 0
}

func (x *ProjectedVolumeItem) GetSources() []*VolumeProjection {
	if x != nil {
		return x.Sources
	}
	return nil
}

type DownwardAPIVolumeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode             int32             `protobuf:"varint,1,opt,name=mode,proto3" form:"mode" json:"mode,omitempty" query:"mode"`
	Path             string            `protobuf:"bytes,2,opt,name=path,proto3" form:"path" json:"path,omitempty" query:"path"`
	FieldRef         *FieldRef         `protobuf:"bytes,3,opt,name=fieldRef,proto3" form:"fieldRef" json:"fieldRef,omitempty" query:"fieldRef"`
	ResourceFieldRef *ResourceFieldRef `protobuf:"bytes,4,opt,name=resourceFieldRef,proto3" form:"resourceFieldRef" json:"resourceFieldRef,omitempty" query:"resourceFieldRef"`
}

func (x *DownwardAPIVolumeItem) Reset() {
	*x = DownwardAPIVolumeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownwardAPIVolumeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownwardAPIVolumeItem) ProtoMessage() {}

func (x *DownwardAPIVolumeItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownwardAPIVolumeItem.ProtoReflect.Descriptor instead.
func (*DownwardAPIVolumeItem) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{63}
}

func (x *DownwardAPIVolumeItem) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *DownwardAPIVolumeItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DownwardAPIVolumeItem) GetFieldRef() *FieldRef {
	if x != nil {
		return x.FieldRef
	}
	return nil
}

func (x *DownwardAPIVolumeItem) GetResourceFieldRef() *ResourceFieldRef {
	if x != nil {
		return x.ResourceFieldRef
	}
	return nil
}

type DescribeVolumeCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string `protobuf:"bytes,1,opt,name=path,proto3" form:"path" json:"path,omitempty" query:"path"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" form:"content" json:"content,omitempty" query:"content"`
}

func (x *DescribeVolumeCommon) Reset() {
	*x = DescribeVolumeCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVolumeCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVolumeCommon) ProtoMessage() {}

func (x *DescribeVolumeCommon) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVolumeCommon.ProtoReflect.Descriptor instead.
func (*DescribeVolumeCommon) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{64}
}

func (x *DescribeVolumeCommon) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DescribeVolumeCommon) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DescribeContainerGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupName string `protobuf:"bytes,1,opt,name=containerGroupName,proto3" form:"containerGroupName" json:"containerGroupName,omitempty"`
	VSwitchId          string `protobuf:"bytes,2,opt,name=vSwitchId,proto3" form:"vSwitchId" json:"vSwitchId,omitempty"`
	ContainerGroupIds  string `protobuf:"bytes,3,opt,name=containerGroupIds,proto3" form:"containerGroupIds" json:"containerGroupIds,omitempty"`
	Tags               []*Tag `protobuf:"bytes,4,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	Limit              int32  `protobuf:"varint,5,opt,name=limit,proto3" form:"limit" json:"limit,omitempty"`
	NextToken          string `protobuf:"bytes,6,opt,name=nextToken,proto3" form:"nextToken" json:"nextToken,omitempty"`
	Status             string `protobuf:"bytes,7,opt,name=status,proto3" form:"status" json:"status,omitempty"`
	EpId               string `protobuf:"bytes,8,opt,name=epId,proto3" form:"epId" json:"epId,omitempty"`
	RegionId           string `protobuf:"bytes,9,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeContainerGroupsRequest) Reset() {
	*x = DescribeContainerGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupsRequest) ProtoMessage() {}

func (x *DescribeContainerGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupsRequest.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupsRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{65}
}

func (x *DescribeContainerGroupsRequest) GetContainerGroupName() string {
	if x != nil {
		return x.ContainerGroupName
	}
	return ""
}

func (x *DescribeContainerGroupsRequest) GetVSwitchId() string {
	if x != nil {
		return x.VSwitchId
	}
	return ""
}

func (x *DescribeContainerGroupsRequest) GetContainerGroupIds() string {
	if x != nil {
		return x.ContainerGroupIds
	}
	return ""
}

func (x *DescribeContainerGroupsRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DescribeContainerGroupsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribeContainerGroupsRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DescribeContainerGroupsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DescribeContainerGroupsRequest) GetEpId() string {
	if x != nil {
		return x.EpId
	}
	return ""
}

func (x *DescribeContainerGroupsRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeContainerGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount      int32                        `protobuf:"varint,1,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty"`
	NextToken       string                       `protobuf:"bytes,2,opt,name=nextToken,proto3" form:"nextToken" json:"nextToken,omitempty"`
	ContainerGroups []*GetContainerGroupResponse `protobuf:"bytes,3,rep,name=containerGroups,proto3" form:"containerGroups" json:"containerGroups,omitempty"`
	RequestId       string                       `protobuf:"bytes,4,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *DescribeContainerGroupsResponse) Reset() {
	*x = DescribeContainerGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupsResponse) ProtoMessage() {}

func (x *DescribeContainerGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupsResponse.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupsResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{66}
}

func (x *DescribeContainerGroupsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DescribeContainerGroupsResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DescribeContainerGroupsResponse) GetContainerGroups() []*GetContainerGroupResponse {
	if x != nil {
		return x.ContainerGroups
	}
	return nil
}

func (x *DescribeContainerGroupsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ListContainerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchType  string `protobuf:"bytes,1,opt,name=searchType,proto3" json:"searchType,omitempty" query:"searchType"`
	SearchValue string `protobuf:"bytes,2,opt,name=searchValue,proto3" json:"searchValue,omitempty" query:"searchValue"`
	PageNow     int32  `protobuf:"varint,3,opt,name=pageNow,proto3" json:"pageNow,omitempty" query:"pageNow"`
	PageSize    int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty" query:"pageSize"`
	EpId        string `protobuf:"bytes,5,opt,name=epId,proto3" json:"epId,omitempty" query:"epId"`
	RegionId    string `protobuf:"bytes,6,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *ListContainerGroupRequest) Reset() {
	*x = ListContainerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContainerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerGroupRequest) ProtoMessage() {}

func (x *ListContainerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerGroupRequest.ProtoReflect.Descriptor instead.
func (*ListContainerGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{67}
}

func (x *ListContainerGroupRequest) GetSearchType() string {
	if x != nil {
		return x.SearchType
	}
	return ""
}

func (x *ListContainerGroupRequest) GetSearchValue() string {
	if x != nil {
		return x.SearchValue
	}
	return ""
}

func (x *ListContainerGroupRequest) GetPageNow() int32 {
	if x != nil {
		return x.PageNow
	}
	return 0
}

func (x *ListContainerGroupRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListContainerGroupRequest) GetEpId() string {
	if x != nil {
		return x.EpId
	}
	return ""
}

func (x *ListContainerGroupRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type ListContainerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64                   `protobuf:"varint,1,opt,name=total,proto3" form:"total" json:"total,omitempty" query:"total"`
	Pages     int32                   `protobuf:"varint,2,opt,name=pages,proto3" form:"pages" json:"pages,omitempty" query:"pages"`
	Records   []*ContainerGroupRecord `protobuf:"bytes,3,rep,name=records,proto3" form:"records" json:"records,omitempty" query:"records"`
	RequestId string                  `protobuf:"bytes,4,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *ListContainerGroupResponse) Reset() {
	*x = ListContainerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContainerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerGroupResponse) ProtoMessage() {}

func (x *ListContainerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerGroupResponse.ProtoReflect.Descriptor instead.
func (*ListContainerGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{68}
}

func (x *ListContainerGroupResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListContainerGroupResponse) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *ListContainerGroupResponse) GetRecords() []*ContainerGroupRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListContainerGroupResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ContainerGroupRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId   string  `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty" query:"containerGroupId"`
	ContainerGroupName string  `protobuf:"bytes,2,opt,name=containerGroupName,proto3" form:"containerGroupName" json:"containerGroupName,omitempty" query:"containerGroupName"`
	State              int32   `protobuf:"varint,3,opt,name=state,proto3" form:"state" json:"state,omitempty" query:"state"`
	FlavorId           string  `protobuf:"bytes,4,opt,name=flavorId,proto3" form:"flavorId" json:"flavorId,omitempty" query:"flavorId"`
	FlavorName         string  `protobuf:"bytes,5,opt,name=flavorName,proto3" form:"flavorName" json:"flavorName,omitempty" query:"flavorName"`
	CpuInfo            float64 `protobuf:"fixed64,6,opt,name=cpuInfo,proto3" form:"cpuInfo" json:"cpuInfo,omitempty" query:"cpuInfo"`
	MemInfo            float64 `protobuf:"fixed64,7,opt,name=memInfo,proto3" form:"memInfo" json:"memInfo,omitempty" query:"memInfo"`
	Eip                string  `protobuf:"bytes,8,opt,name=eip,proto3" form:"eip" json:"eip,omitempty" query:"eip"`
	SecureGroupId      string  `protobuf:"bytes,9,opt,name=secureGroupId,proto3" form:"secureGroupId" json:"secureGroupId,omitempty" query:"secureGroupId"`
	SecureGroupName    string  `protobuf:"bytes,10,opt,name=secureGroupName,proto3" form:"secureGroupName" json:"secureGroupName,omitempty" query:"secureGroupName"`
	VpcId              string  `protobuf:"bytes,11,opt,name=vpcId,proto3" form:"vpcId" json:"vpcId,omitempty" query:"vpcId"`
	VpcName            string  `protobuf:"bytes,12,opt,name=vpcName,proto3" form:"vpcName" json:"vpcName,omitempty" query:"vpcName"`
	PodIp              string  `protobuf:"bytes,13,opt,name=podIp,proto3" form:"podIp" json:"podIp,omitempty" query:"podIp"`
	Tags               []*Tag  `protobuf:"bytes,14,rep,name=tags,proto3" form:"tags" json:"tags,omitempty" query:"tags"`
	InstanceStatus     string  `protobuf:"bytes,15,opt,name=instanceStatus,proto3" form:"instanceStatus" json:"instanceStatus,omitempty" query:"instanceStatus"`
	CreatedTime        string  `protobuf:"bytes,16,opt,name=createdTime,proto3" form:"createdTime" json:"createdTime,omitempty" query:"createdTime"`
	ModifiedTime       string  `protobuf:"bytes,17,opt,name=modifiedTime,proto3" form:"modifiedTime" json:"modifiedTime,omitempty" query:"modifiedTime"`
	VSwitchId          string  `protobuf:"bytes,18,opt,name=vSwitchId,proto3" form:"vSwitchId" json:"vSwitchId,omitempty" query:"vSwitchId"`
	VSwitchName        string  `protobuf:"bytes,19,opt,name=vSwitchName,proto3" form:"vSwitchName" json:"vSwitchName,omitempty" query:"vSwitchName"`
	ProdInstId         string  `protobuf:"bytes,20,opt,name=prodInstId,proto3" form:"prodInstId" json:"prodInstId,omitempty" query:"prodInstId"`
	GpuInfo            float64 `protobuf:"fixed64,21,opt,name=gpuInfo,proto3" form:"gpuInfo" json:"gpuInfo,omitempty" query:"gpuInfo"`
	Ipv6Address        string  `protobuf:"bytes,22,opt,name=ipv6Address,proto3" form:"ipv6Address" json:"ipv6Address,omitempty" query:"ipv6Address"`
	EpId               string  `protobuf:"bytes,23,opt,name=epId,proto3" form:"epId" json:"epId,omitempty" query:"epId"`
}

func (x *ContainerGroupRecord) Reset() {
	*x = ContainerGroupRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerGroupRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerGroupRecord) ProtoMessage() {}

func (x *ContainerGroupRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerGroupRecord.ProtoReflect.Descriptor instead.
func (*ContainerGroupRecord) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{69}
}

func (x *ContainerGroupRecord) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *ContainerGroupRecord) GetContainerGroupName() string {
	if x != nil {
		return x.ContainerGroupName
	}
	return ""
}

func (x *ContainerGroupRecord) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ContainerGroupRecord) GetFlavorId() string {
	if x != nil {
		return x.FlavorId
	}
	return ""
}

func (x *ContainerGroupRecord) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *ContainerGroupRecord) GetCpuInfo() float64 {
	if x != nil {
		return x.CpuInfo
	}
	return 0
}

func (x *ContainerGroupRecord) GetMemInfo() float64 {
	if x != nil {
		return x.MemInfo
	}
	return 0
}

func (x *ContainerGroupRecord) GetEip() string {
	if x != nil {
		return x.Eip
	}
	return ""
}

func (x *ContainerGroupRecord) GetSecureGroupId() string {
	if x != nil {
		return x.SecureGroupId
	}
	return ""
}

func (x *ContainerGroupRecord) GetSecureGroupName() string {
	if x != nil {
		return x.SecureGroupName
	}
	return ""
}

func (x *ContainerGroupRecord) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ContainerGroupRecord) GetVpcName() string {
	if x != nil {
		return x.VpcName
	}
	return ""
}

func (x *ContainerGroupRecord) GetPodIp() string {
	if x != nil {
		return x.PodIp
	}
	return ""
}

func (x *ContainerGroupRecord) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ContainerGroupRecord) GetInstanceStatus() string {
	if x != nil {
		return x.InstanceStatus
	}
	return ""
}

func (x *ContainerGroupRecord) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *ContainerGroupRecord) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

func (x *ContainerGroupRecord) GetVSwitchId() string {
	if x != nil {
		return x.VSwitchId
	}
	return ""
}

func (x *ContainerGroupRecord) GetVSwitchName() string {
	if x != nil {
		return x.VSwitchName
	}
	return ""
}

func (x *ContainerGroupRecord) GetProdInstId() string {
	if x != nil {
		return x.ProdInstId
	}
	return ""
}

func (x *ContainerGroupRecord) GetGpuInfo() float64 {
	if x != nil {
		return x.GpuInfo
	}
	return 0
}

func (x *ContainerGroupRecord) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *ContainerGroupRecord) GetEpId() string {
	if x != nil {
		return x.EpId
	}
	return ""
}

type DescribeContainerGroupEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupIds  string `protobuf:"bytes,1,opt,name=containerGroupIds,proto3" form:"containerGroupIds" json:"containerGroupIds,omitempty"`
	ContainerGroupName string `protobuf:"bytes,2,opt,name=containerGroupName,proto3" form:"containerGroupName" json:"containerGroupName,omitempty"`
	VSwitchId          string `protobuf:"bytes,3,opt,name=vSwitchId,proto3" form:"vSwitchId" json:"vSwitchId,omitempty"`
	Limit              int32  `protobuf:"varint,4,opt,name=limit,proto3" form:"limit" json:"limit,omitempty"`
	EventSource        string `protobuf:"bytes,5,opt,name=eventSource,proto3" form:"eventSource" json:"eventSource,omitempty"`
	Tags               []*Tag `protobuf:"bytes,6,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	NextToken          string `protobuf:"bytes,7,opt,name=nextToken,proto3" form:"nextToken" json:"nextToken,omitempty"`
	EpId               string `protobuf:"bytes,8,opt,name=epId,proto3" form:"epId" json:"epId,omitempty"`
	RegionId           string `protobuf:"bytes,9,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeContainerGroupEventRequest) Reset() {
	*x = DescribeContainerGroupEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupEventRequest) ProtoMessage() {}

func (x *DescribeContainerGroupEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupEventRequest.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupEventRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{70}
}

func (x *DescribeContainerGroupEventRequest) GetContainerGroupIds() string {
	if x != nil {
		return x.ContainerGroupIds
	}
	return ""
}

func (x *DescribeContainerGroupEventRequest) GetContainerGroupName() string {
	if x != nil {
		return x.ContainerGroupName
	}
	return ""
}

func (x *DescribeContainerGroupEventRequest) GetVSwitchId() string {
	if x != nil {
		return x.VSwitchId
	}
	return ""
}

func (x *DescribeContainerGroupEventRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribeContainerGroupEventRequest) GetEventSource() string {
	if x != nil {
		return x.EventSource
	}
	return ""
}

func (x *DescribeContainerGroupEventRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DescribeContainerGroupEventRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DescribeContainerGroupEventRequest) GetEpId() string {
	if x != nil {
		return x.EpId
	}
	return ""
}

func (x *DescribeContainerGroupEventRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeContainerGroupEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32                              `protobuf:"varint,1,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty"`
	Data       []*DescribeContainerGroupEventData `protobuf:"bytes,2,rep,name=data,proto3" form:"data" json:"data,omitempty"`
	RequestId  string                             `protobuf:"bytes,3,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty"`
}

func (x *DescribeContainerGroupEventResponse) Reset() {
	*x = DescribeContainerGroupEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupEventResponse) ProtoMessage() {}

func (x *DescribeContainerGroupEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupEventResponse.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupEventResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{71}
}

func (x *DescribeContainerGroupEventResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DescribeContainerGroupEventResponse) GetData() []*DescribeContainerGroupEventData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DescribeContainerGroupEventResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DescribeContainerGroupEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string           `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty" query:"containerGroupId"`
	Name             string           `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Namespace        string           `protobuf:"bytes,3,opt,name=namespace,proto3" form:"namespace" json:"namespace,omitempty" query:"namespace"`
	Uuid             string           `protobuf:"bytes,4,opt,name=uuid,proto3" form:"uuid" json:"uuid,omitempty" query:"uuid"`
	Labels           string           `protobuf:"bytes,5,opt,name=labels,proto3" form:"labels" json:"labels,omitempty" query:"labels"`
	Events           []*DescribeEvent `protobuf:"bytes,6,rep,name=events,proto3" form:"events" json:"events,omitempty" query:"events"`
}

func (x *DescribeContainerGroupEventData) Reset() {
	*x = DescribeContainerGroupEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupEventData) ProtoMessage() {}

func (x *DescribeContainerGroupEventData) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupEventData.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupEventData) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{72}
}

func (x *DescribeContainerGroupEventData) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *DescribeContainerGroupEventData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeContainerGroupEventData) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DescribeContainerGroupEventData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DescribeContainerGroupEventData) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *DescribeContainerGroupEventData) GetEvents() []*DescribeEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// status
type DescribeContainerGroupStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupIds  string `protobuf:"bytes,1,opt,name=containerGroupIds,proto3" form:"containerGroupIds" json:"containerGroupIds,omitempty"`
	ContainerGroupName string `protobuf:"bytes,2,opt,name=containerGroupName,proto3" form:"containerGroupName" json:"containerGroupName,omitempty"`
	VSwitchId          string `protobuf:"bytes,3,opt,name=vSwitchId,proto3" form:"vSwitchId" json:"vSwitchId,omitempty"`
	Limit              int32  `protobuf:"varint,4,opt,name=limit,proto3" form:"limit" json:"limit,omitempty"`
	Tags               []*Tag `protobuf:"bytes,5,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	NextToken          string `protobuf:"bytes,6,opt,name=nextToken,proto3" form:"nextToken" json:"nextToken,omitempty"`
	EpId               string `protobuf:"bytes,7,opt,name=epId,proto3" form:"epId" json:"epId,omitempty"`
	RegionId           string `protobuf:"bytes,8,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeContainerGroupStatusRequest) Reset() {
	*x = DescribeContainerGroupStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupStatusRequest) ProtoMessage() {}

func (x *DescribeContainerGroupStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupStatusRequest.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{73}
}

func (x *DescribeContainerGroupStatusRequest) GetContainerGroupIds() string {
	if x != nil {
		return x.ContainerGroupIds
	}
	return ""
}

func (x *DescribeContainerGroupStatusRequest) GetContainerGroupName() string {
	if x != nil {
		return x.ContainerGroupName
	}
	return ""
}

func (x *DescribeContainerGroupStatusRequest) GetVSwitchId() string {
	if x != nil {
		return x.VSwitchId
	}
	return ""
}

func (x *DescribeContainerGroupStatusRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribeContainerGroupStatusRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DescribeContainerGroupStatusRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DescribeContainerGroupStatusRequest) GetEpId() string {
	if x != nil {
		return x.EpId
	}
	return ""
}

func (x *DescribeContainerGroupStatusRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeContainerGroupStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string                          `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty"`
	NextToken  string                          `protobuf:"bytes,2,opt,name=nextToken,proto3" form:"nextToken" json:"nextToken,omitempty"`
	TotalCount int32                           `protobuf:"varint,3,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty"`
	Data       []*DescribeContainerGroupStatus `protobuf:"bytes,4,rep,name=data,proto3" form:"data" json:"data,omitempty"`
}

func (x *DescribeContainerGroupStatusResponse) Reset() {
	*x = DescribeContainerGroupStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupStatusResponse) ProtoMessage() {}

func (x *DescribeContainerGroupStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupStatusResponse.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{74}
}

func (x *DescribeContainerGroupStatusResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DescribeContainerGroupStatusResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DescribeContainerGroupStatusResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DescribeContainerGroupStatusResponse) GetData() []*DescribeContainerGroupStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type DescribeContainerGroupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string     `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty" query:"containerGroupId"`
	Name             string     `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Status           string     `protobuf:"bytes,3,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`
	Uuid             string     `protobuf:"bytes,4,opt,name=uuid,proto3" form:"uuid" json:"uuid,omitempty" query:"uuid"`
	Annotations      string     `protobuf:"bytes,5,opt,name=annotations,proto3" form:"annotations" json:"annotations,omitempty" query:"annotations"`
	PodStatus        *PodStatus `protobuf:"bytes,6,opt,name=podStatus,proto3" form:"podStatus" json:"podStatus,omitempty" query:"podStatus"`
}

func (x *DescribeContainerGroupStatus) Reset() {
	*x = DescribeContainerGroupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupStatus) ProtoMessage() {}

func (x *DescribeContainerGroupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupStatus.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupStatus) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{75}
}

func (x *DescribeContainerGroupStatus) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *DescribeContainerGroupStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeContainerGroupStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DescribeContainerGroupStatus) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DescribeContainerGroupStatus) GetAnnotations() string {
	if x != nil {
		return x.Annotations
	}
	return ""
}

func (x *DescribeContainerGroupStatus) GetPodStatus() *PodStatus {
	if x != nil {
		return x.PodStatus
	}
	return nil
}

type PodStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions          []*Conditions      `protobuf:"bytes,1,rep,name=conditions,proto3" form:"conditions" json:"conditions,omitempty" query:"conditions"`
	ContainerStatuses   []*ContainerStatus `protobuf:"bytes,2,rep,name=containerStatuses,proto3" form:"containerStatuses" json:"containerStatuses,omitempty" query:"containerStatuses"`
	HostIp              string             `protobuf:"bytes,3,opt,name=hostIp,proto3" form:"hostIp" json:"hostIp,omitempty" query:"hostIp"`
	Phase               string             `protobuf:"bytes,4,opt,name=phase,proto3" form:"phase" json:"phase,omitempty" query:"phase"`
	PodIp               string             `protobuf:"bytes,5,opt,name=podIp,proto3" form:"podIp" json:"podIp,omitempty" query:"podIp"`
	PodIps              []*PodIP           `protobuf:"bytes,6,rep,name=podIps,proto3" form:"podIps" json:"podIps,omitempty" query:"podIps"`
	QosClass            string             `protobuf:"bytes,7,opt,name=qosClass,proto3" form:"qosClass" json:"qosClass,omitempty" query:"qosClass"`
	StartTime           string             `protobuf:"bytes,8,opt,name=startTime,proto3" form:"startTime" json:"startTime,omitempty" query:"startTime"`
	TenantEniInstanceId string             `protobuf:"bytes,9,opt,name=tenantEniInstanceId,proto3" form:"tenantEniInstanceId" json:"tenantEniInstanceId,omitempty" query:"tenantEniInstanceId"`
}

func (x *PodStatus) Reset() {
	*x = PodStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatus) ProtoMessage() {}

func (x *PodStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatus.ProtoReflect.Descriptor instead.
func (*PodStatus) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{76}
}

func (x *PodStatus) GetConditions() []*Conditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *PodStatus) GetContainerStatuses() []*ContainerStatus {
	if x != nil {
		return x.ContainerStatuses
	}
	return nil
}

func (x *PodStatus) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *PodStatus) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *PodStatus) GetPodIp() string {
	if x != nil {
		return x.PodIp
	}
	return ""
}

func (x *PodStatus) GetPodIps() []*PodIP {
	if x != nil {
		return x.PodIps
	}
	return nil
}

func (x *PodStatus) GetQosClass() string {
	if x != nil {
		return x.QosClass
	}
	return ""
}

func (x *PodStatus) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *PodStatus) GetTenantEniInstanceId() string {
	if x != nil {
		return x.TenantEniInstanceId
	}
	return ""
}

type Conditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string `protobuf:"bytes,1,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	Status             string `protobuf:"bytes,2,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`
	LastProbeTime      string `protobuf:"bytes,3,opt,name=lastProbeTime,proto3" form:"lastProbeTime" json:"lastProbeTime,omitempty" query:"lastProbeTime"`
	LastTransitionTime string `protobuf:"bytes,4,opt,name=lastTransitionTime,proto3" form:"lastTransitionTime" json:"lastTransitionTime,omitempty" query:"lastTransitionTime"`
	Reason             string `protobuf:"bytes,5,opt,name=reason,proto3" form:"reason" json:"reason,omitempty" query:"reason"`
	Message            string `protobuf:"bytes,6,opt,name=message,proto3" form:"message" json:"message,omitempty" query:"message"`
}

func (x *Conditions) Reset() {
	*x = Conditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conditions) ProtoMessage() {}

func (x *Conditions) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conditions.ProtoReflect.Descriptor instead.
func (*Conditions) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{77}
}

func (x *Conditions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Conditions) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Conditions) GetLastProbeTime() string {
	if x != nil {
		return x.LastProbeTime
	}
	return ""
}

func (x *Conditions) GetLastTransitionTime() string {
	if x != nil {
		return x.LastTransitionTime
	}
	return ""
}

func (x *Conditions) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Conditions) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// IP address information for entries in the (plural) PodIPs field.
// Each entry includes:
//
//	IP: An IP address allocated to the pod. Routable at least within the cluster.
type PodIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ip is an IP address (IPv4 or IPv6) assigned to the pod
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" form:"ip" json:"ip,omitempty" query:"ip"`
}

func (x *PodIP) Reset() {
	*x = PodIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodIP) ProtoMessage() {}

func (x *PodIP) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodIP.ProtoReflect.Descriptor instead.
func (*PodIP) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{78}
}

func (x *PodIP) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// ContainerStatus contains details for the current status of this container.
type ContainerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a DNS_LABEL representing the unique name of the container.
	// Each container in a pod must have a unique name across all container types.
	// Cannot be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	// State holds details about the container's current condition.
	State *ContainerState `protobuf:"bytes,2,opt,name=state,proto3" form:"state" json:"state,omitempty" query:"state"`
	// LastTerminationState holds the last termination state of the container to
	// help debug container crashes and restarts. This field is not
	// populated if the container is still running and RestartCount is 0.
	LastState *ContainerState `protobuf:"bytes,3,opt,name=lastState,proto3" form:"lastState" json:"lastState,omitempty" query:"lastState"`
	// Ready specifies whether the container is currently passing its readiness check.
	// The value will change as readiness probes keep executing. If no readiness
	// probes are specified, this field defaults to true once the container is
	// fully started (see Started field).
	//
	// The value is typically used to determine whether a container is ready to
	// accept traffic.
	Ready bool `protobuf:"varint,4,opt,name=ready,proto3" form:"ready" json:"ready,omitempty" query:"ready"`
	// RestartCount holds the number of times the container has been restarted.
	// Kubelet makes an effort to always increment the value, but there
	// are cases when the state may be lost due to node restarts and then the value
	// may be reset to 0. The value is never negative.
	RestartCount int32 `protobuf:"varint,5,opt,name=restartCount,proto3" form:"restartCount" json:"restartCount,omitempty" query:"restartCount"`
	// Image is the name of container image that the container is running.
	// The container image may not match the image used in the PodSpec,
	// as it may have been resolved by the runtime.
	// More info: https://kubernetes.io/docs/concepts/containers/images.
	Image string `protobuf:"bytes,6,opt,name=image,proto3" form:"image" json:"image,omitempty" query:"image"`
	// ImageID is the image ID of the container's image. The image ID may not
	// match the image ID of the image used in the PodSpec, as it may have been
	// resolved by the runtime.
	ImageID string `protobuf:"bytes,7,opt,name=imageID,proto3" form:"imageID" json:"imageID,omitempty" query:"imageID"`
	// ContainerID is the ID of the container in the format '<type>://<container_id>'.
	// Where type is a container runtime identifier, returned from Version call of CRI API
	// (for example "containerd").
	ContainerID string `protobuf:"bytes,8,opt,name=containerID,proto3" form:"containerID" json:"containerID,omitempty" query:"containerID"`
	// Started indicates whether the container has finished its postStart lifecycle hook
	// and passed its startup probe.
	// Initialized as false, becomes true after startupProbe is considered
	// successful. Resets to false when the container is restarted, or if kubelet
	// loses state temporarily. In both cases, startup probes will run again.
	// Is always true when no startupProbe is defined and container is running and
	// has passed the postStart lifecycle hook. The null value must be treated the
	// same as false.
	Started bool `protobuf:"varint,9,opt,name=started,proto3" form:"started" json:"started,omitempty" query:"started"`
	// AllocatedResources represents the compute resources allocated for this container by the
	// node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission
	// and after successfully admitting desired pod resize.
	// +featureGate=InPlacePodVerticalScaling
	// +optional
	AllocatedResources map[string]*Quantity `protobuf:"bytes,10,rep,name=allocatedResources,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" form:"allocatedResources" json:"allocatedResources,omitempty" query:"allocatedResources"`
}

func (x *ContainerStatus) Reset() {
	*x = ContainerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatus) ProtoMessage() {}

func (x *ContainerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatus.ProtoReflect.Descriptor instead.
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{79}
}

func (x *ContainerStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerStatus) GetState() *ContainerState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ContainerStatus) GetLastState() *ContainerState {
	if x != nil {
		return x.LastState
	}
	return nil
}

func (x *ContainerStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *ContainerStatus) GetRestartCount() int32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *ContainerStatus) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ContainerStatus) GetImageID() string {
	if x != nil {
		return x.ImageID
	}
	return ""
}

func (x *ContainerStatus) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *ContainerStatus) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

func (x *ContainerStatus) GetAllocatedResources() map[string]*Quantity {
	if x != nil {
		return x.AllocatedResources
	}
	return nil
}

type Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ string `protobuf:"bytes,1,opt,name=string,proto3" form:"string" json:"string,omitempty" query:"string"`
}

func (x *Quantity) Reset() {
	*x = Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quantity) ProtoMessage() {}

func (x *Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quantity.ProtoReflect.Descriptor instead.
func (*Quantity) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{80}
}

func (x *Quantity) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

// ContainerState holds a possible state of container.
// Only one of its members may be specified.
// If none of them is specified, the default one is ContainerStateWaiting.
type ContainerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details about a waiting container
	Waiting *ContainerStateWaiting `protobuf:"bytes,1,opt,name=waiting,proto3" form:"waiting" json:"waiting,omitempty" query:"waiting"`
	// Details about a running container
	// +optional
	Running *ContainerStateRunning `protobuf:"bytes,2,opt,name=running,proto3" form:"running" json:"running,omitempty" query:"running"`
	// Details about a terminated container
	// +optional
	Terminated *ContainerStateTerminated `protobuf:"bytes,3,opt,name=terminated,proto3" form:"terminated" json:"terminated,omitempty" query:"terminated"`
}

func (x *ContainerState) Reset() {
	*x = ContainerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerState) ProtoMessage() {}

func (x *ContainerState) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerState.ProtoReflect.Descriptor instead.
func (*ContainerState) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{81}
}

func (x *ContainerState) GetWaiting() *ContainerStateWaiting {
	if x != nil {
		return x.Waiting
	}
	return nil
}

func (x *ContainerState) GetRunning() *ContainerStateRunning {
	if x != nil {
		return x.Running
	}
	return nil
}

func (x *ContainerState) GetTerminated() *ContainerStateTerminated {
	if x != nil {
		return x.Terminated
	}
	return nil
}

// ContainerStateWaiting is a waiting state of a container.
type ContainerStateWaiting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (brief) reason the container is not yet running.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" form:"reason" json:"reason,omitempty" query:"reason"`
	// Message regarding why the container is not yet running.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" form:"message" json:"message,omitempty" query:"message"`
}

func (x *ContainerStateWaiting) Reset() {
	*x = ContainerStateWaiting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStateWaiting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStateWaiting) ProtoMessage() {}

func (x *ContainerStateWaiting) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStateWaiting.ProtoReflect.Descriptor instead.
func (*ContainerStateWaiting) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{82}
}

func (x *ContainerStateWaiting) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ContainerStateWaiting) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ContainerStateRunning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time at which the container was last (re-)started
	StartedAt string `protobuf:"bytes,1,opt,name=startedAt,proto3" form:"startedAt" json:"startedAt,omitempty" query:"startedAt"`
}

func (x *ContainerStateRunning) Reset() {
	*x = ContainerStateRunning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStateRunning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStateRunning) ProtoMessage() {}

func (x *ContainerStateRunning) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStateRunning.ProtoReflect.Descriptor instead.
func (*ContainerStateRunning) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{83}
}

func (x *ContainerStateRunning) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

// ContainerStateTerminated is a terminated state of a container.
type ContainerStateTerminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exit status from the last termination of the container
	ExitCode int32 `protobuf:"varint,1,opt,name=exitCode,proto3" form:"exitCode" json:"exitCode,omitempty" query:"exitCode"`
	// Signal from the last termination of the container
	Signal int32 `protobuf:"varint,2,opt,name=signal,proto3" form:"signal" json:"signal,omitempty" query:"signal"`
	// (brief) reason from the last termination of the container
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" form:"reason" json:"reason,omitempty" query:"reason"`
	// Message regarding the last termination of the container
	Message string `protobuf:"bytes,4,opt,name=message,proto3" form:"message" json:"message,omitempty" query:"message"`
	// Time at which previous execution of the container started
	StartedAt string `protobuf:"bytes,5,opt,name=startedAt,proto3" form:"startedAt" json:"startedAt,omitempty" query:"startedAt"`
	// Time at which the container last terminated
	FinishedAt string `protobuf:"bytes,6,opt,name=finishedAt,proto3" form:"finishedAt" json:"finishedAt,omitempty" query:"finishedAt"`
	// Container's ID in the format '<type>://<container_id>'
	ContainerID string `protobuf:"bytes,7,opt,name=containerID,proto3" form:"containerID" json:"containerID,omitempty" query:"containerID"`
}

func (x *ContainerStateTerminated) Reset() {
	*x = ContainerStateTerminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStateTerminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStateTerminated) ProtoMessage() {}

func (x *ContainerStateTerminated) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStateTerminated.ProtoReflect.Descriptor instead.
func (*ContainerStateTerminated) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{84}
}

func (x *ContainerStateTerminated) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ContainerStateTerminated) GetSignal() int32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

func (x *ContainerStateTerminated) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ContainerStateTerminated) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ContainerStateTerminated) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *ContainerStateTerminated) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

func (x *ContainerStateTerminated) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

// monitor
type DescribeContainerGroupMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" json:"containerGroupId,omitempty" path:"containerGroupId"`
	StartTime        int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty" query:"startTime"`
	EndTime          int64  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty" query:"endTime"`
	Period           int32  `protobuf:"varint,4,opt,name=period,proto3" json:"period,omitempty" query:"period"`
	RegionId         string `protobuf:"bytes,5,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeContainerGroupMetricRequest) Reset() {
	*x = DescribeContainerGroupMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupMetricRequest) ProtoMessage() {}

func (x *DescribeContainerGroupMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupMetricRequest.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupMetricRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{85}
}

func (x *DescribeContainerGroupMetricRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *DescribeContainerGroupMetricRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DescribeContainerGroupMetricRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DescribeContainerGroupMetricRequest) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *DescribeContainerGroupMetricRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeMultiContainerGroupMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupIds string `protobuf:"bytes,1,opt,name=containerGroupIds,proto3" json:"containerGroupIds,omitempty" query:"containerGroupIds"`
	StartTime         int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty" query:"startTime"`
	EndTime           int64  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty" query:"endTime"`
	Period            int32  `protobuf:"varint,4,opt,name=period,proto3" json:"period,omitempty" query:"period"`
	EpId              string `protobuf:"bytes,5,opt,name=epId,proto3" json:"epId,omitempty" query:"epId"`
	RegionId          string `protobuf:"bytes,6,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeMultiContainerGroupMetricRequest) Reset() {
	*x = DescribeMultiContainerGroupMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMultiContainerGroupMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMultiContainerGroupMetricRequest) ProtoMessage() {}

func (x *DescribeMultiContainerGroupMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMultiContainerGroupMetricRequest.ProtoReflect.Descriptor instead.
func (*DescribeMultiContainerGroupMetricRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{86}
}

func (x *DescribeMultiContainerGroupMetricRequest) GetContainerGroupIds() string {
	if x != nil {
		return x.ContainerGroupIds
	}
	return ""
}

func (x *DescribeMultiContainerGroupMetricRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DescribeMultiContainerGroupMetricRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DescribeMultiContainerGroupMetricRequest) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *DescribeMultiContainerGroupMetricRequest) GetEpId() string {
	if x != nil {
		return x.EpId
	}
	return ""
}

func (x *DescribeMultiContainerGroupMetricRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeContainerGroupMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string    `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Records   []*Record `protobuf:"bytes,2,rep,name=records,proto3" form:"records" json:"records,omitempty" query:"records"`
	RequestId string    `protobuf:"bytes,3,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *DescribeContainerGroupMetricResponse) Reset() {
	*x = DescribeContainerGroupMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerGroupMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerGroupMetricResponse) ProtoMessage() {}

func (x *DescribeContainerGroupMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerGroupMetricResponse.ProtoReflect.Descriptor instead.
func (*DescribeContainerGroupMetricResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{87}
}

func (x *DescribeContainerGroupMetricResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeContainerGroupMetricResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *DescribeContainerGroupMetricResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DescribeMultiContainerGroupMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics   []*DescribeContainerGroupMetricResponse `protobuf:"bytes,1,rep,name=metrics,proto3" form:"metrics" json:"metrics,omitempty" query:"metrics"`
	RequestId string                                  `protobuf:"bytes,2,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *DescribeMultiContainerGroupMetricResponse) Reset() {
	*x = DescribeMultiContainerGroupMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMultiContainerGroupMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMultiContainerGroupMetricResponse) ProtoMessage() {}

func (x *DescribeMultiContainerGroupMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMultiContainerGroupMetricResponse.ProtoReflect.Descriptor instead.
func (*DescribeMultiContainerGroupMetricResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{88}
}

func (x *DescribeMultiContainerGroupMetricResponse) GetMetrics() []*DescribeContainerGroupMetricResponse {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *DescribeMultiContainerGroupMetricResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  string             `protobuf:"bytes,1,opt,name=timestamp,proto3" form:"timestamp" json:"timestamp,omitempty" query:"timestamp"`
	Network    *Network           `protobuf:"bytes,2,opt,name=network,proto3" form:"network" json:"network,omitempty" query:"network"`
	Cpu        *CPU               `protobuf:"bytes,3,opt,name=cpu,proto3" form:"cpu" json:"cpu,omitempty" query:"cpu"`
	Memory     *Memory            `protobuf:"bytes,4,opt,name=memory,proto3" form:"memory" json:"memory,omitempty" query:"memory"`
	Gpu        *GPU               `protobuf:"bytes,5,opt,name=gpu,proto3" form:"gpu" json:"gpu,omitempty" query:"gpu"`
	Disk       []*Disk            `protobuf:"bytes,6,rep,name=disk,proto3" form:"disk" json:"disk,omitempty" query:"disk"`
	FileSystem []*FileSystem      `protobuf:"bytes,7,rep,name=fileSystem,proto3" form:"fileSystem" json:"fileSystem,omitempty" query:"fileSystem"`
	Containers []*ContainerMetric `protobuf:"bytes,8,rep,name=containers,proto3" form:"containers" json:"containers,omitempty" query:"containers"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{89}
}

func (x *Record) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Record) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Record) GetCpu() *CPU {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *Record) GetMemory() *Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Record) GetGpu() *GPU {
	if x != nil {
		return x.Gpu
	}
	return nil
}

func (x *Record) GetDisk() []*Disk {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *Record) GetFileSystem() []*FileSystem {
	if x != nil {
		return x.FileSystem
	}
	return nil
}

func (x *Record) GetContainers() []*ContainerMetric {
	if x != nil {
		return x.Containers
	}
	return nil
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*Interface `protobuf:"bytes,1,rep,name=interfaces,proto3" form:"interfaces" json:"interfaces,omitempty" query:"interfaces"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{90}
}

func (x *Network) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	NetworkReceiveRate  int32  `protobuf:"varint,2,opt,name=networkReceiveRate,proto3" form:"networkReceiveRate" json:"networkReceiveRate,omitempty" query:"networkReceiveRate"`
	NetworkTransmitRate int32  `protobuf:"varint,3,opt,name=networkTransmitRate,proto3" form:"networkTransmitRate" json:"networkTransmitRate,omitempty" query:"networkTransmitRate"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{91}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetNetworkReceiveRate() int32 {
	if x != nil {
		return x.NetworkReceiveRate
	}
	return 0
}

func (x *Interface) GetNetworkTransmitRate() int32 {
	if x != nil {
		return x.NetworkTransmitRate
	}
	return 0
}

type CPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUsage             float64 `protobuf:"fixed64,1,opt,name=cpuUsage,proto3" form:"cpuUsage" json:"cpuUsage,omitempty" query:"cpuUsage"`
	CpuNanoCores         int32   `protobuf:"varint,2,opt,name=cpuNanoCores,proto3" form:"cpuNanoCores" json:"cpuNanoCores,omitempty" query:"cpuNanoCores"`
	Limit                int32   `protobuf:"varint,3,opt,name=limit,proto3" form:"limit" json:"limit,omitempty" query:"limit"`
	UsageCoreNanoSeconds int32   `protobuf:"varint,4,opt,name=usageCoreNanoSeconds,proto3" form:"usageCoreNanoSeconds" json:"usageCoreNanoSeconds,omitempty" query:"usageCoreNanoSeconds"`
	Load                 int32   `protobuf:"varint,5,opt,name=load,proto3" form:"load" json:"load,omitempty" query:"load"`
}

func (x *CPU) Reset() {
	*x = CPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPU) ProtoMessage() {}

func (x *CPU) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPU.ProtoReflect.Descriptor instead.
func (*CPU) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{92}
}

func (x *CPU) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *CPU) GetCpuNanoCores() int32 {
	if x != nil {
		return x.CpuNanoCores
	}
	return 0
}

func (x *CPU) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CPU) GetUsageCoreNanoSeconds() int32 {
	if x != nil {
		return x.UsageCoreNanoSeconds
	}
	return 0
}

func (x *CPU) GetLoad() int32 {
	if x != nil {
		return x.Load
	}
	return 0
}

type Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryUsage    float64 `protobuf:"fixed64,1,opt,name=memoryUsage,proto3" form:"memoryUsage" json:"memoryUsage,omitempty" query:"memoryUsage"`
	InactiveFile   int32   `protobuf:"varint,2,opt,name=inactiveFile,proto3" form:"inactiveFile" json:"inactiveFile,omitempty" query:"inactiveFile"`
	Rss            int32   `protobuf:"varint,3,opt,name=rss,proto3" form:"rss" json:"rss,omitempty" query:"rss"`
	UsageBytes     int32   `protobuf:"varint,4,opt,name=usageBytes,proto3" form:"usageBytes" json:"usageBytes,omitempty" query:"usageBytes"`
	WorkingSet     int32   `protobuf:"varint,5,opt,name=workingSet,proto3" form:"workingSet" json:"workingSet,omitempty" query:"workingSet"`
	AvailableBytes int32   `protobuf:"varint,6,opt,name=availableBytes,proto3" form:"availableBytes" json:"availableBytes,omitempty" query:"availableBytes"`
	Cache          int32   `protobuf:"varint,7,opt,name=cache,proto3" form:"cache" json:"cache,omitempty" query:"cache"`
}

func (x *Memory) Reset() {
	*x = Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{93}
}

func (x *Memory) GetMemoryUsage() float64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *Memory) GetInactiveFile() int32 {
	if x != nil {
		return x.InactiveFile
	}
	return 0
}

func (x *Memory) GetRss() int32 {
	if x != nil {
		return x.Rss
	}
	return 0
}

func (x *Memory) GetUsageBytes() int32 {
	if x != nil {
		return x.UsageBytes
	}
	return 0
}

func (x *Memory) GetWorkingSet() int32 {
	if x != nil {
		return x.WorkingSet
	}
	return 0
}

func (x *Memory) GetAvailableBytes() int32 {
	if x != nil {
		return x.AvailableBytes
	}
	return 0
}

func (x *Memory) GetCache() int32 {
	if x != nil {
		return x.Cache
	}
	return 0
}

type Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device     string `protobuf:"bytes,1,opt,name=device,proto3" form:"device" json:"device,omitempty" query:"device"`
	ReadBytes  int32  `protobuf:"varint,2,opt,name=readBytes,proto3" form:"readBytes" json:"readBytes,omitempty" query:"readBytes"`
	WriteBytes int32  `protobuf:"varint,3,opt,name=writeBytes,proto3" form:"writeBytes" json:"writeBytes,omitempty" query:"writeBytes"`
	ReadIO     int32  `protobuf:"varint,4,opt,name=readIO,proto3" form:"readIO" json:"readIO,omitempty" query:"readIO"`
	WriteIO    int32  `protobuf:"varint,5,opt,name=writeIO,proto3" form:"writeIO" json:"writeIO,omitempty" query:"writeIO"`
}

func (x *Disk) Reset() {
	*x = Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{94}
}

func (x *Disk) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Disk) GetReadBytes() int32 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *Disk) GetWriteBytes() int32 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *Disk) GetReadIO() int32 {
	if x != nil {
		return x.ReadIO
	}
	return 0
}

func (x *Disk) GetWriteIO() int32 {
	if x != nil {
		return x.WriteIO
	}
	return 0
}

type FileSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	FileSystemUsage int32  `protobuf:"varint,2,opt,name=fileSystemUsage,proto3" form:"fileSystemUsage" json:"fileSystemUsage,omitempty" query:"fileSystemUsage"`
}

func (x *FileSystem) Reset() {
	*x = FileSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSystem) ProtoMessage() {}

func (x *FileSystem) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSystem.ProtoReflect.Descriptor instead.
func (*FileSystem) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{95}
}

func (x *FileSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileSystem) GetFileSystemUsage() int32 {
	if x != nil {
		return x.FileSystemUsage
	}
	return 0
}

type GPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GPU) Reset() {
	*x = GPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPU) ProtoMessage() {}

func (x *GPU) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPU.ProtoReflect.Descriptor instead.
func (*GPU) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{96}
}

type ContainerMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Cpu    *CPU    `protobuf:"bytes,2,opt,name=cpu,proto3" form:"cpu" json:"cpu,omitempty" query:"cpu"`
	Memory *Memory `protobuf:"bytes,3,opt,name=memory,proto3" form:"memory" json:"memory,omitempty" query:"memory"`
}

func (x *ContainerMetric) Reset() {
	*x = ContainerMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerMetric) ProtoMessage() {}

func (x *ContainerMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerMetric.ProtoReflect.Descriptor instead.
func (*ContainerMetric) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{97}
}

func (x *ContainerMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerMetric) GetCpu() *CPU {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *ContainerMetric) GetMemory() *Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

// log
type DescribeContainerLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" json:"containerGroupId,omitempty" path:"containerGroupId"`
	ContainerName    string `protobuf:"bytes,2,opt,name=containerName,proto3" json:"containerName,omitempty" query:"containerName"`
	StartTime        string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty" query:"startTime"`
	Tail             int64  `protobuf:"varint,4,opt,name=tail,proto3" json:"tail,omitempty" query:"tail"`
	Previous         bool   `protobuf:"varint,5,opt,name=previous,proto3" json:"previous,omitempty" query:"previous"`
	SinceSeconds     int64  `protobuf:"varint,6,opt,name=sinceSeconds,proto3" json:"sinceSeconds,omitempty" query:"sinceSeconds"`
	LimitBytes       int64  `protobuf:"varint,7,opt,name=limitBytes,proto3" json:"limitBytes,omitempty" query:"limitBytes"`
	Timestamps       bool   `protobuf:"varint,8,opt,name=timestamps,proto3" json:"timestamps,omitempty" query:"timestamps"`
	RegionId         string `protobuf:"bytes,9,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeContainerLogRequest) Reset() {
	*x = DescribeContainerLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerLogRequest) ProtoMessage() {}

func (x *DescribeContainerLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerLogRequest.ProtoReflect.Descriptor instead.
func (*DescribeContainerLogRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{98}
}

func (x *DescribeContainerLogRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *DescribeContainerLogRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DescribeContainerLogRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeContainerLogRequest) GetTail() int64 {
	if x != nil {
		return x.Tail
	}
	return 0
}

func (x *DescribeContainerLogRequest) GetPrevious() bool {
	if x != nil {
		return x.Previous
	}
	return false
}

func (x *DescribeContainerLogRequest) GetSinceSeconds() int64 {
	if x != nil {
		return x.SinceSeconds
	}
	return 0
}

func (x *DescribeContainerLogRequest) GetLimitBytes() int64 {
	if x != nil {
		return x.LimitBytes
	}
	return 0
}

func (x *DescribeContainerLogRequest) GetTimestamps() bool {
	if x != nil {
		return x.Timestamps
	}
	return false
}

func (x *DescribeContainerLogRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeContainerLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId     string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty"`
	ContainerName string `protobuf:"bytes,2,opt,name=containerName,proto3" form:"containerName" json:"containerName,omitempty"`
	Content       string `protobuf:"bytes,3,opt,name=content,proto3" form:"content" json:"content,omitempty"`
}

func (x *DescribeContainerLogResponse) Reset() {
	*x = DescribeContainerLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeContainerLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContainerLogResponse) ProtoMessage() {}

func (x *DescribeContainerLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContainerLogResponse.ProtoReflect.Descriptor instead.
func (*DescribeContainerLogResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{99}
}

func (x *DescribeContainerLogResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DescribeContainerLogResponse) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DescribeContainerLogResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// websocket for console
type ConsoleWebsocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string   `protobuf:"bytes,1,opt,name=containerGroupId,proto3" json:"containerGroupId,omitempty" path:"containerGroupId"`
	ContainerName    string   `protobuf:"bytes,2,opt,name=containerName,proto3" json:"containerName,omitempty" query:"containerName"`
	Command          []string `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty" query:"command"`
	Stdin            bool     `protobuf:"varint,4,opt,name=stdin,proto3" json:"stdin,omitempty" query:"stdin"`
	TTY              bool     `protobuf:"varint,5,opt,name=TTY,proto3" json:"TTY,omitempty" query:"tty"`
	Sync             bool     `protobuf:"varint,6,opt,name=sync,proto3" json:"sync,omitempty" query:"sync"`
	RegionId         string   `protobuf:"bytes,7,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *ConsoleWebsocketRequest) Reset() {
	*x = ConsoleWebsocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsoleWebsocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleWebsocketRequest) ProtoMessage() {}

func (x *ConsoleWebsocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleWebsocketRequest.ProtoReflect.Descriptor instead.
func (*ConsoleWebsocketRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{100}
}

func (x *ConsoleWebsocketRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *ConsoleWebsocketRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ConsoleWebsocketRequest) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ConsoleWebsocketRequest) GetStdin() bool {
	if x != nil {
		return x.Stdin
	}
	return false
}

func (x *ConsoleWebsocketRequest) GetTTY() bool {
	if x != nil {
		return x.TTY
	}
	return false
}

func (x *ConsoleWebsocketRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

func (x *ConsoleWebsocketRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type ConsoleWebsocketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsoleWebsocketResponse) Reset() {
	*x = ConsoleWebsocketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsoleWebsocketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleWebsocketResponse) ProtoMessage() {}

func (x *ConsoleWebsocketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleWebsocketResponse.ProtoReflect.Descriptor instead.
func (*ConsoleWebsocketResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{101}
}

// websocket for openapi
type ExecWebsocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" query:"token"`
}

func (x *ExecWebsocketRequest) Reset() {
	*x = ExecWebsocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecWebsocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecWebsocketRequest) ProtoMessage() {}

func (x *ExecWebsocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecWebsocketRequest.ProtoReflect.Descriptor instead.
func (*ExecWebsocketRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{102}
}

func (x *ExecWebsocketRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ExecWebsocketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecWebsocketResponse) Reset() {
	*x = ExecWebsocketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecWebsocketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecWebsocketResponse) ProtoMessage() {}

func (x *ExecWebsocketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecWebsocketResponse.ProtoReflect.Descriptor instead.
func (*ExecWebsocketResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{103}
}

// get exec command for websocket
type ExecCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string   `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	ContainerName    string   `protobuf:"bytes,2,opt,name=containerName,proto3" form:"containerName" json:"containerName,omitempty"`
	Command          []string `protobuf:"bytes,3,rep,name=command,proto3" form:"command" json:"command,omitempty"`
	Stdin            bool     `protobuf:"varint,4,opt,name=stdin,proto3" form:"stdin" json:"stdin,omitempty"`
	TTY              bool     `protobuf:"varint,5,opt,name=TTY,proto3" form:"tty" json:"tty,omitempty"`
	Sync             bool     `protobuf:"varint,6,opt,name=sync,proto3" form:"sync" json:"sync,omitempty"`
	RegionId         string   `protobuf:"bytes,7,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *ExecCommandRequest) Reset() {
	*x = ExecCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecCommandRequest) ProtoMessage() {}

func (x *ExecCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecCommandRequest.ProtoReflect.Descriptor instead.
func (*ExecCommandRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{104}
}

func (x *ExecCommandRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *ExecCommandRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ExecCommandRequest) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ExecCommandRequest) GetStdin() bool {
	if x != nil {
		return x.Stdin
	}
	return false
}

func (x *ExecCommandRequest) GetTTY() bool {
	if x != nil {
		return x.TTY
	}
	return false
}

func (x *ExecCommandRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

func (x *ExecCommandRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type ExecMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=Command,proto3" form:"command" json:"command,omitempty"`
}

func (x *ExecMessage) Reset() {
	*x = ExecMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecMessage) ProtoMessage() {}

func (x *ExecMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecMessage.ProtoReflect.Descriptor instead.
func (*ExecMessage) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{105}
}

func (x *ExecMessage) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type ExecCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	WebSocketUri string `protobuf:"bytes,2,opt,name=webSocketUri,proto3" form:"webSocketUri" json:"webSocketUri,omitempty" query:"webSocketUri"`
	SyncResponse string `protobuf:"bytes,3,opt,name=syncResponse,proto3" form:"syncResponse" json:"syncResponse,omitempty" query:"syncResponse"`
}

func (x *ExecCommandResponse) Reset() {
	*x = ExecCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecCommandResponse) ProtoMessage() {}

func (x *ExecCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecCommandResponse.ProtoReflect.Descriptor instead.
func (*ExecCommandResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{106}
}

func (x *ExecCommandResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ExecCommandResponse) GetWebSocketUri() string {
	if x != nil {
		return x.WebSocketUri
	}
	return ""
}

func (x *ExecCommandResponse) GetSyncResponse() string {
	if x != nil {
		return x.SyncResponse
	}
	return ""
}

// describe exec audit
type DescribeExecAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNow  int32  `protobuf:"varint,1,opt,name=pageNow,proto3" json:"pageNow,omitempty" query:"pageNow"`
	PageSize int32  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty" query:"pageSize"`
	RegionId string `protobuf:"bytes,3,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeExecAuditRequest) Reset() {
	*x = DescribeExecAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeExecAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeExecAuditRequest) ProtoMessage() {}

func (x *DescribeExecAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeExecAuditRequest.ProtoReflect.Descriptor instead.
func (*DescribeExecAuditRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{107}
}

func (x *DescribeExecAuditRequest) GetPageNow() int32 {
	if x != nil {
		return x.PageNow
	}
	return 0
}

func (x *DescribeExecAuditRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeExecAuditRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeExecAuditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64              `protobuf:"varint,1,opt,name=total,proto3" form:"total" json:"total,omitempty" query:"total"`
	Pages     int32              `protobuf:"varint,2,opt,name=pages,proto3" form:"pages" json:"pages,omitempty" query:"pages"`
	Records   []*ExecAuditRecord `protobuf:"bytes,3,rep,name=records,proto3" form:"records" json:"records,omitempty" query:"records"`
	RequestId string             `protobuf:"bytes,4,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *DescribeExecAuditResponse) Reset() {
	*x = DescribeExecAuditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeExecAuditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeExecAuditResponse) ProtoMessage() {}

func (x *DescribeExecAuditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeExecAuditResponse.ProtoReflect.Descriptor instead.
func (*DescribeExecAuditResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{108}
}

func (x *DescribeExecAuditResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeExecAuditResponse) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *DescribeExecAuditResponse) GetRecords() []*ExecAuditRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *DescribeExecAuditResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ExecAuditRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditId      string `protobuf:"bytes,1,opt,name=auditId,proto3" form:"auditId" json:"auditId,omitempty"`
	AuthType     string `protobuf:"bytes,2,opt,name=authType,proto3" form:"authType" json:"authType,omitempty"`
	TenantId     string `protobuf:"bytes,3,opt,name=tenantId,proto3" form:"tenantId" json:"tenantId,omitempty"`
	EciId        string `protobuf:"bytes,4,opt,name=eciId,proto3" form:"eciId" json:"eciId,omitempty"`
	Command      string `protobuf:"bytes,5,opt,name=command,proto3" form:"command" json:"command,omitempty"`
	WssUri       string `protobuf:"bytes,6,opt,name=wssUri,proto3" form:"wssUri" json:"wssUri,omitempty"`
	RegionId     string `protobuf:"bytes,7,opt,name=regionId,proto3" form:"regionId" json:"regionId,omitempty"`
	ClientIp     string `protobuf:"bytes,8,opt,name=clientIp,proto3" form:"clientIp" json:"clientIp,omitempty"`
	RequestId    string `protobuf:"bytes,9,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty"`
	CreationTime string `protobuf:"bytes,10,opt,name=creationTime,proto3" form:"creationTime" json:"creationTime,omitempty"`
}

func (x *ExecAuditRecord) Reset() {
	*x = ExecAuditRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecAuditRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecAuditRecord) ProtoMessage() {}

func (x *ExecAuditRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecAuditRecord.ProtoReflect.Descriptor instead.
func (*ExecAuditRecord) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{109}
}

func (x *ExecAuditRecord) GetAuditId() string {
	if x != nil {
		return x.AuditId
	}
	return ""
}

func (x *ExecAuditRecord) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *ExecAuditRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ExecAuditRecord) GetEciId() string {
	if x != nil {
		return x.EciId
	}
	return ""
}

func (x *ExecAuditRecord) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ExecAuditRecord) GetWssUri() string {
	if x != nil {
		return x.WssUri
	}
	return ""
}

func (x *ExecAuditRecord) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ExecAuditRecord) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *ExecAuditRecord) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ExecAuditRecord) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

type ClearExpiredAuditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" form:"message" json:"message,omitempty"`
}

func (x *ClearExpiredAuditResponse) Reset() {
	*x = ClearExpiredAuditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearExpiredAuditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearExpiredAuditResponse) ProtoMessage() {}

func (x *ClearExpiredAuditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearExpiredAuditResponse.ProtoReflect.Descriptor instead.
func (*ClearExpiredAuditResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{110}
}

func (x *ClearExpiredAuditResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateBizIdentityRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ak        string `protobuf:"bytes,1,opt,name=ak,proto3" form:"ak" json:"ak,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" form:"accountId" json:"accountId,omitempty"`
	RegionId  string `protobuf:"bytes,3,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *CreateBizIdentityRecordRequest) Reset() {
	*x = CreateBizIdentityRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBizIdentityRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBizIdentityRecordRequest) ProtoMessage() {}

func (x *CreateBizIdentityRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBizIdentityRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateBizIdentityRecordRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{111}
}

func (x *CreateBizIdentityRecordRequest) GetAk() string {
	if x != nil {
		return x.Ak
	}
	return ""
}

func (x *CreateBizIdentityRecordRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateBizIdentityRecordRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type CreateBizIdentityRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" form:"message" json:"message,omitempty"`
}

func (x *CreateBizIdentityRecordResponse) Reset() {
	*x = CreateBizIdentityRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBizIdentityRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBizIdentityRecordResponse) ProtoMessage() {}

func (x *CreateBizIdentityRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBizIdentityRecordResponse.ProtoReflect.Descriptor instead.
func (*CreateBizIdentityRecordResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{112}
}

func (x *CreateBizIdentityRecordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteBizIdentityRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ak        string `protobuf:"bytes,1,opt,name=ak,proto3" form:"ak" json:"ak,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" form:"accountId" json:"accountId,omitempty"`
	RegionId  string `protobuf:"bytes,3,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DeleteBizIdentityRecordRequest) Reset() {
	*x = DeleteBizIdentityRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBizIdentityRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBizIdentityRecordRequest) ProtoMessage() {}

func (x *DeleteBizIdentityRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBizIdentityRecordRequest.ProtoReflect.Descriptor instead.
func (*DeleteBizIdentityRecordRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{113}
}

func (x *DeleteBizIdentityRecordRequest) GetAk() string {
	if x != nil {
		return x.Ak
	}
	return ""
}

func (x *DeleteBizIdentityRecordRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DeleteBizIdentityRecordRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DeleteBizIdentityRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" form:"message" json:"message,omitempty"`
}

func (x *DeleteBizIdentityRecordResponse) Reset() {
	*x = DeleteBizIdentityRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBizIdentityRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBizIdentityRecordResponse) ProtoMessage() {}

func (x *DeleteBizIdentityRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBizIdentityRecordResponse.ProtoReflect.Descriptor instead.
func (*DeleteBizIdentityRecordResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{114}
}

func (x *DeleteBizIdentityRecordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueryOrderDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterOrderId string `protobuf:"bytes,1,opt,name=masterOrderId,proto3" form:"masterOrderId" json:"masterOrderId,omitempty"`
	RegionId      string `protobuf:"bytes,2,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *QueryOrderDetailRequest) Reset() {
	*x = QueryOrderDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrderDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrderDetailRequest) ProtoMessage() {}

func (x *QueryOrderDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrderDetailRequest.ProtoReflect.Descriptor instead.
func (*QueryOrderDetailRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{115}
}

func (x *QueryOrderDetailRequest) GetMasterOrderId() string {
	if x != nil {
		return x.MasterOrderId
	}
	return ""
}

func (x *QueryOrderDetailRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type QueryOrderDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterOrderNo string   `protobuf:"bytes,1,opt,name=masterOrderNo,proto3" form:"masterOrderNo" json:"masterOrderNo,omitempty"`
	MasterOrderId string   `protobuf:"bytes,2,opt,name=masterOrderId,proto3" form:"masterOrderId" json:"masterOrderId,omitempty"`
	AccountId     string   `protobuf:"bytes,3,opt,name=accountId,proto3" form:"accountId" json:"accountId,omitempty"`
	UserId        string   `protobuf:"bytes,4,opt,name=userId,proto3" form:"userId" json:"userId,omitempty"`
	PayType       string   `protobuf:"bytes,5,opt,name=payType,proto3" form:"payType" json:"payType,omitempty"`
	IsOnDemand    bool     `protobuf:"varint,6,opt,name=isOnDemand,proto3" form:"isOnDemand" json:"isOnDemand,omitempty"`
	HasContract   bool     `protobuf:"varint,7,opt,name=hasContract,proto3" form:"hasContract" json:"hasContract,omitempty"`
	Status        int32    `protobuf:"varint,8,opt,name=status,proto3" form:"status" json:"status,omitempty"`
	OrderChannel  int32    `protobuf:"varint,9,opt,name=orderChannel,proto3" form:"orderChannel" json:"orderChannel,omitempty"`
	AbandonStatus int32    `protobuf:"varint,10,opt,name=abandonStatus,proto3" form:"abandonStatus" json:"abandonStatus,omitempty"`
	TotalPrice    float64  `protobuf:"fixed64,11,opt,name=totalPrice,proto3" form:"totalPrice" json:"totalPrice,omitempty"`
	Orders        []*Order `protobuf:"bytes,12,rep,name=orders,proto3" form:"orders" json:"orders,omitempty"`
	RequestId     string   `protobuf:"bytes,13,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *QueryOrderDetailResponse) Reset() {
	*x = QueryOrderDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrderDetailResponse) ProtoMessage() {}

func (x *QueryOrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrderDetailResponse.ProtoReflect.Descriptor instead.
func (*QueryOrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{116}
}

func (x *QueryOrderDetailResponse) GetMasterOrderNo() string {
	if x != nil {
		return x.MasterOrderNo
	}
	return ""
}

func (x *QueryOrderDetailResponse) GetMasterOrderId() string {
	if x != nil {
		return x.MasterOrderId
	}
	return ""
}

func (x *QueryOrderDetailResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *QueryOrderDetailResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QueryOrderDetailResponse) GetPayType() string {
	if x != nil {
		return x.PayType
	}
	return ""
}

func (x *QueryOrderDetailResponse) GetIsOnDemand() bool {
	if x != nil {
		return x.IsOnDemand
	}
	return false
}

func (x *QueryOrderDetailResponse) GetHasContract() bool {
	if x != nil {
		return x.HasContract
	}
	return false
}

func (x *QueryOrderDetailResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryOrderDetailResponse) GetOrderChannel() int32 {
	if x != nil {
		return x.OrderChannel
	}
	return 0
}

func (x *QueryOrderDetailResponse) GetAbandonStatus() int32 {
	if x != nil {
		return x.AbandonStatus
	}
	return 0
}

func (x *QueryOrderDetailResponse) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *QueryOrderDetailResponse) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *QueryOrderDetailResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceTag  string  `protobuf:"bytes,1,opt,name=serviceTag,proto3" form:"serviceTag" json:"serviceTag,omitempty"`
	OrderId     string  `protobuf:"bytes,2,opt,name=orderId,proto3" form:"orderId" json:"orderId,omitempty"`
	OrderNo     string  `protobuf:"bytes,3,opt,name=orderNo,proto3" form:"orderNo" json:"orderNo,omitempty"`
	InstanceCnt int32   `protobuf:"varint,4,opt,name=instanceCnt,proto3" form:"instanceCnt" json:"instanceCnt,omitempty"`
	CycleCnt    int32   `protobuf:"varint,5,opt,name=cycleCnt,proto3" form:"cycleCnt" json:"cycleCnt,omitempty"`
	CycleType   int32   `protobuf:"varint,6,opt,name=cycleType,proto3" form:"cycleType" json:"cycleType,omitempty"`
	TotalPrice  float64 `protobuf:"fixed64,7,opt,name=totalPrice,proto3" form:"totalPrice" json:"totalPrice,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{117}
}

func (x *Order) GetServiceTag() string {
	if x != nil {
		return x.ServiceTag
	}
	return ""
}

func (x *Order) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Order) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *Order) GetInstanceCnt() int32 {
	if x != nil {
		return x.InstanceCnt
	}
	return 0
}

func (x *Order) GetCycleCnt() int32 {
	if x != nil {
		return x.CycleCnt
	}
	return 0
}

func (x *Order) GetCycleType() int32 {
	if x != nil {
		return x.CycleType
	}
	return 0
}

func (x *Order) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

type ResizeContainerGroupVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	VolumeName       string `protobuf:"bytes,2,opt,name=volumeName,proto3" form:"volumeName" json:"volumeName,omitempty"`
	VolumeHandle     string `protobuf:"bytes,3,opt,name=volumeHandle,proto3" form:"volumeHandle" json:"volumeHandle,omitempty"`
	NewSize          int32  `protobuf:"varint,4,opt,name=newSize,proto3" form:"newSize" json:"newSize,omitempty"`
	RegionId         string `protobuf:"bytes,5,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *ResizeContainerGroupVolumeRequest) Reset() {
	*x = ResizeContainerGroupVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeContainerGroupVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeContainerGroupVolumeRequest) ProtoMessage() {}

func (x *ResizeContainerGroupVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeContainerGroupVolumeRequest.ProtoReflect.Descriptor instead.
func (*ResizeContainerGroupVolumeRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{118}
}

func (x *ResizeContainerGroupVolumeRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *ResizeContainerGroupVolumeRequest) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *ResizeContainerGroupVolumeRequest) GetVolumeHandle() string {
	if x != nil {
		return x.VolumeHandle
	}
	return ""
}

func (x *ResizeContainerGroupVolumeRequest) GetNewSize() int32 {
	if x != nil {
		return x.NewSize
	}
	return 0
}

func (x *ResizeContainerGroupVolumeRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type ResizeContainerGroupVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *ResizeContainerGroupVolumeResponse) Reset() {
	*x = ResizeContainerGroupVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeContainerGroupVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeContainerGroupVolumeResponse) ProtoMessage() {}

func (x *ResizeContainerGroupVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeContainerGroupVolumeResponse.ProtoReflect.Descriptor instead.
func (*ResizeContainerGroupVolumeResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{119}
}

func (x *ResizeContainerGroupVolumeResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateOpsTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	OpsType          string `protobuf:"bytes,2,opt,name=opsType,proto3" form:"opsType" json:"opsType,omitempty"`
	OpsValue         string `protobuf:"bytes,3,opt,name=opsValue,proto3" form:"opsValue" json:"opsValue,omitempty"`
	CorePattern      string `protobuf:"bytes,4,opt,name=corePattern,proto3" form:"corePattern" json:"corePattern,omitempty"`
	RegionId         string `protobuf:"bytes,5,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *CreateOpsTaskRequest) Reset() {
	*x = CreateOpsTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpsTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpsTaskRequest) ProtoMessage() {}

func (x *CreateOpsTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpsTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateOpsTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{120}
}

func (x *CreateOpsTaskRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *CreateOpsTaskRequest) GetOpsType() string {
	if x != nil {
		return x.OpsType
	}
	return ""
}

func (x *CreateOpsTaskRequest) GetOpsValue() string {
	if x != nil {
		return x.OpsValue
	}
	return ""
}

func (x *CreateOpsTaskRequest) GetCorePattern() string {
	if x != nil {
		return x.CorePattern
	}
	return ""
}

func (x *CreateOpsTaskRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type CreateOpsTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Result    string `protobuf:"bytes,2,opt,name=result,proto3" form:"result" json:"result,omitempty"`
}

func (x *CreateOpsTaskResponse) Reset() {
	*x = CreateOpsTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpsTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpsTaskResponse) ProtoMessage() {}

func (x *CreateOpsTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpsTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateOpsTaskResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{121}
}

func (x *CreateOpsTaskResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateOpsTaskResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type DescribeOpsTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerGroupId string `protobuf:"bytes,1,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	OpsType          string `protobuf:"bytes,2,opt,name=opsType,proto3" form:"opsType" json:"opsType,omitempty"`
	RegionId         string `protobuf:"bytes,3,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeOpsTaskRequest) Reset() {
	*x = DescribeOpsTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeOpsTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeOpsTaskRequest) ProtoMessage() {}

func (x *DescribeOpsTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeOpsTaskRequest.ProtoReflect.Descriptor instead.
func (*DescribeOpsTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{122}
}

func (x *DescribeOpsTaskRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *DescribeOpsTaskRequest) GetOpsType() string {
	if x != nil {
		return x.OpsType
	}
	return ""
}

func (x *DescribeOpsTaskRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeOpsTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string       `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Records   []*OpsRecord `protobuf:"bytes,2,rep,name=records,proto3" form:"records" json:"records,omitempty"`
}

func (x *DescribeOpsTaskResponse) Reset() {
	*x = DescribeOpsTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeOpsTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeOpsTaskResponse) ProtoMessage() {}

func (x *DescribeOpsTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeOpsTaskResponse.ProtoReflect.Descriptor instead.
func (*DescribeOpsTaskResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{123}
}

func (x *DescribeOpsTaskResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DescribeOpsTaskResponse) GetRecords() []*OpsRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type OpsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpsType    string `protobuf:"bytes,1,opt,name=opsType,proto3" form:"opsType" json:"opsType,omitempty"`
	OpsValue   string `protobuf:"bytes,2,opt,name=opsValue,proto3" form:"opsValue" json:"opsValue,omitempty"`
	OpsStatus  string `protobuf:"bytes,3,opt,name=opsStatus,proto3" form:"opsStatus" json:"opsStatus,omitempty"`
	CreateTime string `protobuf:"bytes,4,opt,name=createTime,proto3" form:"createTime" json:"createTime,omitempty"`
}

func (x *OpsRecord) Reset() {
	*x = OpsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsRecord) ProtoMessage() {}

func (x *OpsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsRecord.ProtoReflect.Descriptor instead.
func (*OpsRecord) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{124}
}

func (x *OpsRecord) GetOpsType() string {
	if x != nil {
		return x.OpsType
	}
	return ""
}

func (x *OpsRecord) GetOpsValue() string {
	if x != nil {
		return x.OpsValue
	}
	return ""
}

func (x *OpsRecord) GetOpsStatus() string {
	if x != nil {
		return x.OpsStatus
	}
	return ""
}

func (x *OpsRecord) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type RunCommandInVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId         string `protobuf:"bytes,1,opt,name=regionId,proto3" form:"regionId" json:"regionId,omitempty"`
	TenantId         string `protobuf:"bytes,2,opt,name=tenantId,proto3" form:"tennatId" json:"tennatId,omitempty"`
	ContainerGroupId string `protobuf:"bytes,3,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	Cmd              string `protobuf:"bytes,4,opt,name=cmd,proto3" form:"cmd" json:"cmd,omitempty"`
	Timeout          int32  `protobuf:"varint,5,opt,name=timeout,proto3" form:"timeout" json:"timeout,omitempty"`
}

func (x *RunCommandInVMRequest) Reset() {
	*x = RunCommandInVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCommandInVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommandInVMRequest) ProtoMessage() {}

func (x *RunCommandInVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommandInVMRequest.ProtoReflect.Descriptor instead.
func (*RunCommandInVMRequest) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{125}
}

func (x *RunCommandInVMRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *RunCommandInVMRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *RunCommandInVMRequest) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *RunCommandInVMRequest) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *RunCommandInVMRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type RunCommandInVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Output    string `protobuf:"bytes,2,opt,name=output,proto3" form:"output" json:"output,omitempty"`
}

func (x *RunCommandInVMResponse) Reset() {
	*x = RunCommandInVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_eci_containergroup_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCommandInVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommandInVMResponse) ProtoMessage() {}

func (x *RunCommandInVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_eci_containergroup_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommandInVMResponse.ProtoReflect.Descriptor instead.
func (*RunCommandInVMResponse) Descriptor() ([]byte, []int) {
	return file_api_eci_containergroup_proto_rawDescGZIP(), []int{126}
}

func (x *RunCommandInVMResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RunCommandInVMResponse) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

var File_api_eci_containergroup_proto protoreflect.FileDescriptor

var file_api_eci_containergroup_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa4, 0x14, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xca, 0xbb,
	0x18, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x07, 0xca, 0xbb, 0x18, 0x03, 0x63, 0x70, 0x75, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x22, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x03, 0x65, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x69, 0x70,
	0x42, 0x07, 0xca, 0xbb, 0x18, 0x03, 0x65, 0x69, 0x70, 0x52, 0x03, 0x65, 0x69, 0x70, 0x12, 0x37,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x76, 0x70, 0x63, 0x49,
	0x64, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x76, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18,
	0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x09, 0x76, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xca, 0xbb, 0x18, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x64, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0xca, 0xbb,
	0x18, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0f, 0xca,
	0xbb, 0x18, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x0b,
	0x68, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61, 0x67, 0x73, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42,
	0x12, 0xca, 0xbb, 0x18, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0f, 0x65, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x18, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x1c, 0xca, 0xbb,
	0x18, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x18, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x7a, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x61, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x61, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0d, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x73, 0x75, 0x62, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x07, 0xca, 0xbb, 0x18, 0x03, 0x67, 0x70, 0x75, 0x52, 0x03, 0x67, 0x70,
	0x75, 0x12, 0x28, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x61,
	0x75, 0x74, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x17, 0xca, 0xbb, 0x18, 0x13, 0x61, 0x75,
	0x74, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca,
	0xbb, 0x18, 0x0d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x52, 0x0d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b,
	0x69, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x69, 0x61, 0x6d,
	0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x04,
	0x65, 0x70, 0x49, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04,
	0x65, 0x70, 0x49, 0x64, 0x52, 0x04, 0x65, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xba, 0xbb, 0x18, 0x12, 0x64, 0x79, 0x2d, 0x74, 0x6f, 0x62, 0x2d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0xbb, 0x18, 0x0e,
	0x74, 0x6f, 0x62, 0x2d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f,
	0x63, 0x70, 0x75, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x0f, 0x63, 0x70, 0x75, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x66, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x52, 0x06,
	0x73, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x4e,
	0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x75,
	0x6e, 0x41, 0x73, 0x4e, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x75,
	0x6e, 0x41, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x75, 0x6e, 0x41, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x75, 0x6e, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x63,
	0x74, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xda, 0x02, 0x0a,
	0x0a, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x43, 0x50, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x43, 0x50, 0x55, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x52, 0x41, 0x4d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x52, 0x41, 0x4d, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x70, 0x75, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x70, 0x75, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x6d, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x53, 0x75,
	0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x61, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0xe4, 0x03,
	0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xbb, 0x18, 0x09, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x49, 0x64, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xba, 0xbb, 0x18, 0x07, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x49, 0x64, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0xbb, 0x18,
	0x0b, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0xbb, 0x18, 0x0d,
	0x52, 0x65, 0x73, 0x2d, 0x50, 0x6f, 0x6f, 0x6c, 0x2d, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x42, 0x73, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba,
	0xbb, 0x18, 0x0e, 0x42, 0x73, 0x73, 0x2d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x49,
	0x64, 0x52, 0x0c, 0x42, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x09, 0x42, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xba, 0xbb, 0x18, 0x0b, 0x42, 0x73, 0x73, 0x2d, 0x55, 0x73, 0x65, 0x72,
	0x2d, 0x49, 0x64, 0x52, 0x09, 0x42, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0xbb, 0x18, 0x0f, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x49, 0x64, 0x52, 0x0d, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0xbb, 0x18, 0x12, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x49, 0x64, 0x52, 0x10, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0xbb, 0x18, 0x0d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x50, 0x6f, 0x64, 0x44, 0x4e, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x64, 0x44, 0x4e, 0x53, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x64,
	0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x75, 0x0a, 0x03, 0x45, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x69, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x69, 0x70,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xf7, 0x05, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x52, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x12, 0x34,
	0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x6c, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52,
	0x0d, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x44,
	0x0a, 0x1d, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x45, 0x78, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x1b, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66,
	0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x65, 0x66, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x66, 0x22, 0x48, 0x0a, 0x08, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x66, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x97, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x61,
	0x74, 0x68, 0x45, 0x78, 0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x50, 0x61, 0x74, 0x68, 0x45, 0x78, 0x70, 0x72, 0x22, 0x42, 0x0a, 0x0c, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xda, 0x02,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x07, 0x68, 0x74, 0x74, 0x70,
	0x47, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x47, 0x65, 0x74, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70, 0x47,
	0x65, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43,
	0x50, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x74, 0x63, 0x70, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x20, 0x0a, 0x04, 0x45, 0x78,
	0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x92, 0x01, 0x0a,
	0x07, 0x48, 0x74, 0x74, 0x70, 0x47, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x22, 0x36, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x0a, 0x09, 0x54, 0x43, 0x50,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xc0, 0x02, 0x0a, 0x0f, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x3a, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x75, 0x6e, 0x41, 0x73, 0x4e, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x4e, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72, 0x22, 0x34, 0x0a,
	0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x72, 0x6f, 0x70, 0x22, 0x69, 0x0a, 0x17, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x34,
	0x0a, 0x06, 0x41, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x7a, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x61, 0x7a, 0x49, 0x64, 0x22, 0xc9, 0x04, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x44, 0x69, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x61, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x09, 0x6e, 0x61,
	0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x7a, 0x6f, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x5a, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x09, 0x7a, 0x6f,
	0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x50, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x50, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x11, 0x64, 0x6f, 0x77,
	0x6e, 0x77, 0x61, 0x72, 0x64, 0x41, 0x50, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x22, 0x66, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x50, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x41, 0x50, 0x49,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x50, 0x49, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x6d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x6f,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x45, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x50, 0x49, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6a,
	0x0a, 0x10, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x45, 0x0a, 0x09, 0x4b, 0x65,
	0x79, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x63, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x41, 0x50, 0x49,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x12,
	0x43, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x65, 0x66, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x66, 0x22, 0x6e, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x22, 0x38, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46,
	0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x69, 0x7a,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7b, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x22, 0x54, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x0c, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54,
	0x6f, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x50, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x73, 0x0a, 0x09, 0x4e, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x09, 0x5a, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xd2, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb,
	0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x21, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xd2, 0xbb,
	0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xd2, 0xbb, 0x18, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xd2, 0xbb, 0x18, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x84, 0x01, 0x0a, 0x22, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x95, 0x05, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xd2, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x65, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x69, 0x70, 0x42, 0x07, 0xca, 0xbb, 0x18, 0x03, 0x65, 0x69, 0x70, 0x52, 0x03, 0x65, 0x69, 0x70,
	0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x12, 0xca,
	0xbb, 0x18, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x78, 0x0a, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x1c, 0xca, 0xbb, 0x18, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x40, 0x0a,
	0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x64, 0x44, 0x4e, 0x53, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x34, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42,
	0x0b, 0xca, 0xbb, 0x18, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x8d, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x8a, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xd2, 0xbb, 0x18, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1d,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x86, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xd2, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa2, 0x0a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74,
	0x49, 0x70, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x70, 0x12, 0x2e,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x49, 0x70, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x70, 0x12, 0x22,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x07, 0xca, 0xbb, 0x18, 0x03, 0x63, 0x70, 0x75, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x22, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0xca,
	0xbb, 0x18, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x64, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x76,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xca, 0xbb, 0x18, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x09, 0x76,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42,
	0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45,
	0x6e, 0x69, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xca, 0xbb, 0x18, 0x13, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e,
	0x69, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x13, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x45, 0x6e, 0x69, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xbb,
	0x18, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x03, 0x67, 0x70, 0x75,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x42, 0x07, 0xca, 0xbb, 0x18, 0x03, 0x67, 0x70, 0x75, 0x52,
	0x03, 0x67, 0x70, 0x75, 0x12, 0x54, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x12, 0xca, 0xbb, 0x18, 0x0e, 0x69, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x49, 0x70,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0b, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x04, 0x45, 0x70, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xbb, 0x18,
	0x04, 0x65, 0x70, 0x49, 0x64, 0x52, 0x04, 0x45, 0x70, 0x49, 0x64, 0x22, 0xd8, 0x06, 0x0a, 0x11,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70,
	0x75, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x10, 0xca, 0xf3, 0x18, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3d, 0x0a,
	0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x52, 0x0e, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x0b,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0d, 0x6c,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x44, 0x0a, 0x1d,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x1d, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45, 0x78,
	0x65, 0x63, 0x12, 0x40, 0x0a, 0x1b, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45, 0x78, 0x65,
	0x63, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x45, 0x78, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x67, 0x70, 0x75, 0x22, 0xc1, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xaf, 0x03, 0x0a, 0x0d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x69, 0x6e,
	0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3a, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x07, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x75, 0x6d, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x69, 0x0a, 0x21,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x55, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x17, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x46, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x6b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x61, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x61, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x7a, 0x6f, 0x73, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x7a, 0x6f, 0x73, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x7a, 0x6f, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x7a, 0x6f, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2e,
	0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e,
	0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54,
	0x0a, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x41, 0x50, 0x49, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x50, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x16, 0x64, 0x6f,
	0x77, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x41, 0x50, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x4e, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x6a, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x22, 0xb1, 0x01, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x41, 0x50, 0x49,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x12,
	0x43, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x65, 0x66, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x66, 0x22, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xbe, 0x03, 0x0a, 0x1e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x76, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xca,
	0xbb, 0x18, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x65, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x65, 0x70, 0x49, 0x64, 0x52, 0x04, 0x65, 0x70, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x1f,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5f, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2,
	0xbb, 0x18, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xb2, 0xbb, 0x18, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xb2,
	0xbb, 0x18, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x77, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x77, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a,
	0x04, 0x65, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xb2, 0xbb, 0x18,
	0x04, 0x65, 0x70, 0x49, 0x64, 0x52, 0x04, 0x65, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xde, 0x05, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63,
	0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x70, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x70, 0x49, 0x64, 0x22, 0xd1, 0x03, 0x0a, 0x22, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xca, 0xbb, 0x18, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xca, 0xbb, 0x18, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x76, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca,
	0xbb, 0x18, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x09, 0x76, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca,
	0xbb, 0x18, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61, 0x67, 0x73, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x04, 0x65, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x65, 0x70, 0x49, 0x64, 0x52, 0x04, 0x65, 0x70, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x23, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x9f, 0x03, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xca, 0xbb, 0x18, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x46,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xca, 0xbb, 0x18, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x76,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x08,
	0xca, 0xbb, 0x18, 0x04, 0x74, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2b,
	0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x04, 0x65,
	0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x65,
	0x70, 0x49, 0x64, 0x52, 0x04, 0x65, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xca, 0xbb, 0x18, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb,
	0x18, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdc, 0x01, 0x0a, 0x1c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x70,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x09, 0x50, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f,
	0x64, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x64, 0x49,
	0x50, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x6f, 0x73,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x6f, 0x73,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x69,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x69, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x17, 0x0a, 0x05, 0x50, 0x6f, 0x64, 0x49,
	0x50, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x22, 0xe5, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x5e, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x1a, 0x56, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x22, 0x0a, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xc1, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x49, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x22, 0x89, 0x02, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xd2, 0xbb, 0x18, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b,
	0xb2, 0xbb, 0x18, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xb2, 0xbb, 0x18, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x28, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xbb, 0x18, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0b, 0xb2, 0xbb, 0x18, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xb2, 0xbb, 0x18, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x04,
	0x65, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xb2, 0xbb, 0x18, 0x04,
	0x65, 0x70, 0x49, 0x64, 0x52, 0x04, 0x65, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb,
	0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x29, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xbf, 0x02, 0x0a, 0x06,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1c,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x50, 0x55, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x25, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50, 0x55, 0x52, 0x03, 0x67, 0x70,
	0x75, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x69,
	0x73, 0x6b, 0x12, 0x31, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0xa3,
	0x01, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x4e, 0x61, 0x6e, 0x6f, 0x43, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x4e, 0x61, 0x6e,
	0x6f, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x49, 0x4f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x49, 0x4f, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x4f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x49, 0x4f, 0x22, 0x4a, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x05, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x22, 0x6a, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x50, 0x55, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x25,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xcd, 0x03, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xd2, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xb2, 0xbb, 0x18, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xbb, 0x18,
	0x04, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0c, 0xb2,
	0xbb, 0x18, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x10, 0xb2, 0xbb, 0x18,
	0x0c, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0c, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0e, 0xb2, 0xbb, 0x18, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0e, 0xb2, 0xbb, 0x18, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0xbb, 0x18, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xd2, 0xbb, 0x18, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xbb, 0x18, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xb2, 0xbb, 0x18,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x09, 0xb2, 0xbb, 0x18, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x64,
	0x69, 0x6e, 0x12, 0x19, 0x0a, 0x03, 0x54, 0x54, 0x59, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x07, 0xb2, 0xbb, 0x18, 0x03, 0x74, 0x74, 0x79, 0x52, 0x03, 0x54, 0x54, 0x59, 0x12, 0x1c, 0x0a,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0xb2, 0xbb, 0x18,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x28, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x37, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xb2, 0xbb, 0x18, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x45, 0x78,
	0x65, 0x63, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x05,
	0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0xca, 0xbb, 0x18,
	0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x03, 0x54, 0x54, 0x59, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xca, 0xbb, 0x18, 0x03,
	0x74, 0x74, 0x79, 0x52, 0x03, 0x54, 0x54, 0x59, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x34, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x7b, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77,
	0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x69, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0b, 0xb2, 0xbb, 0x18, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x77, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x77, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x19,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x78, 0x65, 0x63, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xaf, 0x03, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb,
	0x18, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x63, 0x69, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x65, 0x63, 0x69, 0x49, 0x64, 0x52, 0x05,
	0x65, 0x63, 0x69, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x06,
	0x77, 0x73, 0x73, 0x55, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb,
	0x18, 0x06, 0x77, 0x73, 0x73, 0x55, 0x72, 0x69, 0x52, 0x06, 0x77, 0x73, 0x73, 0x55, 0x72, 0x69,
	0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb,
	0x18, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x02, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xbb, 0x18, 0x02,
	0x61, 0x6b, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x48, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x61, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xbb, 0x18, 0x02, 0x61, 0x6b, 0x52, 0x02,
	0x61, 0x6b, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x1f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0xbb, 0x18, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xfa, 0x04, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xca, 0xbb, 0x18, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca,
	0xbb, 0x18, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x6e,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0e, 0xca, 0xbb,
	0x18, 0x0a, 0x69, 0x73, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0a, 0x69, 0x73,
	0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0f, 0xca,
	0xbb, 0x18, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0b,
	0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xbb, 0x18,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x0d, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xca, 0xbb,
	0x18, 0x0d, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0a, 0xca, 0xbb,
	0x18, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xbf,
	0x02, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb,
	0x18, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xca, 0xbb, 0x18,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x43, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xbb, 0x18,
	0x08, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x9c, 0x02, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb,
	0x18, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xca, 0xbb, 0x18, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x07, 0x6e, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0b, 0xca, 0xbb, 0x18, 0x07, 0x6e, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x07, 0x6e, 0x65,
	0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x42, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xca, 0xbb, 0x18, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x6f, 0x70, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x31, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xca, 0xbb,
	0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x6f, 0x70, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08,
	0x6f, 0x70, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xca, 0xbb, 0x18, 0x08, 0x6f, 0x70, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x70,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6f,
	0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6f, 0x70, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x49, 0x6e, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xca, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x74, 0x49, 0x64, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xca, 0xbb, 0x18,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xca, 0xbb, 0x18, 0x03, 0x63, 0x6d, 0x64, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x25,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0b, 0xca, 0xbb, 0x18, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x5a, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca,
	0xbb, 0x18, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x32, 0xe1, 0x15, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0xd2,
	0xc1, 0x18, 0x2b, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa2,
	0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x41, 0xe2, 0xc1, 0x18, 0x3d, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0xa2, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0xda, 0xc1, 0x18, 0x3d, 0x2f, 0x65, 0x63, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0xda,
	0xc1, 0x18, 0x3e, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x9b, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0xca, 0xc1, 0x18, 0x3f,
	0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x3a, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x9c, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0xd2, 0xc1, 0x18, 0x2e,
	0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x88,
	0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0xca, 0xc1, 0x18, 0x29,
	0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0xd2, 0xc1, 0x18, 0x32,
	0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0xd2, 0xc1, 0x18, 0x33, 0x2f, 0x65, 0x63, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x93, 0x01, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45,
	0xca, 0xc1, 0x18, 0x41, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2f, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0xd2, 0xc1, 0x18,
	0x2b, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x77, 0x0a, 0x10,
	0x45, 0x78, 0x65, 0x63, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x69,
	0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xca, 0xc1, 0x18,
	0x24, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0xca, 0xc1, 0x18, 0x37, 0x2f, 0x65, 0x63, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x2f, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0xb2, 0x01, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0xca, 0xc1, 0x18, 0x4a, 0x2f, 0x65,
	0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0xb4, 0x01, 0x0a, 0x0c, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0xca, 0xc1,
	0x18, 0x3d, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0xa8, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x35, 0xd2, 0xc1, 0x18, 0x31, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xd2, 0xc1, 0x18, 0x24, 0x2f, 0x65, 0x63, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x7c, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2a, 0xd2, 0xc1, 0x18, 0x26, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x25,
	0x92, 0xce, 0x18, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x63, 0x69, 0x2d,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x74, 0x79,
	0x75, 0x6e, 0x2e, 0x63, 0x6e, 0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x63,
	0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_eci_containergroup_proto_rawDescOnce sync.Once
	file_api_eci_containergroup_proto_rawDescData = file_api_eci_containergroup_proto_rawDesc
)

func file_api_eci_containergroup_proto_rawDescGZIP() []byte {
	file_api_eci_containergroup_proto_rawDescOnce.Do(func() {
		file_api_eci_containergroup_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_eci_containergroup_proto_rawDescData)
	})
	return file_api_eci_containergroup_proto_rawDescData
}

var file_api_eci_containergroup_proto_msgTypes = make([]protoimpl.MessageInfo, 130)
var file_api_eci_containergroup_proto_goTypes = []interface{}{
	(*CreateContainerGroupRequest)(nil),               // 0: proto.CreateContainerGroupRequest
	(*HostSecurityContext)(nil),                       // 1: proto.HostSecurityContext
	(*Sysctl)(nil),                                    // 2: proto.Sysctl
	(*FlavorInfo)(nil),                                // 3: proto.FlavorInfo
	(*SubResource)(nil),                               // 4: proto.SubResource
	(*InternalRequestHeader)(nil),                     // 5: proto.InternalRequestHeader
	(*PodDNSConfigOption)(nil),                        // 6: proto.PodDNSConfigOption
	(*PodDNSConfig)(nil),                              // 7: proto.PodDNSConfig
	(*HostAlias)(nil),                                 // 8: proto.HostAlias
	(*Tag)(nil),                                       // 9: proto.Tag
	(*Eip)(nil),                                       // 10: proto.Eip
	(*Container)(nil),                                 // 11: proto.Container
	(*ContainerPort)(nil),                             // 12: proto.ContainerPort
	(*EnvironmentVar)(nil),                            // 13: proto.EnvironmentVar
	(*FieldRef)(nil),                                  // 14: proto.FieldRef
	(*VolumeMount)(nil),                               // 15: proto.VolumeMount
	(*VolumeDevice)(nil),                              // 16: proto.VolumeDevice
	(*Probe)(nil),                                     // 17: proto.Probe
	(*Exec)(nil),                                      // 18: proto.Exec
	(*HttpGet)(nil),                                   // 19: proto.HttpGet
	(*HTTPHeader)(nil),                                // 20: proto.HTTPHeader
	(*TCPSocket)(nil),                                 // 21: proto.TCPSocket
	(*SecurityContext)(nil),                           // 22: proto.SecurityContext
	(*Capabilities)(nil),                              // 23: proto.Capabilities
	(*ImageRegistryCredential)(nil),                   // 24: proto.ImageRegistryCredential
	(*AzInfo)(nil),                                    // 25: proto.AzInfo
	(*Volume)(nil),                                    // 26: proto.Volume
	(*ProjectedVolume)(nil),                           // 27: proto.ProjectedVolume
	(*VolumeProjection)(nil),                          // 28: proto.VolumeProjection
	(*ConfigMapProjection)(nil),                       // 29: proto.ConfigMapProjection
	(*DownwardAPIProjection)(nil),                     // 30: proto.DownwardAPIProjection
	(*SecretProjection)(nil),                          // 31: proto.SecretProjection
	(*KeyToPath)(nil),                                 // 32: proto.KeyToPath
	(*DownwardAPIVolume)(nil),                         // 33: proto.DownwardAPIVolume
	(*DownwardAPIItem)(nil),                           // 34: proto.DownwardAPIItem
	(*ResourceFieldRef)(nil),                          // 35: proto.ResourceFieldRef
	(*HostPathVolume)(nil),                            // 36: proto.HostPathVolume
	(*EmptyDirVolume)(nil),                            // 37: proto.EmptyDirVolume
	(*ConfigFileVolume)(nil),                          // 38: proto.ConfigFileVolume
	(*ConfigFileToPath)(nil),                          // 39: proto.ConfigFileToPath
	(*SecretVolume)(nil),                              // 40: proto.SecretVolume
	(*SecretToPath)(nil),                              // 41: proto.SecretToPath
	(*DiskVolume)(nil),                                // 42: proto.DiskVolume
	(*NasVolume)(nil),                                 // 43: proto.NasVolume
	(*ZosVolume)(nil),                                 // 44: proto.ZosVolume
	(*CreateContainerGroupResponse)(nil),              // 45: proto.CreateContainerGroupResponse
	(*DeleteContainerGroupRequest)(nil),               // 46: proto.DeleteContainerGroupRequest
	(*DeleteContainerGroupResponse)(nil),              // 47: proto.DeleteContainerGroupResponse
	(*ForceRecycleContainerGroupRequest)(nil),         // 48: proto.ForceRecycleContainerGroupRequest
	(*ForceRecycleContainerGroupResponse)(nil),        // 49: proto.ForceRecycleContainerGroupResponse
	(*UpdateContainerGroupRequest)(nil),               // 50: proto.UpdateContainerGroupRequest
	(*UpdateContainerGroupResponse)(nil),              // 51: proto.UpdateContainerGroupResponse
	(*RestartContainerGroupRequest)(nil),              // 52: proto.RestartContainerGroupRequest
	(*RestartContainerGroupResponse)(nil),             // 53: proto.RestartContainerGroupResponse
	(*GetContainerGroupRequest)(nil),                  // 54: proto.GetContainerGroupRequest
	(*GetContainerGroupResponse)(nil),                 // 55: proto.GetContainerGroupResponse
	(*DescribeContainer)(nil),                         // 56: proto.DescribeContainer
	(*State)(nil),                                     // 57: proto.State
	(*DescribeEvent)(nil),                             // 58: proto.DescribeEvent
	(*Source)(nil),                                    // 59: proto.Source
	(*InvolvedObject)(nil),                            // 60: proto.InvolvedObject
	(*DescribeVolume)(nil),                            // 61: proto.DescribeVolume
	(*ProjectedVolumeItem)(nil),                       // 62: proto.ProjectedVolumeItem
	(*DownwardAPIVolumeItem)(nil),                     // 63: proto.DownwardAPIVolumeItem
	(*DescribeVolumeCommon)(nil),                      // 64: proto.DescribeVolumeCommon
	(*DescribeContainerGroupsRequest)(nil),            // 65: proto.DescribeContainerGroupsRequest
	(*DescribeContainerGroupsResponse)(nil),           // 66: proto.DescribeContainerGroupsResponse
	(*ListContainerGroupRequest)(nil),                 // 67: proto.ListContainerGroupRequest
	(*ListContainerGroupResponse)(nil),                // 68: proto.ListContainerGroupResponse
	(*ContainerGroupRecord)(nil),                      // 69: proto.ContainerGroupRecord
	(*DescribeContainerGroupEventRequest)(nil),        // 70: proto.DescribeContainerGroupEventRequest
	(*DescribeContainerGroupEventResponse)(nil),       // 71: proto.DescribeContainerGroupEventResponse
	(*DescribeContainerGroupEventData)(nil),           // 72: proto.DescribeContainerGroupEventData
	(*DescribeContainerGroupStatusRequest)(nil),       // 73: proto.DescribeContainerGroupStatusRequest
	(*DescribeContainerGroupStatusResponse)(nil),      // 74: proto.DescribeContainerGroupStatusResponse
	(*DescribeContainerGroupStatus)(nil),              // 75: proto.DescribeContainerGroupStatus
	(*PodStatus)(nil),                                 // 76: proto.PodStatus
	(*Conditions)(nil),                                // 77: proto.Conditions
	(*PodIP)(nil),                                     // 78: proto.PodIP
	(*ContainerStatus)(nil),                           // 79: proto.ContainerStatus
	(*Quantity)(nil),                                  // 80: proto.Quantity
	(*ContainerState)(nil),                            // 81: proto.ContainerState
	(*ContainerStateWaiting)(nil),                     // 82: proto.ContainerStateWaiting
	(*ContainerStateRunning)(nil),                     // 83: proto.ContainerStateRunning
	(*ContainerStateTerminated)(nil),                  // 84: proto.ContainerStateTerminated
	(*DescribeContainerGroupMetricRequest)(nil),       // 85: proto.DescribeContainerGroupMetricRequest
	(*DescribeMultiContainerGroupMetricRequest)(nil),  // 86: proto.DescribeMultiContainerGroupMetricRequest
	(*DescribeContainerGroupMetricResponse)(nil),      // 87: proto.DescribeContainerGroupMetricResponse
	(*DescribeMultiContainerGroupMetricResponse)(nil), // 88: proto.DescribeMultiContainerGroupMetricResponse
	(*Record)(nil),                                    // 89: proto.Record
	(*Network)(nil),                                   // 90: proto.Network
	(*Interface)(nil),                                 // 91: proto.Interface
	(*CPU)(nil),                                       // 92: proto.CPU
	(*Memory)(nil),                                    // 93: proto.Memory
	(*Disk)(nil),                                      // 94: proto.Disk
	(*FileSystem)(nil),                                // 95: proto.FileSystem
	(*GPU)(nil),                                       // 96: proto.GPU
	(*ContainerMetric)(nil),                           // 97: proto.ContainerMetric
	(*DescribeContainerLogRequest)(nil),               // 98: proto.DescribeContainerLogRequest
	(*DescribeContainerLogResponse)(nil),              // 99: proto.DescribeContainerLogResponse
	(*ConsoleWebsocketRequest)(nil),                   // 100: proto.ConsoleWebsocketRequest
	(*ConsoleWebsocketResponse)(nil),                  // 101: proto.ConsoleWebsocketResponse
	(*ExecWebsocketRequest)(nil),                      // 102: proto.ExecWebsocketRequest
	(*ExecWebsocketResponse)(nil),                     // 103: proto.ExecWebsocketResponse
	(*ExecCommandRequest)(nil),                        // 104: proto.ExecCommandRequest
	(*ExecMessage)(nil),                               // 105: proto.ExecMessage
	(*ExecCommandResponse)(nil),                       // 106: proto.ExecCommandResponse
	(*DescribeExecAuditRequest)(nil),                  // 107: proto.DescribeExecAuditRequest
	(*DescribeExecAuditResponse)(nil),                 // 108: proto.DescribeExecAuditResponse
	(*ExecAuditRecord)(nil),                           // 109: proto.ExecAuditRecord
	(*ClearExpiredAuditResponse)(nil),                 // 110: proto.ClearExpiredAuditResponse
	(*CreateBizIdentityRecordRequest)(nil),            // 111: proto.CreateBizIdentityRecordRequest
	(*CreateBizIdentityRecordResponse)(nil),           // 112: proto.CreateBizIdentityRecordResponse
	(*DeleteBizIdentityRecordRequest)(nil),            // 113: proto.DeleteBizIdentityRecordRequest
	(*DeleteBizIdentityRecordResponse)(nil),           // 114: proto.DeleteBizIdentityRecordResponse
	(*QueryOrderDetailRequest)(nil),                   // 115: proto.QueryOrderDetailRequest
	(*QueryOrderDetailResponse)(nil),                  // 116: proto.QueryOrderDetailResponse
	(*Order)(nil),                                     // 117: proto.Order
	(*ResizeContainerGroupVolumeRequest)(nil),         // 118: proto.ResizeContainerGroupVolumeRequest
	(*ResizeContainerGroupVolumeResponse)(nil),        // 119: proto.ResizeContainerGroupVolumeResponse
	(*CreateOpsTaskRequest)(nil),                      // 120: proto.CreateOpsTaskRequest
	(*CreateOpsTaskResponse)(nil),                     // 121: proto.CreateOpsTaskResponse
	(*DescribeOpsTaskRequest)(nil),                    // 122: proto.DescribeOpsTaskRequest
	(*DescribeOpsTaskResponse)(nil),                   // 123: proto.DescribeOpsTaskResponse
	(*OpsRecord)(nil),                                 // 124: proto.OpsRecord
	(*RunCommandInVMRequest)(nil),                     // 125: proto.RunCommandInVMRequest
	(*RunCommandInVMResponse)(nil),                    // 126: proto.RunCommandInVMResponse
	nil,                                               // 127: proto.CreateContainerGroupRequest.AnnotationsEntry
	nil,                                               // 128: proto.CreateContainerGroupRequest.LabelsEntry
	nil,                                               // 129: proto.ContainerStatus.AllocatedResourcesEntry
}
var file_api_eci_containergroup_proto_depIdxs = []int32{
	10,  // 0: proto.CreateContainerGroupRequest.eip:type_name -> proto.Eip
	7,   // 1: proto.CreateContainerGroupRequest.dnsConfig:type_name -> proto.PodDNSConfig
	8,   // 2: proto.CreateContainerGroupRequest.hostAliases:type_name -> proto.HostAlias
	9,   // 3: proto.CreateContainerGroupRequest.tags:type_name -> proto.Tag
	11,  // 4: proto.CreateContainerGroupRequest.initContainers:type_name -> proto.Container
	11,  // 5: proto.CreateContainerGroupRequest.containers:type_name -> proto.Container
	26,  // 6: proto.CreateContainerGroupRequest.volumes:type_name -> proto.Volume
	24,  // 7: proto.CreateContainerGroupRequest.imageRegistryCredentials:type_name -> proto.ImageRegistryCredential
	25,  // 8: proto.CreateContainerGroupRequest.azInfo:type_name -> proto.AzInfo
	4,   // 9: proto.CreateContainerGroupRequest.subResources:type_name -> proto.SubResource
	3,   // 10: proto.CreateContainerGroupRequest.flavorInfo:type_name -> proto.FlavorInfo
	1,   // 11: proto.CreateContainerGroupRequest.securityContext:type_name -> proto.HostSecurityContext
	127, // 12: proto.CreateContainerGroupRequest.annotations:type_name -> proto.CreateContainerGroupRequest.AnnotationsEntry
	128, // 13: proto.CreateContainerGroupRequest.labels:type_name -> proto.CreateContainerGroupRequest.LabelsEntry
	2,   // 14: proto.HostSecurityContext.sysctl:type_name -> proto.Sysctl
	6,   // 15: proto.PodDNSConfig.options:type_name -> proto.PodDNSConfigOption
	12,  // 16: proto.Container.ports:type_name -> proto.ContainerPort
	13,  // 17: proto.Container.environmentVar:type_name -> proto.EnvironmentVar
	15,  // 18: proto.Container.volumeMount:type_name -> proto.VolumeMount
	17,  // 19: proto.Container.readinessProbe:type_name -> proto.Probe
	17,  // 20: proto.Container.livenessProbe:type_name -> proto.Probe
	22,  // 21: proto.Container.securityContext:type_name -> proto.SecurityContext
	16,  // 22: proto.Container.volumeDevice:type_name -> proto.VolumeDevice
	14,  // 23: proto.EnvironmentVar.fieldRef:type_name -> proto.FieldRef
	35,  // 24: proto.EnvironmentVar.resourceFieldRef:type_name -> proto.ResourceFieldRef
	18,  // 25: proto.Probe.exec:type_name -> proto.Exec
	19,  // 26: proto.Probe.httpGet:type_name -> proto.HttpGet
	21,  // 27: proto.Probe.tcpSocket:type_name -> proto.TCPSocket
	20,  // 28: proto.HttpGet.httpHeaders:type_name -> proto.HTTPHeader
	23,  // 29: proto.SecurityContext.capabilities:type_name -> proto.Capabilities
	37,  // 30: proto.Volume.emptyDirVolume:type_name -> proto.EmptyDirVolume
	38,  // 31: proto.Volume.configFileVolume:type_name -> proto.ConfigFileVolume
	40,  // 32: proto.Volume.secretVolume:type_name -> proto.SecretVolume
	42,  // 33: proto.Volume.diskVolume:type_name -> proto.DiskVolume
	43,  // 34: proto.Volume.nasVolume:type_name -> proto.NasVolume
	44,  // 35: proto.Volume.zosVolume:type_name -> proto.ZosVolume
	36,  // 36: proto.Volume.hostPathVolume:type_name -> proto.HostPathVolume
	33,  // 37: proto.Volume.downwardAPIVolume:type_name -> proto.DownwardAPIVolume
	27,  // 38: proto.Volume.projectedVolume:type_name -> proto.ProjectedVolume
	28,  // 39: proto.ProjectedVolume.sources:type_name -> proto.VolumeProjection
	29,  // 40: proto.VolumeProjection.configMap:type_name -> proto.ConfigMapProjection
	30,  // 41: proto.VolumeProjection.downwardAPI:type_name -> proto.DownwardAPIProjection
	31,  // 42: proto.VolumeProjection.secret:type_name -> proto.SecretProjection
	32,  // 43: proto.ConfigMapProjection.items:type_name -> proto.KeyToPath
	34,  // 44: proto.DownwardAPIProjection.items:type_name -> proto.DownwardAPIItem
	32,  // 45: proto.SecretProjection.items:type_name -> proto.KeyToPath
	34,  // 46: proto.DownwardAPIVolume.items:type_name -> proto.DownwardAPIItem
	14,  // 47: proto.DownwardAPIItem.fieldRef:type_name -> proto.FieldRef
	35,  // 48: proto.DownwardAPIItem.resourceFieldRef:type_name -> proto.ResourceFieldRef
	39,  // 49: proto.ConfigFileVolume.configFileToPaths:type_name -> proto.ConfigFileToPath
	41,  // 50: proto.SecretVolume.secretToPaths:type_name -> proto.SecretToPath
	10,  // 51: proto.UpdateContainerGroupRequest.eip:type_name -> proto.Eip
	9,   // 52: proto.UpdateContainerGroupRequest.tags:type_name -> proto.Tag
	11,  // 53: proto.UpdateContainerGroupRequest.initContainers:type_name -> proto.Container
	11,  // 54: proto.UpdateContainerGroupRequest.containers:type_name -> proto.Container
	24,  // 55: proto.UpdateContainerGroupRequest.imageRegistryCredentials:type_name -> proto.ImageRegistryCredential
	7,   // 56: proto.UpdateContainerGroupRequest.dnsConfig:type_name -> proto.PodDNSConfig
	26,  // 57: proto.UpdateContainerGroupRequest.volumes:type_name -> proto.Volume
	9,   // 58: proto.GetContainerGroupResponse.tags:type_name -> proto.Tag
	56,  // 59: proto.GetContainerGroupResponse.containers:type_name -> proto.DescribeContainer
	58,  // 60: proto.GetContainerGroupResponse.events:type_name -> proto.DescribeEvent
	61,  // 61: proto.GetContainerGroupResponse.volumes:type_name -> proto.DescribeVolume
	56,  // 62: proto.GetContainerGroupResponse.initContainers:type_name -> proto.DescribeContainer
	12,  // 63: proto.DescribeContainer.ports:type_name -> proto.ContainerPort
	57,  // 64: proto.DescribeContainer.currentState:type_name -> proto.State
	57,  // 65: proto.DescribeContainer.previousState:type_name -> proto.State
	13,  // 66: proto.DescribeContainer.environmentVar:type_name -> proto.EnvironmentVar
	15,  // 67: proto.DescribeContainer.volumeMount:type_name -> proto.VolumeMount
	17,  // 68: proto.DescribeContainer.readinessProbe:type_name -> proto.Probe
	17,  // 69: proto.DescribeContainer.livenessProbe:type_name -> proto.Probe
	59,  // 70: proto.DescribeEvent.source:type_name -> proto.Source
	60,  // 71: proto.DescribeEvent.involvedObject:type_name -> proto.InvolvedObject
	64,  // 72: proto.DescribeVolume.configFileVolumeConfigFileToPaths:type_name -> proto.DescribeVolumeCommon
	64,  // 73: proto.DescribeVolume.secretVolumeFileToPaths:type_name -> proto.DescribeVolumeCommon
	63,  // 74: proto.DescribeVolume.downwardAPIVolumeItems:type_name -> proto.DownwardAPIVolumeItem
	62,  // 75: proto.DescribeVolume.projectedVolumeItems:type_name -> proto.ProjectedVolumeItem
	28,  // 76: proto.ProjectedVolumeItem.sources:type_name -> proto.VolumeProjection
	14,  // 77: proto.DownwardAPIVolumeItem.fieldRef:type_name -> proto.FieldRef
	35,  // 78: proto.DownwardAPIVolumeItem.resourceFieldRef:type_name -> proto.ResourceFieldRef
	9,   // 79: proto.DescribeContainerGroupsRequest.tags:type_name -> proto.Tag
	55,  // 80: proto.DescribeContainerGroupsResponse.containerGroups:type_name -> proto.GetContainerGroupResponse
	69,  // 81: proto.ListContainerGroupResponse.records:type_name -> proto.ContainerGroupRecord
	9,   // 82: proto.ContainerGroupRecord.tags:type_name -> proto.Tag
	9,   // 83: proto.DescribeContainerGroupEventRequest.tags:type_name -> proto.Tag
	72,  // 84: proto.DescribeContainerGroupEventResponse.data:type_name -> proto.DescribeContainerGroupEventData
	58,  // 85: proto.DescribeContainerGroupEventData.events:type_name -> proto.DescribeEvent
	9,   // 86: proto.DescribeContainerGroupStatusRequest.tags:type_name -> proto.Tag
	75,  // 87: proto.DescribeContainerGroupStatusResponse.data:type_name -> proto.DescribeContainerGroupStatus
	76,  // 88: proto.DescribeContainerGroupStatus.podStatus:type_name -> proto.PodStatus
	77,  // 89: proto.PodStatus.conditions:type_name -> proto.Conditions
	79,  // 90: proto.PodStatus.containerStatuses:type_name -> proto.ContainerStatus
	78,  // 91: proto.PodStatus.podIps:type_name -> proto.PodIP
	81,  // 92: proto.ContainerStatus.state:type_name -> proto.ContainerState
	81,  // 93: proto.ContainerStatus.lastState:type_name -> proto.ContainerState
	129, // 94: proto.ContainerStatus.allocatedResources:type_name -> proto.ContainerStatus.AllocatedResourcesEntry
	82,  // 95: proto.ContainerState.waiting:type_name -> proto.ContainerStateWaiting
	83,  // 96: proto.ContainerState.running:type_name -> proto.ContainerStateRunning
	84,  // 97: proto.ContainerState.terminated:type_name -> proto.ContainerStateTerminated
	89,  // 98: proto.DescribeContainerGroupMetricResponse.records:type_name -> proto.Record
	87,  // 99: proto.DescribeMultiContainerGroupMetricResponse.metrics:type_name -> proto.DescribeContainerGroupMetricResponse
	90,  // 100: proto.Record.network:type_name -> proto.Network
	92,  // 101: proto.Record.cpu:type_name -> proto.CPU
	93,  // 102: proto.Record.memory:type_name -> proto.Memory
	96,  // 103: proto.Record.gpu:type_name -> proto.GPU
	94,  // 104: proto.Record.disk:type_name -> proto.Disk
	95,  // 105: proto.Record.fileSystem:type_name -> proto.FileSystem
	97,  // 106: proto.Record.containers:type_name -> proto.ContainerMetric
	91,  // 107: proto.Network.interfaces:type_name -> proto.Interface
	92,  // 108: proto.ContainerMetric.cpu:type_name -> proto.CPU
	93,  // 109: proto.ContainerMetric.memory:type_name -> proto.Memory
	109, // 110: proto.DescribeExecAuditResponse.records:type_name -> proto.ExecAuditRecord
	117, // 111: proto.QueryOrderDetailResponse.orders:type_name -> proto.Order
	124, // 112: proto.DescribeOpsTaskResponse.records:type_name -> proto.OpsRecord
	80,  // 113: proto.ContainerStatus.AllocatedResourcesEntry.value:type_name -> proto.Quantity
	0,   // 114: proto.ContainerGroupService.CreateContainerGroup:input_type -> proto.CreateContainerGroupRequest
	46,  // 115: proto.ContainerGroupService.DeleteContainerGroup:input_type -> proto.DeleteContainerGroupRequest
	50,  // 116: proto.ContainerGroupService.UpdateContainerGroup:input_type -> proto.UpdateContainerGroupRequest
	52,  // 117: proto.ContainerGroupService.RestartContainerGroup:input_type -> proto.RestartContainerGroupRequest
	54,  // 118: proto.ContainerGroupService.GetContainerGroup:input_type -> proto.GetContainerGroupRequest
	65,  // 119: proto.ContainerGroupService.DescribeContainerGroups:input_type -> proto.DescribeContainerGroupsRequest
	67,  // 120: proto.ContainerGroupService.ListContainerGroup:input_type -> proto.ListContainerGroupRequest
	70,  // 121: proto.ContainerGroupService.Event:input_type -> proto.DescribeContainerGroupEventRequest
	73,  // 122: proto.ContainerGroupService.Status:input_type -> proto.DescribeContainerGroupStatusRequest
	100, // 123: proto.ContainerGroupService.Websocket:input_type -> proto.ConsoleWebsocketRequest
	104, // 124: proto.ContainerGroupService.ExecCommand:input_type -> proto.ExecCommandRequest
	102, // 125: proto.ContainerGroupService.ExecWebsocketUri:input_type -> proto.ExecWebsocketRequest
	98,  // 126: proto.ContainerGroupService.Log:input_type -> proto.DescribeContainerLogRequest
	85,  // 127: proto.ContainerGroupService.Monitor:input_type -> proto.DescribeContainerGroupMetricRequest
	86,  // 128: proto.ContainerGroupService.MultiMonitor:input_type -> proto.DescribeMultiContainerGroupMetricRequest
	118, // 129: proto.ContainerGroupService.ResizeContainerGroupVolume:input_type -> proto.ResizeContainerGroupVolumeRequest
	120, // 130: proto.ContainerGroupService.CreateOpsTask:input_type -> proto.CreateOpsTaskRequest
	122, // 131: proto.ContainerGroupService.DescribeOpsTask:input_type -> proto.DescribeOpsTaskRequest
	45,  // 132: proto.ContainerGroupService.CreateContainerGroup:output_type -> proto.CreateContainerGroupResponse
	47,  // 133: proto.ContainerGroupService.DeleteContainerGroup:output_type -> proto.DeleteContainerGroupResponse
	51,  // 134: proto.ContainerGroupService.UpdateContainerGroup:output_type -> proto.UpdateContainerGroupResponse
	53,  // 135: proto.ContainerGroupService.RestartContainerGroup:output_type -> proto.RestartContainerGroupResponse
	55,  // 136: proto.ContainerGroupService.GetContainerGroup:output_type -> proto.GetContainerGroupResponse
	66,  // 137: proto.ContainerGroupService.DescribeContainerGroups:output_type -> proto.DescribeContainerGroupsResponse
	68,  // 138: proto.ContainerGroupService.ListContainerGroup:output_type -> proto.ListContainerGroupResponse
	71,  // 139: proto.ContainerGroupService.Event:output_type -> proto.DescribeContainerGroupEventResponse
	74,  // 140: proto.ContainerGroupService.Status:output_type -> proto.DescribeContainerGroupStatusResponse
	101, // 141: proto.ContainerGroupService.Websocket:output_type -> proto.ConsoleWebsocketResponse
	106, // 142: proto.ContainerGroupService.ExecCommand:output_type -> proto.ExecCommandResponse
	103, // 143: proto.ContainerGroupService.ExecWebsocketUri:output_type -> proto.ExecWebsocketResponse
	99,  // 144: proto.ContainerGroupService.Log:output_type -> proto.DescribeContainerLogResponse
	87,  // 145: proto.ContainerGroupService.Monitor:output_type -> proto.DescribeContainerGroupMetricResponse
	88,  // 146: proto.ContainerGroupService.MultiMonitor:output_type -> proto.DescribeMultiContainerGroupMetricResponse
	119, // 147: proto.ContainerGroupService.ResizeContainerGroupVolume:output_type -> proto.ResizeContainerGroupVolumeResponse
	121, // 148: proto.ContainerGroupService.CreateOpsTask:output_type -> proto.CreateOpsTaskResponse
	123, // 149: proto.ContainerGroupService.DescribeOpsTask:output_type -> proto.DescribeOpsTaskResponse
	132, // [132:150] is the sub-list for method output_type
	114, // [114:132] is the sub-list for method input_type
	114, // [114:114] is the sub-list for extension type_name
	114, // [114:114] is the sub-list for extension extendee
	0,   // [0:114] is the sub-list for field type_name
}

func init() { file_api_eci_containergroup_proto_init() }
func file_api_eci_containergroup_proto_init() {
	if File_api_eci_containergroup_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_eci_containergroup_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContainerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostSecurityContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sysctl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlavorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalRequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodDNSConfigOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodDNSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Eip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPSocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRegistryCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectedVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeProjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapProjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownwardAPIProjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretProjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyToPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownwardAPIVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownwardAPIItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceFieldRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostPathVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyDirVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFileVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFileToPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretToPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NasVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZosVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContainerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContainerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContainerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceRecycleContainerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceRecycleContainerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContainerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContainerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartContainerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartContainerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvolvedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectedVolumeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownwardAPIVolumeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVolumeCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContainerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContainerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerGroupRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStateWaiting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStateRunning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStateTerminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMultiContainerGroupMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerGroupMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMultiContainerGroupMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeContainerLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsoleWebsocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsoleWebsocketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecWebsocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecWebsocketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeExecAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeExecAuditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecAuditRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearExpiredAuditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBizIdentityRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBizIdentityRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBizIdentityRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBizIdentityRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrderDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrderDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeContainerGroupVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeContainerGroupVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpsTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpsTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeOpsTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeOpsTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCommandInVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_eci_containergroup_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCommandInVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_eci_containergroup_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   130,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_eci_containergroup_proto_goTypes,
		DependencyIndexes: file_api_eci_containergroup_proto_depIdxs,
		MessageInfos:      file_api_eci_containergroup_proto_msgTypes,
	}.Build()
	File_api_eci_containergroup_proto = out.File
	file_api_eci_containergroup_proto_rawDesc = nil
	file_api_eci_containergroup_proto_goTypes = nil
	file_api_eci_containergroup_proto_depIdxs = nil
}
