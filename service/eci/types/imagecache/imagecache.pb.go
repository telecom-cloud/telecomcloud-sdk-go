// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: imagecache.proto

package imagecache

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	containergroup "github.com/telecom-cloud/telecomcloud-sdk-go/service/eci/types/containergroup"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateImageCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroupId          string                                    `protobuf:"bytes,1,opt,name=securityGroupId,proto3" form:"securityGroupId" json:"securityGroupId,omitempty"`
	VSwitchId                string                                    `protobuf:"bytes,2,opt,name=vSwitchId,proto3" form:"vSwitchId" json:"vSwitchId,omitempty"`
	VpcId                    string                                    `protobuf:"bytes,3,opt,name=vpcId,proto3" form:"vpcId" json:"vpcId,omitempty"`
	ImageCacheName           string                                    `protobuf:"bytes,4,opt,name=imageCacheName,proto3" form:"imageCacheName" json:"imageCacheName,omitempty"`
	ImageCacheSize           int32                                     `protobuf:"varint,5,opt,name=imageCacheSize,proto3" form:"imageCacheSize" json:"imageCacheSize,omitempty"`
	RetentionDays            int32                                     `protobuf:"varint,6,opt,name=retentionDays,proto3" form:"retentionDays" json:"retentionDays,omitempty"`
	Images                   []string                                  `protobuf:"bytes,7,rep,name=images,proto3" form:"images" json:"images,omitempty"`
	Tags                     []*containergroup.Tag                     `protobuf:"bytes,8,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	AzInfo                   *containergroup.AzInfo                    `protobuf:"bytes,9,opt,name=azInfo,proto3" form:"azInfo" json:"azInfo,omitempty"`
	Eip                      *containergroup.Eip                       `protobuf:"bytes,10,opt,name=eip,proto3" form:"eip" json:"eip,omitempty"`
	ImageRegistryCredentials []*containergroup.ImageRegistryCredential `protobuf:"bytes,11,rep,name=imageRegistryCredentials,proto3" form:"imageRegistryCredentials" json:"imageRegistryCredentials,omitempty"`
	RegionId                 string                                    `protobuf:"bytes,12,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *CreateImageCacheRequest) Reset() {
	*x = CreateImageCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageCacheRequest) ProtoMessage() {}

func (x *CreateImageCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageCacheRequest.ProtoReflect.Descriptor instead.
func (*CreateImageCacheRequest) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{0}
}

func (x *CreateImageCacheRequest) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *CreateImageCacheRequest) GetVSwitchId() string {
	if x != nil {
		return x.VSwitchId
	}
	return ""
}

func (x *CreateImageCacheRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *CreateImageCacheRequest) GetImageCacheName() string {
	if x != nil {
		return x.ImageCacheName
	}
	return ""
}

func (x *CreateImageCacheRequest) GetImageCacheSize() int32 {
	if x != nil {
		return x.ImageCacheSize
	}
	return 0
}

func (x *CreateImageCacheRequest) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *CreateImageCacheRequest) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CreateImageCacheRequest) GetTags() []*containergroup.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateImageCacheRequest) GetAzInfo() *containergroup.AzInfo {
	if x != nil {
		return x.AzInfo
	}
	return nil
}

func (x *CreateImageCacheRequest) GetEip() *containergroup.Eip {
	if x != nil {
		return x.Eip
	}
	return nil
}

func (x *CreateImageCacheRequest) GetImageRegistryCredentials() []*containergroup.ImageRegistryCredential {
	if x != nil {
		return x.ImageRegistryCredentials
	}
	return nil
}

func (x *CreateImageCacheRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type CreateImageCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      string   `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	ImageCacheId   string   `protobuf:"bytes,2,opt,name=imageCacheId,proto3" form:"imageCacheId" json:"imageCacheId,omitempty" query:"imageCacheId"`
	ImageCacheName string   `protobuf:"bytes,3,opt,name=imageCacheName,proto3" form:"imageCacheName" json:"imageCacheName,omitempty" query:"imageCacheName"`
	ImageCacheSize int32    `protobuf:"varint,4,opt,name=imageCacheSize,proto3" form:"imageCacheSize" json:"imageCacheSize,omitempty" query:"imageCacheSize"`
	Images         []string `protobuf:"bytes,5,rep,name=images,proto3" form:"images" json:"images,omitempty" query:"images"`
}

func (x *CreateImageCacheResponse) Reset() {
	*x = CreateImageCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageCacheResponse) ProtoMessage() {}

func (x *CreateImageCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageCacheResponse.ProtoReflect.Descriptor instead.
func (*CreateImageCacheResponse) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{1}
}

func (x *CreateImageCacheResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateImageCacheResponse) GetImageCacheId() string {
	if x != nil {
		return x.ImageCacheId
	}
	return ""
}

func (x *CreateImageCacheResponse) GetImageCacheName() string {
	if x != nil {
		return x.ImageCacheName
	}
	return ""
}

func (x *CreateImageCacheResponse) GetImageCacheSize() int32 {
	if x != nil {
		return x.ImageCacheSize
	}
	return 0
}

func (x *CreateImageCacheResponse) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

type UpdateImageCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageCacheId string                `protobuf:"bytes,1,opt,name=imageCacheId,proto3" json:"imageCacheId,omitempty" path:"imageCacheId"`
	Tags         []*containergroup.Tag `protobuf:"bytes,2,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	RegionId     string                `protobuf:"bytes,3,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *UpdateImageCacheRequest) Reset() {
	*x = UpdateImageCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageCacheRequest) ProtoMessage() {}

func (x *UpdateImageCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageCacheRequest.ProtoReflect.Descriptor instead.
func (*UpdateImageCacheRequest) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateImageCacheRequest) GetImageCacheId() string {
	if x != nil {
		return x.ImageCacheId
	}
	return ""
}

func (x *UpdateImageCacheRequest) GetTags() []*containergroup.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateImageCacheRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type UpdateImageCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *UpdateImageCacheResponse) Reset() {
	*x = UpdateImageCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageCacheResponse) ProtoMessage() {}

func (x *UpdateImageCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageCacheResponse.ProtoReflect.Descriptor instead.
func (*UpdateImageCacheResponse) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateImageCacheResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DeleteImageCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageCacheId string `protobuf:"bytes,1,opt,name=imageCacheId,proto3" json:"imageCacheId,omitempty" path:"imageCacheId"`
	RegionId     string `protobuf:"bytes,2,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DeleteImageCacheRequest) Reset() {
	*x = DeleteImageCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteImageCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteImageCacheRequest) ProtoMessage() {}

func (x *DeleteImageCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteImageCacheRequest.ProtoReflect.Descriptor instead.
func (*DeleteImageCacheRequest) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteImageCacheRequest) GetImageCacheId() string {
	if x != nil {
		return x.ImageCacheId
	}
	return ""
}

func (x *DeleteImageCacheRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DeleteImageCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *DeleteImageCacheResponse) Reset() {
	*x = DeleteImageCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteImageCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteImageCacheResponse) ProtoMessage() {}

func (x *DeleteImageCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteImageCacheResponse.ProtoReflect.Descriptor instead.
func (*DeleteImageCacheResponse) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteImageCacheResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DescribeImageCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageCacheId   string                `protobuf:"bytes,1,opt,name=imageCacheId,proto3" form:"imageCacheId" json:"imageCacheId,omitempty"`
	ImageCacheName string                `protobuf:"bytes,2,opt,name=imageCacheName,proto3" form:"imageCacheName" json:"imageCacheName,omitempty"`
	Images         []string              `protobuf:"bytes,3,rep,name=images,proto3" form:"images" json:"images,omitempty"`
	Tags           []*containergroup.Tag `protobuf:"bytes,4,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	Limit          int32                 `protobuf:"varint,5,opt,name=limit,proto3" form:"limit" json:"limit,omitempty"`
	NextToken      string                `protobuf:"bytes,6,opt,name=nextToken,proto3" form:"nextToken" json:"nextToken,omitempty"`
	RegionId       string                `protobuf:"bytes,7,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeImageCacheRequest) Reset() {
	*x = DescribeImageCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeImageCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeImageCacheRequest) ProtoMessage() {}

func (x *DescribeImageCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeImageCacheRequest.ProtoReflect.Descriptor instead.
func (*DescribeImageCacheRequest) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeImageCacheRequest) GetImageCacheId() string {
	if x != nil {
		return x.ImageCacheId
	}
	return ""
}

func (x *DescribeImageCacheRequest) GetImageCacheName() string {
	if x != nil {
		return x.ImageCacheName
	}
	return ""
}

func (x *DescribeImageCacheRequest) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *DescribeImageCacheRequest) GetTags() []*containergroup.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DescribeImageCacheRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribeImageCacheRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DescribeImageCacheRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeImageCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string        `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	ImageCaches []*ImageCache `protobuf:"bytes,2,rep,name=imageCaches,proto3" form:"imageCaches" json:"imageCaches,omitempty" query:"imageCaches"`
	Total       int32         `protobuf:"varint,3,opt,name=total,proto3" form:"total" json:"total,omitempty" query:"total"`
	NextToken   string        `protobuf:"bytes,4,opt,name=nextToken,proto3" form:"nextToken" json:"nextToken,omitempty" query:"nextToken"`
}

func (x *DescribeImageCacheResponse) Reset() {
	*x = DescribeImageCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeImageCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeImageCacheResponse) ProtoMessage() {}

func (x *DescribeImageCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeImageCacheResponse.ProtoReflect.Descriptor instead.
func (*DescribeImageCacheResponse) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeImageCacheResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DescribeImageCacheResponse) GetImageCaches() []*ImageCache {
	if x != nil {
		return x.ImageCaches
	}
	return nil
}

func (x *DescribeImageCacheResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeImageCacheResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

type ImageCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageCacheId    string                `protobuf:"bytes,1,opt,name=imageCacheId,proto3" form:"imageCacheId" json:"imageCacheId,omitempty" query:"imageCacheId"`
	ImageCacheName  string                `protobuf:"bytes,2,opt,name=imageCacheName,proto3" form:"imageCacheName" json:"imageCacheName,omitempty" query:"imageCacheName"`
	ImageCacheSize  int32                 `protobuf:"varint,3,opt,name=imageCacheSize,proto3" form:"imageCacheSize" json:"imageCacheSize,omitempty" query:"imageCacheSize"`
	Images          []string              `protobuf:"bytes,4,rep,name=images,proto3" form:"images" json:"images,omitempty" query:"images"`
	Status          string                `protobuf:"bytes,5,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`
	Process         string                `protobuf:"bytes,6,opt,name=process,proto3" form:"process" json:"process,omitempty" query:"process"`
	ResourceGroupId string                `protobuf:"bytes,7,opt,name=resourceGroupId,proto3" form:"resourceGroupId" json:"resourceGroupId,omitempty" query:"resourceGroupId"`
	CreationTime    string                `protobuf:"bytes,8,opt,name=creationTime,proto3" form:"creationTime" json:"creationTime,omitempty" query:"creationTime"`
	ExpireDateTime  string                `protobuf:"bytes,9,opt,name=expireDateTime,proto3" form:"expireDateTime" json:"expireDateTime,omitempty" query:"expireDateTime"`
	LastMatchedTime string                `protobuf:"bytes,10,opt,name=lastMatchedTime,proto3" form:"lastMatchedTime" json:"lastMatchedTime,omitempty" query:"lastMatchedTime"`
	Tags            []*containergroup.Tag `protobuf:"bytes,11,rep,name=tags,proto3" form:"tags" json:"tags,omitempty" query:"tags"`
	Events          []*ImageCacheEvent    `protobuf:"bytes,12,rep,name=events,proto3" form:"events" json:"events,omitempty" query:"events"`
	AzName          string                `protobuf:"bytes,13,opt,name=azName,proto3" form:"azName" json:"azName,omitempty" query:"azName"`
}

func (x *ImageCache) Reset() {
	*x = ImageCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCache) ProtoMessage() {}

func (x *ImageCache) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageCache.ProtoReflect.Descriptor instead.
func (*ImageCache) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{8}
}

func (x *ImageCache) GetImageCacheId() string {
	if x != nil {
		return x.ImageCacheId
	}
	return ""
}

func (x *ImageCache) GetImageCacheName() string {
	if x != nil {
		return x.ImageCacheName
	}
	return ""
}

func (x *ImageCache) GetImageCacheSize() int32 {
	if x != nil {
		return x.ImageCacheSize
	}
	return 0
}

func (x *ImageCache) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ImageCache) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ImageCache) GetProcess() string {
	if x != nil {
		return x.Process
	}
	return ""
}

func (x *ImageCache) GetResourceGroupId() string {
	if x != nil {
		return x.ResourceGroupId
	}
	return ""
}

func (x *ImageCache) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *ImageCache) GetExpireDateTime() string {
	if x != nil {
		return x.ExpireDateTime
	}
	return ""
}

func (x *ImageCache) GetLastMatchedTime() string {
	if x != nil {
		return x.LastMatchedTime
	}
	return ""
}

func (x *ImageCache) GetTags() []*containergroup.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ImageCache) GetEvents() []*ImageCacheEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ImageCache) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

type GetImageCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageCacheId string `protobuf:"bytes,1,opt,name=imageCacheId,proto3" json:"imageCacheId,omitempty" path:"imageCacheId"`
	RegionId     string `protobuf:"bytes,2,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *GetImageCacheRequest) Reset() {
	*x = GetImageCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageCacheRequest) ProtoMessage() {}

func (x *GetImageCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageCacheRequest.ProtoReflect.Descriptor instead.
func (*GetImageCacheRequest) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{9}
}

func (x *GetImageCacheRequest) GetImageCacheId() string {
	if x != nil {
		return x.ImageCacheId
	}
	return ""
}

func (x *GetImageCacheRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type GetImageCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       string                `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	ImageCacheId    string                `protobuf:"bytes,2,opt,name=imageCacheId,proto3" form:"imageCacheId" json:"imageCacheId,omitempty" query:"imageCacheId"`
	ImageCacheName  string                `protobuf:"bytes,3,opt,name=imageCacheName,proto3" form:"imageCacheName" json:"imageCacheName,omitempty" query:"imageCacheName"`
	ImageCacheSize  int32                 `protobuf:"varint,4,opt,name=imageCacheSize,proto3" form:"imageCacheSize" json:"imageCacheSize,omitempty" query:"imageCacheSize"`
	Images          []string              `protobuf:"bytes,5,rep,name=images,proto3" form:"images" json:"images,omitempty" query:"images"`
	Status          string                `protobuf:"bytes,6,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`
	Process         string                `protobuf:"bytes,7,opt,name=process,proto3" form:"process" json:"process,omitempty" query:"process"`
	ResourceGroupId string                `protobuf:"bytes,8,opt,name=resourceGroupId,proto3" form:"resourceGroupId" json:"resourceGroupId,omitempty" query:"resourceGroupId"`
	CreationTime    string                `protobuf:"bytes,9,opt,name=creationTime,proto3" form:"creationTime" json:"creationTime,omitempty" query:"creationTime"`
	ExpireDateTime  string                `protobuf:"bytes,10,opt,name=expireDateTime,proto3" form:"expireDateTime" json:"expireDateTime,omitempty" query:"expireDateTime"`
	LastMatchedTime string                `protobuf:"bytes,11,opt,name=lastMatchedTime,proto3" form:"lastMatchedTime" json:"lastMatchedTime,omitempty" query:"lastMatchedTime"`
	Tags            []*containergroup.Tag `protobuf:"bytes,12,rep,name=tags,proto3" form:"tags" json:"tags,omitempty" query:"tags"`
	Events          []*ImageCacheEvent    `protobuf:"bytes,13,rep,name=events,proto3" form:"events" json:"events,omitempty" query:"events"`
	AzName          string                `protobuf:"bytes,14,opt,name=azName,proto3" form:"azName" json:"azName,omitempty" query:"azName"`
}

func (x *GetImageCacheResponse) Reset() {
	*x = GetImageCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageCacheResponse) ProtoMessage() {}

func (x *GetImageCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageCacheResponse.ProtoReflect.Descriptor instead.
func (*GetImageCacheResponse) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{10}
}

func (x *GetImageCacheResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetImageCacheResponse) GetImageCacheId() string {
	if x != nil {
		return x.ImageCacheId
	}
	return ""
}

func (x *GetImageCacheResponse) GetImageCacheName() string {
	if x != nil {
		return x.ImageCacheName
	}
	return ""
}

func (x *GetImageCacheResponse) GetImageCacheSize() int32 {
	if x != nil {
		return x.ImageCacheSize
	}
	return 0
}

func (x *GetImageCacheResponse) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *GetImageCacheResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetImageCacheResponse) GetProcess() string {
	if x != nil {
		return x.Process
	}
	return ""
}

func (x *GetImageCacheResponse) GetResourceGroupId() string {
	if x != nil {
		return x.ResourceGroupId
	}
	return ""
}

func (x *GetImageCacheResponse) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *GetImageCacheResponse) GetExpireDateTime() string {
	if x != nil {
		return x.ExpireDateTime
	}
	return ""
}

func (x *GetImageCacheResponse) GetLastMatchedTime() string {
	if x != nil {
		return x.LastMatchedTime
	}
	return ""
}

func (x *GetImageCacheResponse) GetTags() []*containergroup.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetImageCacheResponse) GetEvents() []*ImageCacheEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetImageCacheResponse) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

type ImageCacheEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string `protobuf:"bytes,1,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	Message        string `protobuf:"bytes,2,opt,name=message,proto3" form:"message" json:"message,omitempty" query:"message"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Count          int32  `protobuf:"varint,4,opt,name=count,proto3" form:"count" json:"count,omitempty" query:"count"`
	FirstTimestamp string `protobuf:"bytes,5,opt,name=firstTimestamp,proto3" form:"firstTimestamp" json:"firstTimestamp,omitempty" query:"firstTimestamp"`
	LastTimestamp  string `protobuf:"bytes,6,opt,name=lastTimestamp,proto3" form:"lastTimestamp" json:"lastTimestamp,omitempty" query:"lastTimestamp"`
}

func (x *ImageCacheEvent) Reset() {
	*x = ImageCacheEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imagecache_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageCacheEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCacheEvent) ProtoMessage() {}

func (x *ImageCacheEvent) ProtoReflect() protoreflect.Message {
	mi := &file_imagecache_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageCacheEvent.ProtoReflect.Descriptor instead.
func (*ImageCacheEvent) Descriptor() ([]byte, []int) {
	return file_imagecache_proto_rawDescGZIP(), []int{11}
}

func (x *ImageCacheEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ImageCacheEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ImageCacheEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageCacheEvent) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ImageCacheEvent) GetFirstTimestamp() string {
	if x != nil {
		return x.FirstTimestamp
	}
	return ""
}

func (x *ImageCacheEvent) GetLastTimestamp() string {
	if x != nil {
		return x.LastTimestamp
	}
	return ""
}

var File_imagecache_proto protoreflect.FileDescriptor

var file_imagecache_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa3, 0x05, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52,
	0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x64, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xca, 0xbb, 0x18, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x12, 0xca, 0xbb, 0x18, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x0d, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb,
	0x18, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x7a,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x61,
	0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x03, 0x65, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x69, 0x70, 0x42, 0x07, 0xca, 0xbb, 0x18, 0x03, 0x65, 0x69, 0x70, 0x52,
	0x03, 0x65, 0x69, 0x70, 0x12, 0x78, 0x0a, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x1c, 0xca, 0xbb, 0x18, 0x18, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x28,
	0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22,
	0xa3, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xd2, 0xbb, 0x18, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x64, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x79, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xd2, 0xbb, 0x18, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x64, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xd3, 0x02, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0xca, 0xbb, 0x18, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x1a, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xd2, 0x03, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xd2, 0xbb, 0x18, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x49, 0x64, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xfb, 0x03,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0f,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0xde, 0x04, 0x0a, 0x11, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0xd2, 0xc1, 0x18, 0x27, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x8f,
	0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0xe2, 0xc1, 0x18, 0x36, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x2f, 0x7b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x7d,
	0x12, 0x89, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0xd2, 0xc1,
	0x18, 0x2a, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2b, 0xda, 0xc1, 0x18, 0x27, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x1a,
	0x25, 0x92, 0xce, 0x18, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x63, 0x69,
	0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x74,
	0x79, 0x75, 0x6e, 0x2e, 0x63, 0x6e, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65,
	0x63, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_imagecache_proto_rawDescOnce sync.Once
	file_imagecache_proto_rawDescData = file_imagecache_proto_rawDesc
)

func file_imagecache_proto_rawDescGZIP() []byte {
	file_imagecache_proto_rawDescOnce.Do(func() {
		file_imagecache_proto_rawDescData = protoimpl.X.CompressGZIP(file_imagecache_proto_rawDescData)
	})
	return file_imagecache_proto_rawDescData
}

var file_imagecache_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_imagecache_proto_goTypes = []interface{}{
	(*CreateImageCacheRequest)(nil),                // 0: proto.CreateImageCacheRequest
	(*CreateImageCacheResponse)(nil),               // 1: proto.CreateImageCacheResponse
	(*UpdateImageCacheRequest)(nil),                // 2: proto.UpdateImageCacheRequest
	(*UpdateImageCacheResponse)(nil),               // 3: proto.UpdateImageCacheResponse
	(*DeleteImageCacheRequest)(nil),                // 4: proto.DeleteImageCacheRequest
	(*DeleteImageCacheResponse)(nil),               // 5: proto.DeleteImageCacheResponse
	(*DescribeImageCacheRequest)(nil),              // 6: proto.DescribeImageCacheRequest
	(*DescribeImageCacheResponse)(nil),             // 7: proto.DescribeImageCacheResponse
	(*ImageCache)(nil),                             // 8: proto.ImageCache
	(*GetImageCacheRequest)(nil),                   // 9: proto.GetImageCacheRequest
	(*GetImageCacheResponse)(nil),                  // 10: proto.GetImageCacheResponse
	(*ImageCacheEvent)(nil),                        // 11: proto.ImageCacheEvent
	(*containergroup.Tag)(nil),                     // 12: proto.Tag
	(*containergroup.AzInfo)(nil),                  // 13: proto.AzInfo
	(*containergroup.Eip)(nil),                     // 14: proto.Eip
	(*containergroup.ImageRegistryCredential)(nil), // 15: proto.ImageRegistryCredential
}
var file_imagecache_proto_depIdxs = []int32{
	12, // 0: proto.CreateImageCacheRequest.tags:type_name -> proto.Tag
	13, // 1: proto.CreateImageCacheRequest.azInfo:type_name -> proto.AzInfo
	14, // 2: proto.CreateImageCacheRequest.eip:type_name -> proto.Eip
	15, // 3: proto.CreateImageCacheRequest.imageRegistryCredentials:type_name -> proto.ImageRegistryCredential
	12, // 4: proto.UpdateImageCacheRequest.tags:type_name -> proto.Tag
	12, // 5: proto.DescribeImageCacheRequest.tags:type_name -> proto.Tag
	8,  // 6: proto.DescribeImageCacheResponse.imageCaches:type_name -> proto.ImageCache
	12, // 7: proto.ImageCache.tags:type_name -> proto.Tag
	11, // 8: proto.ImageCache.events:type_name -> proto.ImageCacheEvent
	12, // 9: proto.GetImageCacheResponse.tags:type_name -> proto.Tag
	11, // 10: proto.GetImageCacheResponse.events:type_name -> proto.ImageCacheEvent
	0,  // 11: proto.ImageCacheService.CreateImageCache:input_type -> proto.CreateImageCacheRequest
	4,  // 12: proto.ImageCacheService.DeleteImageCache:input_type -> proto.DeleteImageCacheRequest
	6,  // 13: proto.ImageCacheService.DescribeImageCache:input_type -> proto.DescribeImageCacheRequest
	2,  // 14: proto.ImageCacheService.UpdateImageCache:input_type -> proto.UpdateImageCacheRequest
	1,  // 15: proto.ImageCacheService.CreateImageCache:output_type -> proto.CreateImageCacheResponse
	5,  // 16: proto.ImageCacheService.DeleteImageCache:output_type -> proto.DeleteImageCacheResponse
	7,  // 17: proto.ImageCacheService.DescribeImageCache:output_type -> proto.DescribeImageCacheResponse
	3,  // 18: proto.ImageCacheService.UpdateImageCache:output_type -> proto.UpdateImageCacheResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_imagecache_proto_init() }
func file_imagecache_proto_init() {
	if File_imagecache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imagecache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteImageCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteImageCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeImageCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeImageCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imagecache_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageCacheEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imagecache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imagecache_proto_goTypes,
		DependencyIndexes: file_imagecache_proto_depIdxs,
		MessageInfos:      file_imagecache_proto_msgTypes,
	}.Build()
	File_imagecache_proto = out.File
	file_imagecache_proto_rawDesc = nil
	file_imagecache_proto_goTypes = nil
	file_imagecache_proto_depIdxs = nil
}
