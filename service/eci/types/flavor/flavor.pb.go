// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: flavor.proto

package flavor

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DescribeAvailableResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AzName     string  `protobuf:"bytes,1,opt,name=azName,proto3" form:"azName" json:"azName,omitempty"`
	FlavorName string  `protobuf:"bytes,2,opt,name=flavorName,proto3" form:"flavorName" json:"flavorName,omitempty"`
	Cpu        float64 `protobuf:"fixed64,3,opt,name=cpu,proto3" form:"cpu" json:"cpu,omitempty"`
	Memory     float64 `protobuf:"fixed64,4,opt,name=memory,proto3" form:"memory" json:"memory,omitempty"`
	RegionId   string  `protobuf:"bytes,5,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeAvailableResourceRequest) Reset() {
	*x = DescribeAvailableResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAvailableResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAvailableResourceRequest) ProtoMessage() {}

func (x *DescribeAvailableResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flavor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAvailableResourceRequest.ProtoReflect.Descriptor instead.
func (*DescribeAvailableResourceRequest) Descriptor() ([]byte, []int) {
	return file_flavor_proto_rawDescGZIP(), []int{0}
}

func (x *DescribeAvailableResourceRequest) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *DescribeAvailableResourceRequest) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *DescribeAvailableResourceRequest) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *DescribeAvailableResourceRequest) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *DescribeAvailableResourceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeAvailableResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string    `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	Flavors   []*Flavor `protobuf:"bytes,2,rep,name=flavors,proto3" form:"flavors" json:"flavors,omitempty" query:"flavors"`
}

func (x *DescribeAvailableResourceResponse) Reset() {
	*x = DescribeAvailableResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAvailableResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAvailableResourceResponse) ProtoMessage() {}

func (x *DescribeAvailableResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flavor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAvailableResourceResponse.ProtoReflect.Descriptor instead.
func (*DescribeAvailableResourceResponse) Descriptor() ([]byte, []int) {
	return file_flavor_proto_rawDescGZIP(), []int{1}
}

func (x *DescribeAvailableResourceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DescribeAvailableResourceResponse) GetFlavors() []*Flavor {
	if x != nil {
		return x.Flavors
	}
	return nil
}

type Flavor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlavorName    string   `protobuf:"bytes,1,opt,name=flavorName,proto3" form:"flavorName" json:"flavorName,omitempty" query:"flavorName"`
	FlavorType    string   `protobuf:"bytes,2,opt,name=flavorType,proto3" form:"flavorType" json:"flavorType,omitempty" query:"flavorType"`
	FlavorSeries  string   `protobuf:"bytes,3,opt,name=flavorSeries,proto3" form:"flavorSeries" json:"flavorSeries,omitempty" query:"flavorSeries"`
	Cpu           float64  `protobuf:"fixed64,4,opt,name=cpu,proto3" form:"cpu" json:"cpu,omitempty" query:"cpu"`
	Memory        float64  `protobuf:"fixed64,5,opt,name=memory,proto3" form:"memory" json:"memory,omitempty" query:"memory"`
	AzList        []string `protobuf:"bytes,6,rep,name=azList,proto3" form:"azList" json:"azList,omitempty" query:"azList"`
	Gpu           float64  `protobuf:"fixed64,7,opt,name=gpu,proto3" form:"gpu" json:"gpu,omitempty" query:"gpu"`
	GpuType       string   `protobuf:"bytes,8,opt,name=gpuType,proto3" form:"gpuType" json:"gpuType,omitempty" query:"gpuType"`
	Pps           int32    `protobuf:"varint,9,opt,name=pps,proto3" form:"pps" json:"pps,omitempty" query:"pps"`
	BaseBandwidth float64  `protobuf:"fixed64,10,opt,name=baseBandwidth,proto3" form:"baseBandwidth" json:"baseBandwidth,omitempty" query:"baseBandwidth"`
	Bandwidth     float64  `protobuf:"fixed64,11,opt,name=bandwidth,proto3" form:"bandwidth" json:"bandwidth,omitempty" query:"bandwidth"`
	StockStatus   string   `protobuf:"bytes,12,opt,name=stockStatus,proto3" form:"stockStatus" json:"stockStatus,omitempty" query:"stockStatus"`
}

func (x *Flavor) Reset() {
	*x = Flavor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flavor) ProtoMessage() {}

func (x *Flavor) ProtoReflect() protoreflect.Message {
	mi := &file_flavor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flavor.ProtoReflect.Descriptor instead.
func (*Flavor) Descriptor() ([]byte, []int) {
	return file_flavor_proto_rawDescGZIP(), []int{2}
}

func (x *Flavor) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *Flavor) GetFlavorType() string {
	if x != nil {
		return x.FlavorType
	}
	return ""
}

func (x *Flavor) GetFlavorSeries() string {
	if x != nil {
		return x.FlavorSeries
	}
	return ""
}

func (x *Flavor) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Flavor) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Flavor) GetAzList() []string {
	if x != nil {
		return x.AzList
	}
	return nil
}

func (x *Flavor) GetGpu() float64 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *Flavor) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *Flavor) GetPps() int32 {
	if x != nil {
		return x.Pps
	}
	return 0
}

func (x *Flavor) GetBaseBandwidth() float64 {
	if x != nil {
		return x.BaseBandwidth
	}
	return 0
}

func (x *Flavor) GetBandwidth() float64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *Flavor) GetStockStatus() string {
	if x != nil {
		return x.StockStatus
	}
	return ""
}

var File_flavor_proto protoreflect.FileDescriptor

var file_flavor_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdf, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca,
	0xbb, 0x18, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x07, 0xca, 0xbb, 0x18, 0x03, 0x63, 0x70, 0x75, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x22, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x6a, 0x0a, 0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x22, 0xd2,
	0x02, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x7a, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x7a, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x67, 0x70,
	0x75, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x70, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0xdd, 0x01, 0x0a, 0x0d, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0xd2, 0xc1, 0x18, 0x30, 0x2f, 0x65, 0x63, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x25, 0x92, 0xce,
	0x18, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x63, 0x69, 0x2d, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x74, 0x79, 0x75, 0x6e,
	0x2e, 0x63, 0x6e, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x64, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x63, 0x69, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flavor_proto_rawDescOnce sync.Once
	file_flavor_proto_rawDescData = file_flavor_proto_rawDesc
)

func file_flavor_proto_rawDescGZIP() []byte {
	file_flavor_proto_rawDescOnce.Do(func() {
		file_flavor_proto_rawDescData = protoimpl.X.CompressGZIP(file_flavor_proto_rawDescData)
	})
	return file_flavor_proto_rawDescData
}

var file_flavor_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_flavor_proto_goTypes = []interface{}{
	(*DescribeAvailableResourceRequest)(nil),  // 0: proto.DescribeAvailableResourceRequest
	(*DescribeAvailableResourceResponse)(nil), // 1: proto.DescribeAvailableResourceResponse
	(*Flavor)(nil), // 2: proto.Flavor
}
var file_flavor_proto_depIdxs = []int32{
	2, // 0: proto.DescribeAvailableResourceResponse.flavors:type_name -> proto.Flavor
	0, // 1: proto.FlavorService.DescribeAvailableResource:input_type -> proto.DescribeAvailableResourceRequest
	1, // 2: proto.FlavorService.DescribeAvailableResource:output_type -> proto.DescribeAvailableResourceResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_flavor_proto_init() }
func file_flavor_proto_init() {
	if File_flavor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flavor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAvailableResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAvailableResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flavor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flavor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flavor_proto_goTypes,
		DependencyIndexes: file_flavor_proto_depIdxs,
		MessageInfos:      file_flavor_proto_msgTypes,
	}.Build()
	File_flavor_proto = out.File
	file_flavor_proto_rawDesc = nil
	file_flavor_proto_goTypes = nil
	file_flavor_proto_depIdxs = nil
}
