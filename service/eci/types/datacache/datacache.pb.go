// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: datacache.proto

package datacache

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	containergroup "github.com/telecom-cloud/telecomcloud-sdk-go/service/eci/types/containergroup"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateDataCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientToken     string                `protobuf:"bytes,1,opt,name=clientToken,proto3" form:"clientToken" json:"clientToken,omitempty"`
	SecurityGroupId string                `protobuf:"bytes,2,opt,name=securityGroupId,proto3" form:"securityGroupId" json:"securityGroupId,omitempty"`
	SubnetId        string                `protobuf:"bytes,3,opt,name=subnetId,proto3" form:"subnetId" json:"subnetId,omitempty"`
	Bucket          string                `protobuf:"bytes,4,opt,name=bucket,proto3" form:"bucket" json:"bucket,omitempty"`
	Path            string                `protobuf:"bytes,5,opt,name=path,proto3" form:"path" json:"path,omitempty"`
	DataCacheName   string                `protobuf:"bytes,6,opt,name=dataCacheName,proto3" form:"dataCacheName" json:"dataCacheName,omitempty"`
	Size            int32                 `protobuf:"varint,7,opt,name=size,proto3" form:"size" json:"size,omitempty"`
	RetentionDays   int32                 `protobuf:"varint,8,opt,name=retentionDays,proto3" form:"retentionDays" json:"retentionDays,omitempty"`
	Tags            []*containergroup.Tag `protobuf:"bytes,9,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	Eip             *containergroup.Eip   `protobuf:"bytes,10,opt,name=eip,proto3" form:"eip" json:"eip,omitempty"`
	DataSource      *DataSource           `protobuf:"bytes,11,opt,name=dataSource,proto3" form:"dataSource" json:"dataSource,omitempty"`
	AzName          string                `protobuf:"bytes,12,opt,name=azName,proto3" form:"azName" json:"azName,omitempty"`
	VpcId           string                `protobuf:"bytes,13,opt,name=vpcId,proto3" form:"vpcId" json:"vpcId,omitempty"`
	RegionId        string                `protobuf:"bytes,14,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *CreateDataCacheRequest) Reset() {
	*x = CreateDataCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataCacheRequest) ProtoMessage() {}

func (x *CreateDataCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataCacheRequest.ProtoReflect.Descriptor instead.
func (*CreateDataCacheRequest) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDataCacheRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

func (x *CreateDataCacheRequest) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *CreateDataCacheRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *CreateDataCacheRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *CreateDataCacheRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateDataCacheRequest) GetDataCacheName() string {
	if x != nil {
		return x.DataCacheName
	}
	return ""
}

func (x *CreateDataCacheRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateDataCacheRequest) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *CreateDataCacheRequest) GetTags() []*containergroup.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateDataCacheRequest) GetEip() *containergroup.Eip {
	if x != nil {
		return x.Eip
	}
	return nil
}

func (x *CreateDataCacheRequest) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *CreateDataCacheRequest) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *CreateDataCacheRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *CreateDataCacheRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type CreateDataCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	DataCacheId string `protobuf:"bytes,2,opt,name=dataCacheId,proto3" form:"dataCacheId" json:"dataCacheId,omitempty" query:"dataCacheId"`
}

func (x *CreateDataCacheResponse) Reset() {
	*x = CreateDataCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataCacheResponse) ProtoMessage() {}

func (x *CreateDataCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataCacheResponse.ProtoReflect.Descriptor instead.
func (*CreateDataCacheResponse) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDataCacheResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateDataCacheResponse) GetDataCacheId() string {
	if x != nil {
		return x.DataCacheId
	}
	return ""
}

type DescribeDataCachesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCacheIds []string              `protobuf:"bytes,1,rep,name=dataCacheIds,proto3" form:"dataCacheIds" json:"dataCacheIds,omitempty"`
	Bucket       string                `protobuf:"bytes,2,opt,name=bucket,proto3" form:"bucket" json:"bucket,omitempty"`
	Path         string                `protobuf:"bytes,3,opt,name=path,proto3" form:"path" json:"path,omitempty"`
	Tags         []*containergroup.Tag `protobuf:"bytes,4,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	Limit        int32                 `protobuf:"varint,5,opt,name=limit,proto3" form:"limit" json:"limit,omitempty"`
	NextToken    string                `protobuf:"bytes,6,opt,name=nextToken,proto3" form:"nextToken" json:"nextToken,omitempty"`
	AzName       string                `protobuf:"bytes,7,opt,name=azName,proto3" form:"azName" json:"azName,omitempty"`
	Page         int32                 `protobuf:"varint,8,opt,name=page,proto3" form:"page" json:"page,omitempty"`
	RegionId     string                `protobuf:"bytes,9,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DescribeDataCachesRequest) Reset() {
	*x = DescribeDataCachesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDataCachesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDataCachesRequest) ProtoMessage() {}

func (x *DescribeDataCachesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDataCachesRequest.ProtoReflect.Descriptor instead.
func (*DescribeDataCachesRequest) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{2}
}

func (x *DescribeDataCachesRequest) GetDataCacheIds() []string {
	if x != nil {
		return x.DataCacheIds
	}
	return nil
}

func (x *DescribeDataCachesRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *DescribeDataCachesRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DescribeDataCachesRequest) GetTags() []*containergroup.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DescribeDataCachesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribeDataCachesRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DescribeDataCachesRequest) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *DescribeDataCachesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeDataCachesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DescribeDataCachesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string       `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	NextToken  string       `protobuf:"bytes,2,opt,name=nextToken,proto3" form:"nextToken" json:"nextToken,omitempty" query:"nextToken"`
	TotalCount int32        `protobuf:"varint,3,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
	DataCaches []*DataCache `protobuf:"bytes,4,rep,name=dataCaches,proto3" form:"dataCaches" json:"dataCaches,omitempty" query:"dataCaches"`
}

func (x *DescribeDataCachesResponse) Reset() {
	*x = DescribeDataCachesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDataCachesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDataCachesResponse) ProtoMessage() {}

func (x *DescribeDataCachesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDataCachesResponse.ProtoReflect.Descriptor instead.
func (*DescribeDataCachesResponse) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeDataCachesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DescribeDataCachesResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DescribeDataCachesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DescribeDataCachesResponse) GetDataCaches() []*DataCache {
	if x != nil {
		return x.DataCaches
	}
	return nil
}

type DataCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCacheId      string                `protobuf:"bytes,1,opt,name=dataCacheId,proto3" form:"dataCacheId" json:"dataCacheId,omitempty"`
	SecurityGroupId  string                `protobuf:"bytes,2,opt,name=securityGroupId,proto3" form:"securityGroupId" json:"securityGroupId,omitempty"`
	SubnetId         string                `protobuf:"bytes,3,opt,name=subnetId,proto3" form:"subnetId" json:"subnetId,omitempty"`
	Bucket           string                `protobuf:"bytes,4,opt,name=bucket,proto3" form:"bucket" json:"bucket,omitempty"`
	Path             string                `protobuf:"bytes,5,opt,name=path,proto3" form:"path" json:"path,omitempty"`
	DataCacheName    string                `protobuf:"bytes,6,opt,name=dataCacheName,proto3" form:"dataCacheName" json:"dataCacheName,omitempty"`
	Size             int32                 `protobuf:"varint,7,opt,name=size,proto3" form:"size" json:"size,omitempty"`
	RetentionDays    int32                 `protobuf:"varint,8,opt,name=retentionDays,proto3" form:"retentionDays" json:"retentionDays,omitempty"`
	Tags             []*containergroup.Tag `protobuf:"bytes,9,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	Eip              *containergroup.Eip   `protobuf:"bytes,10,opt,name=eip,proto3" form:"eip" json:"eip,omitempty"`
	DataSource       *DataSource           `protobuf:"bytes,11,opt,name=dataSource,proto3" form:"dataSource" json:"dataSource,omitempty"`
	Events           []*DataCacheEvent     `protobuf:"bytes,12,rep,name=events,proto3" form:"events" json:"events,omitempty"`
	Status           string                `protobuf:"bytes,13,opt,name=status,proto3" form:"status" json:"status,omitempty"`
	Progress         string                `protobuf:"bytes,14,opt,name=progress,proto3" form:"progress" json:"progress,omitempty"`
	ContainerGroupId string                `protobuf:"bytes,15,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	SnapshotId       string                `protobuf:"bytes,16,opt,name=snapshotId,proto3" form:"snapshotId" json:"snapshotId,omitempty"`
	LastMatchedTime  string                `protobuf:"bytes,17,opt,name=lastMatchedTime,proto3" form:"lastMatchedTime" json:"lastMatchedTime,omitempty"`
	ExpireDateTime   string                `protobuf:"bytes,18,opt,name=expireDateTime,proto3" form:"expireDateTime" json:"expireDateTime,omitempty"`
	CreationTime     string                `protobuf:"bytes,19,opt,name=creationTime,proto3" form:"creationTime" json:"creationTime,omitempty"`
	AzName           string                `protobuf:"bytes,20,opt,name=azName,proto3" form:"azName" json:"azName,omitempty"`
	VpcId            string                `protobuf:"bytes,21,opt,name=vpcId,proto3" form:"vpcId" json:"vpcId,omitempty"`
}

func (x *DataCache) Reset() {
	*x = DataCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCache) ProtoMessage() {}

func (x *DataCache) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCache.ProtoReflect.Descriptor instead.
func (*DataCache) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{4}
}

func (x *DataCache) GetDataCacheId() string {
	if x != nil {
		return x.DataCacheId
	}
	return ""
}

func (x *DataCache) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *DataCache) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *DataCache) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *DataCache) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DataCache) GetDataCacheName() string {
	if x != nil {
		return x.DataCacheName
	}
	return ""
}

func (x *DataCache) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DataCache) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *DataCache) GetTags() []*containergroup.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DataCache) GetEip() *containergroup.Eip {
	if x != nil {
		return x.Eip
	}
	return nil
}

func (x *DataCache) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *DataCache) GetEvents() []*DataCacheEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *DataCache) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DataCache) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *DataCache) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *DataCache) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *DataCache) GetLastMatchedTime() string {
	if x != nil {
		return x.LastMatchedTime
	}
	return ""
}

func (x *DataCache) GetExpireDateTime() string {
	if x != nil {
		return x.ExpireDateTime
	}
	return ""
}

func (x *DataCache) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *DataCache) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *DataCache) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

type UpdateDataCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCacheId string                `protobuf:"bytes,1,opt,name=dataCacheId,proto3" json:"dataCacheId,omitempty" path:"dataCacheId"`
	Tags        []*containergroup.Tag `protobuf:"bytes,2,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	RegionId    string                `protobuf:"bytes,3,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *UpdateDataCacheRequest) Reset() {
	*x = UpdateDataCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataCacheRequest) ProtoMessage() {}

func (x *UpdateDataCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataCacheRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataCacheRequest) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDataCacheRequest) GetDataCacheId() string {
	if x != nil {
		return x.DataCacheId
	}
	return ""
}

func (x *UpdateDataCacheRequest) GetTags() []*containergroup.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateDataCacheRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type UpdateDataCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *UpdateDataCacheResponse) Reset() {
	*x = UpdateDataCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataCacheResponse) ProtoMessage() {}

func (x *UpdateDataCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataCacheResponse.ProtoReflect.Descriptor instead.
func (*UpdateDataCacheResponse) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDataCacheResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DataCacheEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string `protobuf:"bytes,1,opt,name=type,proto3" form:"type" json:"type,omitempty" query:"type"`
	Message        string `protobuf:"bytes,2,opt,name=message,proto3" form:"message" json:"message,omitempty" query:"message"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	Count          int32  `protobuf:"varint,4,opt,name=count,proto3" form:"count" json:"count,omitempty" query:"count"`
	FirstTimestamp string `protobuf:"bytes,5,opt,name=firstTimestamp,proto3" form:"firstTimestamp" json:"firstTimestamp,omitempty" query:"firstTimestamp"`
	LastTimestamp  string `protobuf:"bytes,6,opt,name=lastTimestamp,proto3" form:"lastTimestamp" json:"lastTimestamp,omitempty" query:"lastTimestamp"`
}

func (x *DataCacheEvent) Reset() {
	*x = DataCacheEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCacheEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCacheEvent) ProtoMessage() {}

func (x *DataCacheEvent) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCacheEvent.ProtoReflect.Descriptor instead.
func (*DataCacheEvent) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{7}
}

func (x *DataCacheEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataCacheEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DataCacheEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataCacheEvent) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DataCacheEvent) GetFirstTimestamp() string {
	if x != nil {
		return x.FirstTimestamp
	}
	return ""
}

func (x *DataCacheEvent) GetLastTimestamp() string {
	if x != nil {
		return x.LastTimestamp
	}
	return ""
}

type CopyDataCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCacheId   string `protobuf:"bytes,1,opt,name=dataCacheId,proto3" json:"dataCacheId,omitempty" path:"dataCacheId"`
	AzName        string `protobuf:"bytes,2,opt,name=azName,proto3" json:"azName,omitempty" path:"azName"`
	DataCacheName string `protobuf:"bytes,3,opt,name=dataCacheName,proto3" form:"dataCacheName" json:"dataCacheName,omitempty"`
	RegionId      string `protobuf:"bytes,4,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *CopyDataCacheRequest) Reset() {
	*x = CopyDataCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyDataCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyDataCacheRequest) ProtoMessage() {}

func (x *CopyDataCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyDataCacheRequest.ProtoReflect.Descriptor instead.
func (*CopyDataCacheRequest) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{8}
}

func (x *CopyDataCacheRequest) GetDataCacheId() string {
	if x != nil {
		return x.DataCacheId
	}
	return ""
}

func (x *CopyDataCacheRequest) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *CopyDataCacheRequest) GetDataCacheName() string {
	if x != nil {
		return x.DataCacheName
	}
	return ""
}

func (x *CopyDataCacheRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type CopyDataCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
	DataCacheId string `protobuf:"bytes,2,opt,name=dataCacheId,proto3" form:"dataCacheId" json:"dataCacheId,omitempty" query:"dataCacheId"`
}

func (x *CopyDataCacheResponse) Reset() {
	*x = CopyDataCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyDataCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyDataCacheResponse) ProtoMessage() {}

func (x *CopyDataCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyDataCacheResponse.ProtoReflect.Descriptor instead.
func (*CopyDataCacheResponse) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{9}
}

func (x *CopyDataCacheResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CopyDataCacheResponse) GetDataCacheId() string {
	if x != nil {
		return x.DataCacheId
	}
	return ""
}

type DeleteDataCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCacheId string `protobuf:"bytes,1,opt,name=dataCacheId,proto3" json:"dataCacheId,omitempty" path:"dataCacheId"`
	RegionId    string `protobuf:"bytes,2,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *DeleteDataCacheRequest) Reset() {
	*x = DeleteDataCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataCacheRequest) ProtoMessage() {}

func (x *DeleteDataCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataCacheRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataCacheRequest) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteDataCacheRequest) GetDataCacheId() string {
	if x != nil {
		return x.DataCacheId
	}
	return ""
}

func (x *DeleteDataCacheRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DeleteDataCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty" query:"requestId"`
}

func (x *DeleteDataCacheResponse) Reset() {
	*x = DeleteDataCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataCacheResponse) ProtoMessage() {}

func (x *DeleteDataCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataCacheResponse.ProtoReflect.Descriptor instead.
func (*DeleteDataCacheResponse) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDataCacheResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type Git struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string `protobuf:"bytes,1,opt,name=url,proto3" form:"url" json:"url,omitempty" query:"url"`
	Branch      string `protobuf:"bytes,2,opt,name=branch,proto3" form:"branch" json:"branch,omitempty" query:"branch"`
	AccessToken string `protobuf:"bytes,3,opt,name=accessToken,proto3" form:"accessToken" json:"accessToken,omitempty" query:"accessToken"`
}

func (x *Git) Reset() {
	*x = Git{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Git) ProtoMessage() {}

func (x *Git) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Git.ProtoReflect.Descriptor instead.
func (*Git) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{12}
}

func (x *Git) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Git) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Git) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceType   string            `protobuf:"bytes,1,opt,name=dataSourceType,proto3" form:"dataSourceType" json:"dataSourceType,omitempty" query:"dataSourceType"`
	DatasourceOption *DataSourceOption `protobuf:"bytes,2,opt,name=datasourceOption,proto3" form:"datasourceOption" json:"datasourceOption,omitempty" query:"datasourceOption"`
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{13}
}

func (x *DataSource) GetDataSourceType() string {
	if x != nil {
		return x.DataSourceType
	}
	return ""
}

func (x *DataSource) GetDatasourceOption() *DataSourceOption {
	if x != nil {
		return x.DatasourceOption
	}
	return nil
}

type DataSourceOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Git *Git `protobuf:"bytes,1,opt,name=git,proto3" form:"git" json:"git,omitempty" query:"git"`
}

func (x *DataSourceOption) Reset() {
	*x = DataSourceOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceOption) ProtoMessage() {}

func (x *DataSourceOption) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceOption.ProtoReflect.Descriptor instead.
func (*DataSourceOption) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{14}
}

func (x *DataSourceOption) GetGit() *Git {
	if x != nil {
		return x.Git
	}
	return nil
}

type GetDataCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCacheId string `protobuf:"bytes,1,opt,name=dataCacheId,proto3" json:"dataCacheId,omitempty" path:"dataCacheId"`
	RegionId    string `protobuf:"bytes,2,opt,name=regionId,proto3" header:"regionId" json:"regionId,omitempty"`
}

func (x *GetDataCacheRequest) Reset() {
	*x = GetDataCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataCacheRequest) ProtoMessage() {}

func (x *GetDataCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataCacheRequest.ProtoReflect.Descriptor instead.
func (*GetDataCacheRequest) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{15}
}

func (x *GetDataCacheRequest) GetDataCacheId() string {
	if x != nil {
		return x.DataCacheId
	}
	return ""
}

func (x *GetDataCacheRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type GetDataCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCacheId      string                `protobuf:"bytes,1,opt,name=dataCacheId,proto3" form:"dataCacheId" json:"dataCacheId,omitempty"`
	SecurityGroupId  string                `protobuf:"bytes,2,opt,name=securityGroupId,proto3" form:"securityGroupId" json:"securityGroupId,omitempty"`
	SubnetId         string                `protobuf:"bytes,3,opt,name=subnetId,proto3" form:"subnetId" json:"subnetId,omitempty"`
	Bucket           string                `protobuf:"bytes,4,opt,name=bucket,proto3" form:"bucket" json:"bucket,omitempty"`
	Path             string                `protobuf:"bytes,5,opt,name=path,proto3" form:"path" json:"path,omitempty"`
	DataCacheName    string                `protobuf:"bytes,6,opt,name=dataCacheName,proto3" form:"dataCacheName" json:"dataCacheName,omitempty"`
	Size             int32                 `protobuf:"varint,7,opt,name=size,proto3" form:"size" json:"size,omitempty"`
	RetentionDays    int32                 `protobuf:"varint,8,opt,name=retentionDays,proto3" form:"retentionDays" json:"retentionDays,omitempty"`
	Tags             []*containergroup.Tag `protobuf:"bytes,9,rep,name=tags,proto3" form:"tags" json:"tags,omitempty"`
	Eip              *containergroup.Eip   `protobuf:"bytes,10,opt,name=eip,proto3" form:"eip" json:"eip,omitempty"`
	DataSource       *DataSource           `protobuf:"bytes,11,opt,name=dataSource,proto3" form:"dataSource" json:"dataSource,omitempty"`
	Events           []*DataCacheEvent     `protobuf:"bytes,12,rep,name=events,proto3" form:"events" json:"events,omitempty"`
	Status           string                `protobuf:"bytes,13,opt,name=status,proto3" form:"status" json:"status,omitempty"`
	Progress         string                `protobuf:"bytes,14,opt,name=progress,proto3" form:"progress" json:"progress,omitempty"`
	ContainerGroupId string                `protobuf:"bytes,15,opt,name=containerGroupId,proto3" form:"containerGroupId" json:"containerGroupId,omitempty"`
	SnapshotId       string                `protobuf:"bytes,16,opt,name=snapshotId,proto3" form:"snapshotId" json:"snapshotId,omitempty"`
	LastMatchedTime  string                `protobuf:"bytes,17,opt,name=lastMatchedTime,proto3" form:"lastMatchedTime" json:"lastMatchedTime,omitempty"`
	ExpireDateTime   string                `protobuf:"bytes,18,opt,name=expireDateTime,proto3" form:"expireDateTime" json:"expireDateTime,omitempty"`
	CreationTime     string                `protobuf:"bytes,19,opt,name=creationTime,proto3" form:"creationTime" json:"creationTime,omitempty"`
	AzName           string                `protobuf:"bytes,20,opt,name=azName,proto3" form:"azName" json:"azName,omitempty"`
	VpcId            string                `protobuf:"bytes,21,opt,name=vpcId,proto3" form:"vpcId" json:"vpcId,omitempty"`
	RequestId        string                `protobuf:"bytes,22,opt,name=requestId,proto3" form:"requestId" json:"requestId,omitempty"`
}

func (x *GetDataCacheResponse) Reset() {
	*x = GetDataCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacache_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataCacheResponse) ProtoMessage() {}

func (x *GetDataCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datacache_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataCacheResponse.ProtoReflect.Descriptor instead.
func (*GetDataCacheResponse) Descriptor() ([]byte, []int) {
	return file_datacache_proto_rawDescGZIP(), []int{16}
}

func (x *GetDataCacheResponse) GetDataCacheId() string {
	if x != nil {
		return x.DataCacheId
	}
	return ""
}

func (x *GetDataCacheResponse) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *GetDataCacheResponse) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *GetDataCacheResponse) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GetDataCacheResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetDataCacheResponse) GetDataCacheName() string {
	if x != nil {
		return x.DataCacheName
	}
	return ""
}

func (x *GetDataCacheResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetDataCacheResponse) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *GetDataCacheResponse) GetTags() []*containergroup.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetDataCacheResponse) GetEip() *containergroup.Eip {
	if x != nil {
		return x.Eip
	}
	return nil
}

func (x *GetDataCacheResponse) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *GetDataCacheResponse) GetEvents() []*DataCacheEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetDataCacheResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDataCacheResponse) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *GetDataCacheResponse) GetContainerGroupId() string {
	if x != nil {
		return x.ContainerGroupId
	}
	return ""
}

func (x *GetDataCacheResponse) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *GetDataCacheResponse) GetLastMatchedTime() string {
	if x != nil {
		return x.LastMatchedTime
	}
	return ""
}

func (x *GetDataCacheResponse) GetExpireDateTime() string {
	if x != nil {
		return x.ExpireDateTime
	}
	return ""
}

func (x *GetDataCacheResponse) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *GetDataCacheResponse) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *GetDataCacheResponse) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *GetDataCacheResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_datacache_proto protoreflect.FileDescriptor

var file_datacache_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x89, 0x05, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61, 0x67, 0x73, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x65, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x69, 0x70, 0x42, 0x07, 0xca,
	0xbb, 0x18, 0x03, 0x65, 0x69, 0x70, 0x52, 0x03, 0x65, 0x69, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xca, 0xbb, 0x18, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x59, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x22, 0xf7, 0x02, 0x0a, 0x19, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xca, 0xbb,
	0x18, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x73, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb,
	0x18, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xca, 0xbb, 0x18, 0x04, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x28,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb,
	0x18, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x61, 0x7a, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x22,
	0xfe, 0x07, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x31, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x64, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xbb, 0x18,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x0d, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61, 0x67, 0x73, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x65, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x69, 0x70, 0x42, 0x07,
	0xca, 0xbb, 0x18, 0x03, 0x65, 0x69, 0x70, 0x52, 0x03, 0x65, 0x69, 0x70, 0x12, 0x41, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0xca, 0xbb, 0x18, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x0a,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xca, 0xbb, 0x18, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xca, 0xbb, 0x18,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x61,
	0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18,
	0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xca, 0xbb, 0x18, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64,
	0x22, 0x9f, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xd2, 0xbb, 0x18, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49,
	0x64, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb, 0x18, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x37, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x0e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xd2, 0xbb, 0x18, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x64, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xd2, 0xbb, 0x18, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x7a,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x15, 0x43, 0x6f, 0x70, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64,
	0x22, 0x75, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xd2, 0xbb, 0x18, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xba, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x51, 0x0a, 0x03, 0x47, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30,
	0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x03, 0x67, 0x69, 0x74,
	0x22, 0x72, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2, 0xbb,
	0x18, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xbb,
	0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb6, 0x08, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x64, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xbb, 0x18,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xca, 0xbb, 0x18, 0x0d, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x0d, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x08, 0xca, 0xbb, 0x18, 0x04, 0x74, 0x61, 0x67, 0x73, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x65, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x69, 0x70, 0x42, 0x07,
	0xca, 0xbb, 0x18, 0x03, 0x65, 0x69, 0x70, 0x52, 0x03, 0x65, 0x69, 0x70, 0x12, 0x41, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xca, 0xbb, 0x18, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0xca, 0xbb, 0x18, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x0a,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb, 0x18, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xca, 0xbb, 0x18, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xca, 0xbb, 0x18,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x61,
	0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xbb, 0x18,
	0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xca, 0xbb, 0x18, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x32, 0xc1, 0x06,
	0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x7b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xd2, 0xc1, 0x18, 0x25, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x87, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0xd2, 0xc1, 0x18,
	0x28, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xda, 0xc1, 0x18,
	0x25, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0xe2, 0xc1, 0x18, 0x32, 0x2f,
	0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x2f, 0x3a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49,
	0x64, 0x12, 0x73, 0x0a, 0x0d, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0xca,
	0xc1, 0x18, 0x23, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x38, 0xca, 0xc1, 0x18, 0x34, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x3a, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x1a, 0x25, 0x92, 0xce, 0x18, 0x21,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x63, 0x69, 0x2d, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x74, 0x79, 0x75, 0x6e, 0x2e, 0x63,
	0x6e, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x65,
	0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67,
	0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x63, 0x69, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x61, 0x63, 0x68, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_datacache_proto_rawDescOnce sync.Once
	file_datacache_proto_rawDescData = file_datacache_proto_rawDesc
)

func file_datacache_proto_rawDescGZIP() []byte {
	file_datacache_proto_rawDescOnce.Do(func() {
		file_datacache_proto_rawDescData = protoimpl.X.CompressGZIP(file_datacache_proto_rawDescData)
	})
	return file_datacache_proto_rawDescData
}

var file_datacache_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_datacache_proto_goTypes = []interface{}{
	(*CreateDataCacheRequest)(nil),     // 0: proto.CreateDataCacheRequest
	(*CreateDataCacheResponse)(nil),    // 1: proto.CreateDataCacheResponse
	(*DescribeDataCachesRequest)(nil),  // 2: proto.DescribeDataCachesRequest
	(*DescribeDataCachesResponse)(nil), // 3: proto.DescribeDataCachesResponse
	(*DataCache)(nil),                  // 4: proto.DataCache
	(*UpdateDataCacheRequest)(nil),     // 5: proto.UpdateDataCacheRequest
	(*UpdateDataCacheResponse)(nil),    // 6: proto.UpdateDataCacheResponse
	(*DataCacheEvent)(nil),             // 7: proto.DataCacheEvent
	(*CopyDataCacheRequest)(nil),       // 8: proto.CopyDataCacheRequest
	(*CopyDataCacheResponse)(nil),      // 9: proto.CopyDataCacheResponse
	(*DeleteDataCacheRequest)(nil),     // 10: proto.DeleteDataCacheRequest
	(*DeleteDataCacheResponse)(nil),    // 11: proto.DeleteDataCacheResponse
	(*Git)(nil),                        // 12: proto.Git
	(*DataSource)(nil),                 // 13: proto.DataSource
	(*DataSourceOption)(nil),           // 14: proto.DataSourceOption
	(*GetDataCacheRequest)(nil),        // 15: proto.GetDataCacheRequest
	(*GetDataCacheResponse)(nil),       // 16: proto.GetDataCacheResponse
	(*containergroup.Tag)(nil),         // 17: proto.Tag
	(*containergroup.Eip)(nil),         // 18: proto.Eip
}
var file_datacache_proto_depIdxs = []int32{
	17, // 0: proto.CreateDataCacheRequest.tags:type_name -> proto.Tag
	18, // 1: proto.CreateDataCacheRequest.eip:type_name -> proto.Eip
	13, // 2: proto.CreateDataCacheRequest.dataSource:type_name -> proto.DataSource
	17, // 3: proto.DescribeDataCachesRequest.tags:type_name -> proto.Tag
	4,  // 4: proto.DescribeDataCachesResponse.dataCaches:type_name -> proto.DataCache
	17, // 5: proto.DataCache.tags:type_name -> proto.Tag
	18, // 6: proto.DataCache.eip:type_name -> proto.Eip
	13, // 7: proto.DataCache.dataSource:type_name -> proto.DataSource
	7,  // 8: proto.DataCache.events:type_name -> proto.DataCacheEvent
	17, // 9: proto.UpdateDataCacheRequest.tags:type_name -> proto.Tag
	14, // 10: proto.DataSource.datasourceOption:type_name -> proto.DataSourceOption
	12, // 11: proto.DataSourceOption.git:type_name -> proto.Git
	17, // 12: proto.GetDataCacheResponse.tags:type_name -> proto.Tag
	18, // 13: proto.GetDataCacheResponse.eip:type_name -> proto.Eip
	13, // 14: proto.GetDataCacheResponse.dataSource:type_name -> proto.DataSource
	7,  // 15: proto.GetDataCacheResponse.events:type_name -> proto.DataCacheEvent
	0,  // 16: proto.DataCacheService.CreateDataCache:input_type -> proto.CreateDataCacheRequest
	2,  // 17: proto.DataCacheService.DescribeDataCaches:input_type -> proto.DescribeDataCachesRequest
	5,  // 18: proto.DataCacheService.UpdateDataCache:input_type -> proto.UpdateDataCacheRequest
	10, // 19: proto.DataCacheService.DeleteDataCache:input_type -> proto.DeleteDataCacheRequest
	8,  // 20: proto.DataCacheService.CopyDataCache:input_type -> proto.CopyDataCacheRequest
	15, // 21: proto.DataCacheService.GetDataCache:input_type -> proto.GetDataCacheRequest
	1,  // 22: proto.DataCacheService.CreateDataCache:output_type -> proto.CreateDataCacheResponse
	3,  // 23: proto.DataCacheService.DescribeDataCaches:output_type -> proto.DescribeDataCachesResponse
	6,  // 24: proto.DataCacheService.UpdateDataCache:output_type -> proto.UpdateDataCacheResponse
	11, // 25: proto.DataCacheService.DeleteDataCache:output_type -> proto.DeleteDataCacheResponse
	9,  // 26: proto.DataCacheService.CopyDataCache:output_type -> proto.CopyDataCacheResponse
	16, // 27: proto.DataCacheService.GetDataCache:output_type -> proto.GetDataCacheResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_datacache_proto_init() }
func file_datacache_proto_init() {
	if File_datacache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_datacache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDataCachesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDataCachesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCacheEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyDataCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyDataCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Git); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacache_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datacache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datacache_proto_goTypes,
		DependencyIndexes: file_datacache_proto_depIdxs,
		MessageInfos:      file_datacache_proto_msgTypes,
	}.Build()
	File_datacache_proto = out.File
	file_datacache_proto_rawDesc = nil
	file_datacache_proto_goTypes = nil
	file_datacache_proto_depIdxs = nil
}
