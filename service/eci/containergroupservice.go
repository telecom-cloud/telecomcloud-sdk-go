// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package eci

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	containergroup "github.com/telecom-cloud/telecomcloud-sdk-go/service/eci/types/containergroup"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type ContainerGroupClient interface {
	CreateContainerGroup(context context.Context, req *containergroup.CreateContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.CreateContainerGroupResponse, rawResponse *protocol.Response, err error)

	DeleteContainerGroup(context context.Context, req *containergroup.DeleteContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.DeleteContainerGroupResponse, rawResponse *protocol.Response, err error)

	UpdateContainerGroup(context context.Context, req *containergroup.UpdateContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.UpdateContainerGroupResponse, rawResponse *protocol.Response, err error)

	RestartContainerGroup(context context.Context, req *containergroup.RestartContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.RestartContainerGroupResponse, rawResponse *protocol.Response, err error)

	GetContainerGroup(context context.Context, req *containergroup.GetContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.GetContainerGroupResponse, rawResponse *protocol.Response, err error)

	DescribeContainerGroups(context context.Context, req *containergroup.DescribeContainerGroupsRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupsResponse, rawResponse *protocol.Response, err error)

	ListContainerGroup(context context.Context, req *containergroup.ListContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.ListContainerGroupResponse, rawResponse *protocol.Response, err error)

	Event(context context.Context, req *containergroup.DescribeContainerGroupEventRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupEventResponse, rawResponse *protocol.Response, err error)

	Status(context context.Context, req *containergroup.DescribeContainerGroupStatusRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupStatusResponse, rawResponse *protocol.Response, err error)

	Websocket(context context.Context, req *containergroup.ConsoleWebsocketRequest, reqOpt ...config.RequestOption) (resp *containergroup.ConsoleWebsocketResponse, rawResponse *protocol.Response, err error)

	ExecCommand(context context.Context, req *containergroup.ExecCommandRequest, reqOpt ...config.RequestOption) (resp *containergroup.ExecCommandResponse, rawResponse *protocol.Response, err error)

	ExecWebsocketUri(context context.Context, req *containergroup.ExecWebsocketRequest, reqOpt ...config.RequestOption) (resp *containergroup.ExecWebsocketResponse, rawResponse *protocol.Response, err error)

	Log(context context.Context, req *containergroup.DescribeContainerLogRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerLogResponse, rawResponse *protocol.Response, err error)

	Monitor(context context.Context, req *containergroup.DescribeContainerGroupMetricRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupMetricResponse, rawResponse *protocol.Response, err error)

	MultiMonitor(context context.Context, req *containergroup.DescribeMultiContainerGroupMetricRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeMultiContainerGroupMetricResponse, rawResponse *protocol.Response, err error)

	ResizeContainerGroupVolume(context context.Context, req *containergroup.ResizeContainerGroupVolumeRequest, reqOpt ...config.RequestOption) (resp *containergroup.ResizeContainerGroupVolumeResponse, rawResponse *protocol.Response, err error)

	CreateOpsTask(context context.Context, req *containergroup.CreateOpsTaskRequest, reqOpt ...config.RequestOption) (resp *containergroup.CreateOpsTaskResponse, rawResponse *protocol.Response, err error)

	DescribeOpsTask(context context.Context, req *containergroup.DescribeOpsTaskRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeOpsTaskResponse, rawResponse *protocol.Response, err error)
}

type containerGroupClient struct {
	client *HttpClient
}

func NewContainerGroupClient(hostUrl string, ops ...Option) (ContainerGroupClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &containerGroupClient{
		client: cli,
	}, nil
}

func (s *containerGroupClient) CreateContainerGroup(ctx context.Context, req *containergroup.CreateContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.CreateContainerGroupResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId":           req.GetRegionId(),
			"dy-tob-accountInfo": req.GetAccountInfo(),
			"tob-account-id":     req.GetAccountId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/containers/createContainerGroup")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) DeleteContainerGroup(ctx context.Context, req *containergroup.DeleteContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.DeleteContainerGroupResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"containerGroupId": req.GetContainerGroupId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/eci/api/v1/containers/deleteContainerGroup/:containerGroupId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) UpdateContainerGroup(ctx context.Context, req *containergroup.UpdateContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.UpdateContainerGroupResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"containerGroupId": req.GetContainerGroupId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/eci/api/v1/containers/updateContainerGroup/:containerGroupId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) RestartContainerGroup(ctx context.Context, req *containergroup.RestartContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.RestartContainerGroupResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"containerGroupId": req.GetContainerGroupId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/eci/api/v1/containers/restartContainerGroup/:containerGroupId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) GetContainerGroup(ctx context.Context, req *containergroup.GetContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.GetContainerGroupResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"containerGroupId": req.GetContainerGroupId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/containers/describeContainerGroup/:containerGroupId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) DescribeContainerGroups(ctx context.Context, req *containergroup.DescribeContainerGroupsRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupsResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/containers/describeContainerGroups")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) ListContainerGroup(ctx context.Context, req *containergroup.ListContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.ListContainerGroupResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"searchType":  req.GetSearchType(),
		"searchValue": req.GetSearchValue(),
		"pageNow":     req.GetPageNow(),
		"pageSize":    req.GetPageSize(),
		"epId":        req.GetEpId(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/containers/containerGroupList")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) Event(ctx context.Context, req *containergroup.DescribeContainerGroupEventRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupEventResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/containers/describeContainerGroupEvent")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) Status(ctx context.Context, req *containergroup.DescribeContainerGroupStatusRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupStatusResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/containers/describeContainerGroupStatus")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) Websocket(ctx context.Context, req *containergroup.ConsoleWebsocketRequest, reqOpt ...config.RequestOption) (resp *containergroup.ConsoleWebsocketResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"containerName": req.GetContainerName(),
		"command":       req.GetCommand(),
		"stdin":         req.GetStdin(),
		"tty":           req.GetTTY(),
		"sync":          req.GetSync(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"containerGroupId": req.GetContainerGroupId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/containers/createContainerWebsocket/:containerGroupId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) ExecCommand(ctx context.Context, req *containergroup.ExecCommandRequest, reqOpt ...config.RequestOption) (resp *containergroup.ExecCommandResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/containers/execContainerCommand")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) ExecWebsocketUri(ctx context.Context, req *containergroup.ExecWebsocketRequest, reqOpt ...config.RequestOption) (resp *containergroup.ExecWebsocketResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"token": req.GetToken(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/containers/execWebsocket")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) Log(ctx context.Context, req *containergroup.DescribeContainerLogRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerLogResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"containerName": req.GetContainerName(),
		"startTime":     req.GetStartTime(),
		"tail":          req.GetTail(),
		"previous":      req.GetPrevious(),
		"sinceSeconds":  req.GetSinceSeconds(),
		"limitBytes":    req.GetLimitBytes(),
		"timestamps":    req.GetTimestamps(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"containerGroupId": req.GetContainerGroupId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/logs/describeContainerLog/:containerGroupId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) Monitor(ctx context.Context, req *containergroup.DescribeContainerGroupMetricRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupMetricResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"startTime": req.GetStartTime(),
		"endTime":   req.GetEndTime(),
		"period":    req.GetPeriod(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		SetPathParams(map[string]string{
			"containerGroupId": req.GetContainerGroupId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/monitors/describeConsoleContainerGroupMetric/:containerGroupId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) MultiMonitor(ctx context.Context, req *containergroup.DescribeMultiContainerGroupMetricRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeMultiContainerGroupMetricResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	queryParams := map[string]interface{}{
		"containerGroupIds": req.GetContainerGroupIds(),
		"startTime":         req.GetStartTime(),
		"endTime":           req.GetEndTime(),
		"period":            req.GetPeriod(),
		"epId":              req.GetEpId(),
	}
	OptimizeQueryParams(queryParams)
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(queryParams).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/monitors/describeMultiConsoleContainerGroupMetric")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) ResizeContainerGroupVolume(ctx context.Context, req *containergroup.ResizeContainerGroupVolumeRequest, reqOpt ...config.RequestOption) (resp *containergroup.ResizeContainerGroupVolumeResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/containers/resizeContainerGroupVolume")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) CreateOpsTask(ctx context.Context, req *containergroup.CreateOpsTaskRequest, reqOpt ...config.RequestOption) (resp *containergroup.CreateOpsTaskResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/containers/createOpsTask")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *containerGroupClient) DescribeOpsTask(ctx context.Context, req *containergroup.DescribeOpsTaskRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeOpsTaskResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/containers/describeOpsTask")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultContainerGroupClient, _ = NewContainerGroupClient(baseDomain)

func ConfigDefaultContainerGroupClient(ops ...Option) (err error) {
	defaultContainerGroupClient, err = NewContainerGroupClient(baseDomain, ops...)
	return
}

func CreateContainerGroup(context context.Context, req *containergroup.CreateContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.CreateContainerGroupResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.CreateContainerGroup(context, req, reqOpt...)
}

func DeleteContainerGroup(context context.Context, req *containergroup.DeleteContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.DeleteContainerGroupResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.DeleteContainerGroup(context, req, reqOpt...)
}

func UpdateContainerGroup(context context.Context, req *containergroup.UpdateContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.UpdateContainerGroupResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.UpdateContainerGroup(context, req, reqOpt...)
}

func RestartContainerGroup(context context.Context, req *containergroup.RestartContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.RestartContainerGroupResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.RestartContainerGroup(context, req, reqOpt...)
}

func GetContainerGroup(context context.Context, req *containergroup.GetContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.GetContainerGroupResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.GetContainerGroup(context, req, reqOpt...)
}

func DescribeContainerGroups(context context.Context, req *containergroup.DescribeContainerGroupsRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupsResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.DescribeContainerGroups(context, req, reqOpt...)
}

func ListContainerGroup(context context.Context, req *containergroup.ListContainerGroupRequest, reqOpt ...config.RequestOption) (resp *containergroup.ListContainerGroupResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.ListContainerGroup(context, req, reqOpt...)
}

func Event(context context.Context, req *containergroup.DescribeContainerGroupEventRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupEventResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.Event(context, req, reqOpt...)
}

func Status(context context.Context, req *containergroup.DescribeContainerGroupStatusRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupStatusResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.Status(context, req, reqOpt...)
}

func Websocket(context context.Context, req *containergroup.ConsoleWebsocketRequest, reqOpt ...config.RequestOption) (resp *containergroup.ConsoleWebsocketResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.Websocket(context, req, reqOpt...)
}

func ExecCommand(context context.Context, req *containergroup.ExecCommandRequest, reqOpt ...config.RequestOption) (resp *containergroup.ExecCommandResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.ExecCommand(context, req, reqOpt...)
}

func ExecWebsocketUri(context context.Context, req *containergroup.ExecWebsocketRequest, reqOpt ...config.RequestOption) (resp *containergroup.ExecWebsocketResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.ExecWebsocketUri(context, req, reqOpt...)
}

func Log(context context.Context, req *containergroup.DescribeContainerLogRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerLogResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.Log(context, req, reqOpt...)
}

func Monitor(context context.Context, req *containergroup.DescribeContainerGroupMetricRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeContainerGroupMetricResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.Monitor(context, req, reqOpt...)
}

func MultiMonitor(context context.Context, req *containergroup.DescribeMultiContainerGroupMetricRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeMultiContainerGroupMetricResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.MultiMonitor(context, req, reqOpt...)
}

func ResizeContainerGroupVolume(context context.Context, req *containergroup.ResizeContainerGroupVolumeRequest, reqOpt ...config.RequestOption) (resp *containergroup.ResizeContainerGroupVolumeResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.ResizeContainerGroupVolume(context, req, reqOpt...)
}

func CreateOpsTask(context context.Context, req *containergroup.CreateOpsTaskRequest, reqOpt ...config.RequestOption) (resp *containergroup.CreateOpsTaskResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.CreateOpsTask(context, req, reqOpt...)
}

func DescribeOpsTask(context context.Context, req *containergroup.DescribeOpsTaskRequest, reqOpt ...config.RequestOption) (resp *containergroup.DescribeOpsTaskResponse, rawResponse *protocol.Response, err error) {
	return defaultContainerGroupClient.DescribeOpsTask(context, req, reqOpt...)
}
