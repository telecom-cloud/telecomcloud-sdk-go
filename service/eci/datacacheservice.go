// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package eci

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	datacache "github.com/telecom-cloud/telecomcloud-sdk-go/service/eci/types/datacache"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type DataCacheClient interface {
	CreateDataCache(context context.Context, req *datacache.CreateDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.CreateDataCacheResponse, rawResponse *protocol.Response, err error)

	DescribeDataCaches(context context.Context, req *datacache.DescribeDataCachesRequest, reqOpt ...config.RequestOption) (resp *datacache.DescribeDataCachesResponse, rawResponse *protocol.Response, err error)

	UpdateDataCache(context context.Context, req *datacache.UpdateDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.UpdateDataCacheResponse, rawResponse *protocol.Response, err error)

	DeleteDataCache(context context.Context, req *datacache.DeleteDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.DeleteDataCacheResponse, rawResponse *protocol.Response, err error)

	CopyDataCache(context context.Context, req *datacache.CopyDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.CopyDataCacheResponse, rawResponse *protocol.Response, err error)

	GetDataCache(context context.Context, req *datacache.GetDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.GetDataCacheResponse, rawResponse *protocol.Response, err error)
}

type dataCacheClient struct {
	client *HttpClient
}

func NewDataCacheClient(hostUrl string, ops ...Option) (DataCacheClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &dataCacheClient{
		client: cli,
	}, nil
}

func (s *dataCacheClient) CreateDataCache(ctx context.Context, req *datacache.CreateDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.CreateDataCacheResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/dataCache/createDataCache")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *dataCacheClient) DescribeDataCaches(ctx context.Context, req *datacache.DescribeDataCachesRequest, reqOpt ...config.RequestOption) (resp *datacache.DescribeDataCachesResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/dataCache/describeDataCaches")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *dataCacheClient) UpdateDataCache(ctx context.Context, req *datacache.UpdateDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.UpdateDataCacheResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"dataCacheId": req.GetDataCacheId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/eci/api/v1/dataCache/updateDataCache")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *dataCacheClient) DeleteDataCache(ctx context.Context, req *datacache.DeleteDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.DeleteDataCacheResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"dataCacheId": req.GetDataCacheId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/eci/api/v1/dataCache/deleteDataCache/:dataCacheId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *dataCacheClient) CopyDataCache(ctx context.Context, req *datacache.CopyDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.CopyDataCacheResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"dataCacheId": req.GetDataCacheId(),
			"azName":      req.GetAzName(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/dataCache/copyDataCache")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *dataCacheClient) GetDataCache(ctx context.Context, req *datacache.GetDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.GetDataCacheResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"dataCacheId": req.GetDataCacheId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/dataCache/describeDataCache/:dataCacheId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultDataCacheClient, _ = NewDataCacheClient(baseDomain)

func ConfigDefaultDataCacheClient(ops ...Option) (err error) {
	defaultDataCacheClient, err = NewDataCacheClient(baseDomain, ops...)
	return
}

func CreateDataCache(context context.Context, req *datacache.CreateDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.CreateDataCacheResponse, rawResponse *protocol.Response, err error) {
	return defaultDataCacheClient.CreateDataCache(context, req, reqOpt...)
}

func DescribeDataCaches(context context.Context, req *datacache.DescribeDataCachesRequest, reqOpt ...config.RequestOption) (resp *datacache.DescribeDataCachesResponse, rawResponse *protocol.Response, err error) {
	return defaultDataCacheClient.DescribeDataCaches(context, req, reqOpt...)
}

func UpdateDataCache(context context.Context, req *datacache.UpdateDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.UpdateDataCacheResponse, rawResponse *protocol.Response, err error) {
	return defaultDataCacheClient.UpdateDataCache(context, req, reqOpt...)
}

func DeleteDataCache(context context.Context, req *datacache.DeleteDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.DeleteDataCacheResponse, rawResponse *protocol.Response, err error) {
	return defaultDataCacheClient.DeleteDataCache(context, req, reqOpt...)
}

func CopyDataCache(context context.Context, req *datacache.CopyDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.CopyDataCacheResponse, rawResponse *protocol.Response, err error) {
	return defaultDataCacheClient.CopyDataCache(context, req, reqOpt...)
}

func GetDataCache(context context.Context, req *datacache.GetDataCacheRequest, reqOpt ...config.RequestOption) (resp *datacache.GetDataCacheResponse, rawResponse *protocol.Response, err error) {
	return defaultDataCacheClient.GetDataCache(context, req, reqOpt...)
}
