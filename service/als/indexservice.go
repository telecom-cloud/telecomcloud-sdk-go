// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package als

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/protocol"

	index "github.com/telecom-cloud/telecomcloud-sdk-go/service/als/types/index"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type IndexClient interface {
	CreateIndex(context context.Context, req *index.CreateIndexRequest, reqOpt ...config.RequestOption) (resp *index.CreateIndexResponse, rawResponse *protocol.Response, err error)
}

type indexClient struct {
	client *HttpClient
}

func NewIndexClient(hostUrl string, ops ...Option) (IndexClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &indexClient{
		client: cli,
	}, nil
}

func (s *indexClient) CreateIndex(ctx context.Context, req *index.CreateIndexRequest, reqOpt ...config.RequestOption) (resp *index.CreateIndexResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	openapiResp.ReturnObj = &resp

	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/v1/index/createIndex")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultIndexClient, _ = NewIndexClient(baseDomain)

func ConfigDefaultIndexClient(ops ...Option) (err error) {
	defaultIndexClient, err = NewIndexClient(baseDomain, ops...)
	return
}

func CreateIndex(context context.Context, req *index.CreateIndexRequest, reqOpt ...config.RequestOption) (resp *index.CreateIndexResponse, rawResponse *protocol.Response, err error) {
	return defaultIndexClient.CreateIndex(context, req, reqOpt...)
}
