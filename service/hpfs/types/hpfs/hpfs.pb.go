// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: hpfs.proto

package hpfs

import (
	_ "github.com/telecom-cloud/client-go/pkg/openapi/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListSfsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资源池 ID
	RegionID string `protobuf:"bytes,1,opt,name=regionID,proto3" json:"regionID,omitempty" query:"regionID"`
	// 并行文件状态。creating/available/unusable，不传为查询全部
	SfsStatus string `protobuf:"bytes,2,opt,name=sfsStatus,proto3" json:"sfsStatus,omitempty" query:"sfsStatus"`
	// 挂载协议。2 种，nfs/hpfs ，不传为查询全部
	SfsProtocol string `protobuf:"bytes,3,opt,name=sfsProtocol,proto3" json:"sfsProtocol,omitempty" query:"sfsProtocol"`
	// 多可用区下的可用区名字，不传为查询全部
	AzName string `protobuf:"bytes,4,opt,name=azName,proto3" json:"azName,omitempty" query:"azName"`
	// 资源所属企业项目 ID，不传为查询全部
	ProjectID string `protobuf:"bytes,5,opt,name=projectID,proto3" json:"projectID,omitempty" query:"projectID"`
	// 每页包含的元素个数范围(1-50)，默认值为10
	PageSize int32 `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty" query:"pageSize"`
	// 列表的分页页码，默认值为1
	PageNo int32 `protobuf:"varint,7,opt,name=pageNo,proto3" json:"pageNo,omitempty" query:"pageNo"`
}

func (x *ListSfsRequest) Reset() {
	*x = ListSfsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSfsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSfsRequest) ProtoMessage() {}

func (x *ListSfsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSfsRequest.ProtoReflect.Descriptor instead.
func (*ListSfsRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{0}
}

func (x *ListSfsRequest) GetRegionID() string {
	if x != nil {
		return x.RegionID
	}
	return ""
}

func (x *ListSfsRequest) GetSfsStatus() string {
	if x != nil {
		return x.SfsStatus
	}
	return ""
}

func (x *ListSfsRequest) GetSfsProtocol() string {
	if x != nil {
		return x.SfsProtocol
	}
	return ""
}

func (x *ListSfsRequest) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *ListSfsRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListSfsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSfsRequest) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

type ListSfsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回的文件列表
	List []*SfsObject `protobuf:"bytes,1,rep,name=list,proto3" form:"list" json:"list,omitempty" query:"list"`
	// 资源池下用户并行文件总数
	TotalCount int32 `protobuf:"varint,2,opt,name=totalCount,proto3" form:"totalCount" json:"totalCount,omitempty" query:"totalCount"`
	// 当前页码下查询回来的用户并行文件数
	CurrentCount int32 `protobuf:"varint,3,opt,name=currentCount,proto3" form:"currentCount" json:"currentCount,omitempty" query:"currentCount"`
	// 资源池下用户并行文件总数
	Total int32 `protobuf:"varint,4,opt,name=total,proto3" form:"total" json:"total,omitempty" query:"total"`
	// 每页包含的元素个数范围(1-50)
	PageSize int32 `protobuf:"varint,5,opt,name=pageSize,proto3" form:"pageSize" json:"pageSize,omitempty" query:"pageSize"`
	// 列表的分页页码
	PageNo int32 `protobuf:"varint,6,opt,name=pageNo,proto3" form:"pageNo" json:"pageNo,omitempty" query:"pageNo"`
}

func (x *ListSfsResponse) Reset() {
	*x = ListSfsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSfsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSfsResponse) ProtoMessage() {}

func (x *ListSfsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSfsResponse.ProtoReflect.Descriptor instead.
func (*ListSfsResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{1}
}

func (x *ListSfsResponse) GetList() []*SfsObject {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListSfsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListSfsResponse) GetCurrentCount() int32 {
	if x != nil {
		return x.CurrentCount
	}
	return 0
}

func (x *ListSfsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSfsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSfsResponse) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

type SfsObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 并行文件命名
	SfsName string `protobuf:"bytes,1,opt,name=sfsName,proto3" form:"sfsName" json:"sfsName,omitempty" query:"sfsName"`
	// 并行文件唯一 ID
	SfsUID string `protobuf:"bytes,2,opt,name=sfsUID,proto3" form:"sfsUID" json:"sfsUID,omitempty" query:"sfsUID"`
	// 大小（GB）
	SfsSize int32 `protobuf:"varint,3,opt,name=sfsSize,proto3" form:"sfsSize" json:"sfsSize,omitempty" query:"sfsSize"`
	// 类型，hpfs_perf(HPC性能型)
	SfsType string `protobuf:"bytes,4,opt,name=sfsType,proto3" form:"sfsType" json:"sfsType,omitempty" query:"sfsType"`
	// 挂载协议，nfs/hpfs
	SfsProtocol string `protobuf:"bytes,5,opt,name=sfsProtocol,proto3" form:"sfsProtocol" json:"sfsProtocol,omitempty" query:"sfsProtocol"`
	// 并行文件状态
	SfsStatus string `protobuf:"bytes,6,opt,name=sfsStatus,proto3" form:"sfsStatus" json:"sfsStatus,omitempty" query:"sfsStatus"`
	// 已用大小（MB）
	UsedSize int32 `protobuf:"varint,7,opt,name=usedSize,proto3" form:"usedSize" json:"usedSize,omitempty" query:"usedSize"`
	// 创建时刻，epoch 时戳，精度毫秒
	CreateTime int64 `protobuf:"varint,8,opt,name=createTime,proto3" form:"createTime" json:"createTime,omitempty" query:"createTime"`
	// 更新时刻，epoch 时戳，精度毫秒
	UpdateTime int64 `protobuf:"varint,9,opt,name=updateTime,proto3" form:"updateTime" json:"updateTime,omitempty" query:"updateTime"`
	// 资源所属企业项目 ID
	ProjectID string `protobuf:"bytes,10,opt,name=projectID,proto3" form:"projectID" json:"projectID,omitempty" query:"projectID"`
	// 是否按需订购
	OnDemand bool `protobuf:"varint,11,opt,name=onDemand,proto3" form:"onDemand" json:"onDemand,omitempty" query:"onDemand"`
	// 资源池 ID
	RegionID string `protobuf:"bytes,12,opt,name=regionID,proto3" form:"regionID" json:"regionID,omitempty" query:"regionID"`
	// 多可用区下的可用区名字
	AzName string `protobuf:"bytes,13,opt,name=azName,proto3" form:"azName" json:"azName,omitempty" query:"azName"`
	// 集群名称
	ClusterName string `protobuf:"bytes,14,opt,name=clusterName,proto3" form:"clusterName" json:"clusterName,omitempty" query:"clusterName"`
	// 性能基线（MB/s/TB）
	Baseline string `protobuf:"bytes,15,opt,name=baseline,proto3" form:"baseline" json:"baseline,omitempty" query:"baseline"`
	// HPFS文件系统共享路径(Linux)
	HpfsSharePath string `protobuf:"bytes,16,opt,name=hpfsSharePath,proto3" form:"hpfsSharePath" json:"hpfsSharePath,omitempty" query:"hpfsSharePath"`
	// HPC型挂载需要的密钥
	SecretKey string `protobuf:"bytes,17,opt,name=secretKey,proto3" form:"secretKey" json:"secretKey,omitempty" query:"secretKey"`
	// HPFS文件系统下的数据流动策略ID列表
	DataflowList []string `protobuf:"bytes,18,rep,name=dataflowList,proto3" form:"dataflowList" json:"dataflowList,omitempty" query:"dataflowList"`
	// HPFS文件系统下的数据流动策略数量
	DataflowCount int32 `protobuf:"varint,19,opt,name=dataflowCount,proto3" form:"dataflowCount" json:"dataflowCount,omitempty" query:"dataflowCount"`
}

func (x *SfsObject) Reset() {
	*x = SfsObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SfsObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SfsObject) ProtoMessage() {}

func (x *SfsObject) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SfsObject.ProtoReflect.Descriptor instead.
func (*SfsObject) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{2}
}

func (x *SfsObject) GetSfsName() string {
	if x != nil {
		return x.SfsName
	}
	return ""
}

func (x *SfsObject) GetSfsUID() string {
	if x != nil {
		return x.SfsUID
	}
	return ""
}

func (x *SfsObject) GetSfsSize() int32 {
	if x != nil {
		return x.SfsSize
	}
	return 0
}

func (x *SfsObject) GetSfsType() string {
	if x != nil {
		return x.SfsType
	}
	return ""
}

func (x *SfsObject) GetSfsProtocol() string {
	if x != nil {
		return x.SfsProtocol
	}
	return ""
}

func (x *SfsObject) GetSfsStatus() string {
	if x != nil {
		return x.SfsStatus
	}
	return ""
}

func (x *SfsObject) GetUsedSize() int32 {
	if x != nil {
		return x.UsedSize
	}
	return 0
}

func (x *SfsObject) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SfsObject) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SfsObject) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *SfsObject) GetOnDemand() bool {
	if x != nil {
		return x.OnDemand
	}
	return false
}

func (x *SfsObject) GetRegionID() string {
	if x != nil {
		return x.RegionID
	}
	return ""
}

func (x *SfsObject) GetAzName() string {
	if x != nil {
		return x.AzName
	}
	return ""
}

func (x *SfsObject) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *SfsObject) GetBaseline() string {
	if x != nil {
		return x.Baseline
	}
	return ""
}

func (x *SfsObject) GetHpfsSharePath() string {
	if x != nil {
		return x.HpfsSharePath
	}
	return ""
}

func (x *SfsObject) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *SfsObject) GetDataflowList() []string {
	if x != nil {
		return x.DataflowList
	}
	return nil
}

func (x *SfsObject) GetDataflowCount() int32 {
	if x != nil {
		return x.DataflowCount
	}
	return 0
}

var File_hpfs_proto protoreflect.FileDescriptor

var file_hpfs_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x70, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9,
	0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x09, 0x73,
	0x66, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xb2, 0xbb, 0x18, 0x09, 0x73, 0x66, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x73,
	0x66, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x66, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2,
	0xbb, 0x18, 0x0b, 0x73, 0x66, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0b,
	0x73, 0x66, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x06, 0x61,
	0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xb2, 0xbb, 0x18,
	0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xb2, 0xbb, 0x18, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c,
	0xb2, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xb2, 0xbb, 0x18, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x66, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x22, 0xc7, 0x04, 0x0a, 0x09, 0x53, 0x66, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x66, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x66, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x66,
	0x73, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x66, 0x73, 0x55,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x66, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x66, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x66, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x66, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x66, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x66, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x7a, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x7a, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x68, 0x70, 0x66, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x70, 0x66, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x86, 0x01, 0x0a,
	0x0b, 0x48, 0x70, 0x66, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x07,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0xca, 0xc1, 0x18, 0x11, 0x2f, 0x76, 0x34, 0x2f,
	0x68, 0x70, 0x66, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x73, 0x66, 0x73, 0x1a, 0x26, 0x92,
	0xce, 0x18, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x68, 0x70, 0x66, 0x73, 0x2d,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x63, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x74, 0x79,
	0x75, 0x6e, 0x2e, 0x63, 0x6e, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x68, 0x70,
	0x66, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x68, 0x70, 0x66, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hpfs_proto_rawDescOnce sync.Once
	file_hpfs_proto_rawDescData = file_hpfs_proto_rawDesc
)

func file_hpfs_proto_rawDescGZIP() []byte {
	file_hpfs_proto_rawDescOnce.Do(func() {
		file_hpfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_hpfs_proto_rawDescData)
	})
	return file_hpfs_proto_rawDescData
}

var file_hpfs_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_hpfs_proto_goTypes = []interface{}{
	(*ListSfsRequest)(nil),  // 0: proto.ListSfsRequest
	(*ListSfsResponse)(nil), // 1: proto.ListSfsResponse
	(*SfsObject)(nil),       // 2: proto.SfsObject
}
var file_hpfs_proto_depIdxs = []int32{
	2, // 0: proto.ListSfsResponse.list:type_name -> proto.SfsObject
	0, // 1: proto.HpfsService.ListSfs:input_type -> proto.ListSfsRequest
	1, // 2: proto.HpfsService.ListSfs:output_type -> proto.ListSfsResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_hpfs_proto_init() }
func file_hpfs_proto_init() {
	if File_hpfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hpfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSfsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSfsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SfsObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hpfs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hpfs_proto_goTypes,
		DependencyIndexes: file_hpfs_proto_depIdxs,
		MessageInfos:      file_hpfs_proto_msgTypes,
	}.Build()
	File_hpfs_proto = out.File
	file_hpfs_proto_rawDesc = nil
	file_hpfs_proto_goTypes = nil
	file_hpfs_proto_depIdxs = nil
}
